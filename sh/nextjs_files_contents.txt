File: ./quality-admin/bin/next-sever.js
Content:
const http = require('http');
const next = require('next');

const dev = process.env.NODE_ENV !== 'production';
const nextApp = next({ dev });
const handle = nextApp.getRequestHandler();
const nextPort = '4000';

nextApp
  .prepare()
  .then(() => {
    http.createServer((req, res) => handle(req, res)).listen(nextPort);
  })
  .catch((e) => {
    console.log('cannot prepare next', e);
  });

File: ./quality-admin/config/db.js
Content:
const mysql = require('mysql2');

const db_info = {
  host: '13.209.138.233',
  port: '3306',
  user: 'root',
  password: 'chatbot',
  database: 'qcbot',
};

module.exports = {
  init() {
    const pool = mysql.createPool(db_info);
    return pool;
  },
  connect(pool) {
    pool.getConnection((err, conn) => {
      if (err) {
        console.error(`mysql connection error : ${err}`);
      } else {
        console.log('mysql is connected successfully!');
        conn.release();  
      }
    });
  }
};

File: ./quality-admin/config/jwtMiddleware.js
Content:
const jwt = require('jsonwebtoken');

const jwtMiddleware = (req, res, next) => {
  const token = req.headers['authorization']
    ? req.headers['authorization'].split(' ')[1]
    : null;

  if (!token) {
    return res.status(403).send({
      success: false,
      msg: '로그인이 되어있지 않습니다.',
      error: err,
    });
  }

  try {
    const verifiedToken = jwt.verify(token, process.env.JWT_KEY);
    req.verifiedToken = verifiedToken;

    next();
  } catch (err) {
    return res.status(403).send({
      success: false,
      msg: '등록된 사용자가 아닙니다.',
      error: err,
    });
  }
};

module.exports = jwtMiddleware;

File: ./quality-admin/next.config.js
Content:
const nextConfig = {
  reactStrictMode: true,
  compiler: {
    
    styledComponents: true, 
  },
  distDir: '.next',
};

module.exports = nextConfig;

File: ./quality-admin/next-env.d.ts
Content:






File: ./quality-admin/type/frequencyType.ts
Content:
export interface FrequencyProps {
  frequencyData: FrequencyType;
}

export type FrequencyType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
    name: string;
    fee: number;
    frequency: string;
  }[];
  categories: {
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
  }[];
};

export type AddFrequencyType = {
  fst: string | null;
  scd: string | null;
  trd: string | null;
  product: string | null;
  frequency: string | null;
};

File: ./quality-admin/type/faqType.ts
Content:
export interface FaqProps {
  faqData: FaqType[];
}

export type FaqType = {
  id: number;
  created_at: Date;
  modified_at: Date;
  business: string;
  category: string;
  supplement: string;
  question: string;
  answer: string;
  keyword: string;
};

export type ModalFaqType = {
  id: number | null;
  question: string | null;
  answer: string | null;
  tag: string;
  modal: boolean;
};

File: ./quality-admin/type/notificationType.ts
Content:


export interface NotificationProps {
  notificationData: NotificationType;
}

export type NotificationType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: NotificationItemType[];
};

export type NotificationItemType = {
  id: number;
  noti_user_id: number;
  noti_product_id: number;
  noti_date: Date;
  status: string;
  created_at: Date;
  updated_at: Date;
  product_name: string;
  expiry_date: Date;
  company_name: string;
  business_no: string;
  rep_name: string;
  business_type: string;
  phone_no: string;
};

export type NotificationFilterType = {
  company_name?: string;
  business_no?: string;
  rep_name?: string;
  business_type?: string;
  phone_no?: string;
};

File: ./quality-admin/type/usersType.ts
Content:
export interface UsersProps {
  usersData: UsersType;
}

export type UsersType = {
  data: {
    id: number;
    created_at: Date;
    user_name: string;
    user_role: string;
    user_email: string;
    user_phone: string;
  }[];
  success: boolean;
};

export type DetailUser = {
  modal: boolean;
  data: {
    id: number | null;
    created_at: Date | null;
    user_name: string | null;
    user_role: string | null;
    user_email: string | null;
    user_phone: string | null;
  };
};

File: ./quality-admin/type/commonType.ts
Content:

export interface TableProps {
  tableHeader: string[];
  tableBody: React.ReactNode;
}

export interface CheckTableProps {
  tableHeader: any[];
  tableBody: React.ReactNode;
  selectAll: boolean;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

export type ModalType = {
  add: boolean;
  edit: boolean;
};

export type DownloadType = {
  id: number;
  base_name: string;
  phone_number: string;
};

File: ./quality-admin/type/react-dropdown.d.ts
Content:
import { ReactNode } from 'react';

export interface DropdownOption {
  value: string;
  label?: string;
}

export interface DropdownProps {
  options: DropdownOption[] | string[];
  onChange?: (option: DropdownOption) => void;
  value?: string | DropdownOption;
  placeholder?: string;
  disabled?: boolean;
  className?: string;
  controlClassName?: string;
  placeholderClassName?: string;
  menuClassName?: string;
  arrowClassName?: string;
  arrowClosed?: ReactNode;
  arrowOpen?: ReactNode;
}

declare module 'react-dropdown' {
  const Dropdown: React.FC<DropdownProps>;
  export default Dropdown;
}

File: ./quality-admin/type/feeType.ts
Content:
export interface FeeProps {
  feeData: FeeType;
}

export type FeeType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    fst_category: string;
    product: string;
    name: string;
    fee: number;
  }[];
  categories: {
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
  }[];
};

export type FeeModalType = {
  add: boolean;
  edit: boolean;
};

export type FeeDropdownType = {
  fst: boolean;
  scd: boolean;
  trd: boolean;
};

File: ./quality-admin/type/instituteType.ts
Content:
export interface InstituteProps {
  instituteData: InstituteType;
}

export type InstituteType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    category: string;
    district: string;
    region: string;
    expiration: string;
    fax: string;
    location: string;
    director: string;
    name: string;
    phone: string;
    remarks: string;
  }[];
  categories: {
    value: string;
    type: string;
  }[];
};

export type ModalInstituteType = {
  modal: boolean;
  data: {
    id: number | null;
    category: string | null;
    district: string | null;
    director: string | null;
    region: string | null;
    expiration: string | null;
    fax: string | null;
    location: string | null;
    name: string | null;
    phone: string | null;
    remarks: string | null;
  };
};

export type DetailInstitute = {
  id: number | null;
  category: string | null;
  district: string | null;
  region: string | null;
  expiration: string | null;
  fax: string | null;
  location: string | null;
  name: string | null;
  phone: string | null;
  remarks: string | null;
};

File: ./quality-admin/.env
Content:
# NEXT_PUBLIC_APP_API_KEY = "http:
# NEXT_PUBLIC_APP_API_KEY = "http:
NEXT_PUBLIC_APP_API_KEY = "http:

GMAIL_ADDRESS = "qhrjs407@gmail.com"
GMAIL_PASSWORD = "uuxfpjgiwhkfohpo"
JWT_KEY = 'qhrjs407!'x  
File: ./quality-admin/ecosystem.config.js
Content:
module.exports = {
  apps: [
    {
      name: 'backend-server',
      script: './bin/www', 
      env: {
        NODE_ENV: 'production',
        PORT: 3002, 
      },
    },
    {
      name: 'next-server',
      script: 'npm',
      args: 'run next-start', 
      env: {
        NODE_ENV: 'production',
        PORT: 4000, 
      },
    },
  ],
};

File: ./quality-admin/routes/v1/fee/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/fee/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { fst, productName, nameCheck, feeValue, page, pageSize } = req.query;

  let fst_category = fst ? `%${fst}%` : '식품업';
  let product = productName ? `%${productName}%` : null;
  let name = nameCheck ? `%${nameCheck}%` : null;
  let fee = feeValue ? feeValue : null;
  
  const pageValue = page ? parseInt(page) : 1;
  const pageSizeValue = pageSize ? parseInt(pageSize) : 8;
  const offset = (pageValue - 1) * pageSizeValue;

  
  const sqlCount = `select count(*) as totalCount from qcbot.tbl_fee
    where
  (fst_category like ifnull(?, fst_category)) and
  (product like ifnull(?, product)) and
  (name like ifnull(?, name)) and
  (fee like ifnull(?, fee))
  `;
  
  const sql = `select * from qcbot.tbl_fee
    where
  (fst_category like ifnull(?, fst_category)) and
  (product like ifnull(?, product)) and
  (name like ifnull(?, name)) and
  (fee like ifnull(?, fee))
    order by id desc
    limit ? offset ?
  `;

  
  const queryValues = [fst_category, product, name, fee, pageSizeValue, offset];

  conn.query(sqlCount, queryValues.slice(0, -2), (err, countResult) => {
    if (err) {
      return res.status(403).send({
        success: false,
        msg: '다시 시도해주세요.',
      });
    }
    const totalCount = countResult[0].totalCount;

    conn.query(sql, queryValues, (err, rows) => {
      if (err) {
        return res.status(500).send({
          success: false,
          msg: '데이터를 가져오는 데 실패했습니다.',
        });
      }
      return res.status(200).send({
        success: true,
        datas: rows,
        pageCount: totalCount,
        pageSize: pageSizeValue,
        currentPage: pageValue,
      });
    });
  });
};

exports.modify = (req, res) => {
  const { check, fee } = req.body;

  const ids = Object.keys(check)
    .filter((key) => check[key] === true)
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  const placeholders = ids.map(() => '?').join(',');

  const sqlSelect = `SELECT name FROM qcbot.tbl_fee WHERE id IN (${placeholders})`;

  conn.query(sqlSelect, [...ids], (err, rows) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터 조회에 실패했습니다.',
      });
    }

    
    const uniqueNames = [...new Set(rows.map((row) => row.name))];
    if (uniqueNames.length > 1) {
      return res.status(501).send({
        success: false,
        msg: '선택된 항목들의 name 값이 서로 다릅니다.',
      });
    }

    
    const sqlUpdate = `UPDATE qcbot.tbl_fee SET fee = ? WHERE id IN (${placeholders})`;

    conn.query(sqlUpdate, [fee, ...ids], (err, row) => {
      if (err) {
        return res.status(500).send({
          success: false,
          msg: '데이터를 수정하는 데 실패했습니다.',
        });
      }
      return res.status(200).send({
        success: true,
        data: row,
      });
    });
  });
};

exports.delete = (req, res) => {
  const { check } = req.query;

  console.log(check);
  const ids = Object.keys(check)
    .filter((key) => check[key] === 'true') 
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');

  
  const sql = `DELETE FROM qcbot.tbl_fee WHERE id IN (${placeholders})`;

  conn.query(sql, ids, (err, result) => {
    if (err) {
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '삭제 중 오류가 발생했습니다.',
      });
    }

    return res.status(200).send({
      success: true,
      code: 200,
      msg: '삭제되었습니다.',
    });
  });
};

File: ./quality-admin/routes/v1/frequency/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/frequency/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();
const pool = require('../../../config/db').init();

exports.list = (req, res) => {
  const { fst, scd, productName, page, pageSize } = req.query;

  let fst_category = fst ? `%${fst}%` : '식품업';
  let scd_category = scd ? `%${scd}%` : null;
  let product = productName ? `%${productName}%` : null;
  
  let pageValue = page ? parseInt(page) : 1;
  let pageSizeValue = pageSize ? parseInt(pageSize) : 8;
  let offset = (pageValue - 1) * pageSizeValue;

  
  const sqlCount = `
    SELECT COUNT(DISTINCT product) AS totalCount
    FROM qcbot.tbl_frequency
    WHERE
      (fst_category LIKE IFNULL(?, fst_category)) AND
      (scd_category LIKE IFNULL(?, scd_category)) AND
      (product LIKE IFNULL(?, product))
  `;

  
  const sql = `
    SELECT DISTINCT product, fst_category, scd_category, frequency, MAX(id) AS id
    FROM qcbot.tbl_frequency
    WHERE
      (fst_category LIKE IFNULL(?, fst_category)) AND
      (scd_category LIKE IFNULL(?, scd_category)) AND
      (product LIKE IFNULL(?, product))
    GROUP BY product, fst_category, scd_category, frequency
    ORDER BY id DESC
    LIMIT ?, ?
  `;

  
  const sqlCategories = `
    SELECT DISTINCT fst_category, scd_category, product
    FROM qcbot.tbl_frequency
  `;

  
  const queryValues = [
    fst_category,
    scd_category,
    product,
    offset,
    pageSizeValue,
  ];

  conn.query(sqlCategories, [], (err, categoryResults) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '카테고리를 가져오는 데 실패했습니다.',
      });
    }
    conn.query(sqlCount, queryValues.slice(0, -2), (err, countResult) => {
      if (err) {
        return res.status(403).send({
          success: false,
          msg: '다시 시도해주세요.',
        });
      }
      const totalCount = countResult[0].totalCount;

      conn.query(sql, queryValues, (err, rows) => {
        if (err) {
          return res.status(500).send({
            success: false,
            msg: '데이터를 가져오는 데 실패했습니다.',
          });
        }
        return res.status(200).send({
          success: true,
          datas: rows,
          pageCount: totalCount,
          pageSize: pageSizeValue,
          currentPage: pageValue,
          categories: categoryResults,
        });
      });
    });
  });
};

exports.add = (req, res) => {
  const { datas } = req.body;
  console.log(datas)
  const feeValues = datas.map((data) => [
    data.fst_category,
    data.scd_category,
    data.product,
    data.name,
    data.fee,
    data.frequency,
    data.remarks,
    data.test_code,
  ]);

  const sqlFeeInsert = `
    INSERT INTO qcbot.tbl_fee (fst_category, scd_category, product, name, fee, frequency, remarks, test_code)
    VALUES ?
  `;

  const sqlFeeCheck = `
    SELECT fst_category, scd_category, product, name, fee
    FROM qcbot.tbl_fee
    WHERE (fst_category, scd_category, product, name, fee) IN (?)
  `;

  let successCount = 0;
  let duplicateCount = 0;

  pool.getConnection((err, conn) => {
    if (err) {
      return res.status(500).send({
        success: false,
        message: '데이터베이스 연결에 실패했습니다.',
        error: err.message,
      });
    }

    conn.beginTransaction((err) => {
      if (err) {
        conn.release();
        return res.status(500).send({
          success: false,
          message: '트랜잭션 시작에 실패했습니다.',
          error: err.message,
        });
      }

      
      conn.query(
        sqlFeeCheck,
        [feeValues.map((v) => [v[0], v[1], v[2], v[3], v[4]])],
        (err, existingFeeRows) => {
          if (err) {
            conn.release();
            return res.status(500).send({
              success: false,
              message: 'tbl_fee 중복 확인 실패.',
              error: err.message,
            });
          }

          const existingFeeKeys = new Set(
            existingFeeRows.map(
              (row) =>
                `${row.fst_category}-${row.scd_category}-${row.product}-${row.name}-${row.fee}`
            )
          );

          
          const newFeeValues = feeValues.filter((value) => {
            const key = `${value[0]}-${value[1]}-${value[2]}-${value[3]}-${value[4]}`;
            return !existingFeeKeys.has(key);
          });

          
          duplicateCount += existingFeeKeys.size;

          
          if (newFeeValues.length > 0) {
            conn.query(sqlFeeInsert, [newFeeValues], (err, result) => {
              if (err) {
                return conn.rollback(() => {
                  conn.release();
                  return res.status(500).send({
                    success: false,
                    message: 'tbl_fee 데이터 삽입 실패.',
                  });
                });
              }

              
              successCount += result.affectedRows;

              
              conn.commit((err) => {
                if (err) {
                  return conn.rollback(() => {
                    conn.release();
                    return res.status(500).send({
                      success: false,
                      message: '커밋 실패.',
                      error: err.message,
                    });
                  });
                }

                conn.release();
                return res.status(200).send({
                  success: true,
                  message: '데이터가 성공적으로 처리되었습니다.',
                  successCount,
                  duplicateCount,
                });
              });
            });
          } else {
            
            conn.commit((err) => {
              if (err) {
                return conn.rollback(() => {
                  conn.release();
                  return res.status(500).send({
                    success: false,
                    message: '커밋 실패.',
                    error: err.message,
                  });
                });
              }

              conn.release();
              return res.status(200).send({
                success: true,
                message: '중복된 데이터만 존재합니다.',
                successCount,
                duplicateCount,
              });
            });
          }
        }
      );
    });
  });
};


exports.delete = (req, res) => {
  const { check } = req.query;

  console.log(check);
  const ids = Object.keys(check)
    .filter((key) => check[key] === 'true') 
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');

  
  const sql = `DELETE FROM qcbot.tbl_frequency WHERE id IN (${placeholders})`;

  conn.query(sql, ids, (err, result) => {
    if (err) {
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '삭제 중 오류가 발생했습니다.',
      });
    }

    return res.status(200).send({
      success: true,
      code: 200,
      msg: '삭제되었습니다.',
    });
  });
};

exports.modify = (req, res) => {
  const { check, frequency } = req.body;

  console.log(req.body);

  
  const ids = Object.keys(check)
    .filter((key) => check[key] === true)
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');
  console.log('Placeholders:', placeholders);
  console.log('IDs:', ids);

  const sql = `UPDATE qcbot.tbl_frequency SET frequency = ? WHERE id IN (${placeholders})`;

  
  conn.query(sql, [frequency, ...ids], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 수정하는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

File: ./quality-admin/routes/v1/auth/index.js
Content:
const router = require('express').Router();
const dao = require('./dao'); 

router.post('/', dao.send);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'auth unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/auth/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();
const nodemailer = require('nodemailer');

const jwt = require('jsonwebtoken');
require('dotenv').config();

const generateAuthCode = () => {
  return String(Math.floor(Math.random() * 1000000)).padStart(6, '0');
};

const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    port: 587,
    host: 'smtp.gmail.com',
    secure: false,
    requireTLS: true,
    auth: {
      user: process.env.GMAIL_ADDRESS,
      pass: process.env.GMAIL_PASSWORD,
    },
  });
};

const createMailOptions = (userEmail, authCode) => {
  return {
    from: process.env.GMAIL_ADDRESS,
    to: userEmail,
    subject: '보건환경연구원 로그인 2차 인증메일입니다.',
    html: `
      <p>계정 보안을 위해 2차 인증이 필요합니다. 아래 인증 코드를 입력하여 로그인 절차를 완료해주세요.</p>
      <br></br>
      <p><strong>인증번호: ${authCode}</strong></p>
      <br></br>
      <p>인증코드는 5분 동안만 유효합니다.<br/>
      인증이 완료되지 않은 경우 새로운 인증코드를 발급받으시기 바랍니다.</p>
    `,
  };
};
exports.send = (req, res) => {
  const { user_email } = req.body;

  if (!user_email) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '이메일을 입력해주세요.',
    });
  }

  const sql = 'SELECT * FROM qcbot.tbl_users WHERE user_email = ?';

  conn.query(sql, [user_email], (err, rows) => {
    if (err) {
      console.error('DB 오류:', err);
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '서버 오류가 발생했습니다.',
      });
    }

    
    if (rows.length === 0) {
      return res.status(400).send({
        success: false,
        code: 400,
        msg: '회원정보가 존재하지 않습니다.',
      });
    }
    console.log(rows[0]);
    
    const authCode = generateAuthCode();
    const transporter = createTransporter();
    const mailOptions = createMailOptions(user_email, authCode);

    transporter.sendMail(mailOptions, (err) => {
      if (err) {
        console.error('메일 전송 오류:', err);
        return res.status(500).send({
          success: false,
          code: 500,
          msg: '메일 전송에 실패했습니다.',
        });
      }

      try {
        const { id, user_email } = rows[0];
        const token = jwt.sign(
          { user_id: id, user_email: user_email },
          process.env.JWT_KEY
        );
        console.log('Generated Token:', token);
        return res.status(200).send({
          jwt: token,
          authcode: authCode,
          success: true,
          code: 200,
          msg: '입력하신 이메일로 인증번호가 발송되었습니다.',
        });
      } catch (error) {
        console.error('토큰 생성 오류:', error);
        return res.status(500).send({
          success: false,
          code: 500,
          msg: '서버 오류가 발생했습니다.',
        });
      }
    });
  });
};

File: ./quality-admin/routes/v1/faq/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/faq/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { filter } = req.query;

  
  const keyword = filter || null;

  sql = `select * from qcbot.tbl_faq where keyword like ifnull(?, keyword) order by id desc`;

  conn.query(sql, [keyword], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.add = (req, res) => {
  const { question, answer, tag } = req.body;

  sql =
    'insert into qcbot.tbl_faq ( question, answer, keyword ) values (?, ?, ?)';

  conn.query(sql, [question, answer, tag], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.modify = (req, res) => {
  const { question, answer, tag, id } = req.body;

  sql = `update qcbot.tbl_faq set question = ?, answer = ?, keyword = ? where id = ?`;

  conn.query(sql, [question, answer, tag, id], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.delete = (req, res) => {
  const { id } = req.query;

  conn.query('delete from qcbot.tbl_faq where id = ?', [id], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

File: ./quality-admin/routes/v1/institute/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/institute/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();
const pool = require('../../../config/db').init();

exports.list = (req, res) => {
  const { fst, nameCheck, regionValue, districtValue, page, pageSize } =
    req.query;

  let category = fst ? `%${fst}%` : null;
  let name = nameCheck ? `%${nameCheck}%` : null;
  let region = regionValue ? `%${regionValue}%` : null;
  let district = districtValue ? `%${districtValue}%` : null;

  
  const pageValue = page ? parseInt(page) : 1;
  const pageSizeValue = pageSize ? parseInt(pageSize) : 8;
  const offset = (pageValue - 1) * pageSizeValue;

  
  const sqlCount = `select count(*) as totalCount from qcbot.tbl_institute
    where
  (category like ifnull(?, category)) and
  (region like ifnull(?, region)) and
  (district like ifnull(?, district)) and
  (name like ifnull(?, name))
  `;
  
  const sql = `select * from qcbot.tbl_institute
    where
  (category like ifnull(?, category)) and
  (region like ifnull(?, region)) and
  (district like ifnull(?, district)) and
  (name like ifnull(?, name))
    order by id desc
    limit ? offset ?
  `;
  
  const sqlCategories = `
  select distinct cast(category as char) as value, 'category' as type from qcbot.tbl_institute
  union
  select distinct cast(region as char) as value, 'region' as type from qcbot.tbl_institute
  union
  select distinct cast(district as char) as value, 'district' as type from qcbot.tbl_institute;
  `;

  
  const queryValues = [category, region, district, name, pageSizeValue, offset];

  conn.query(sqlCategories, (err, categoryResults) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '카테고리를 가져오는 데 실패했습니다.',
      });
    }
    conn.query(sqlCount, queryValues.slice(0, -2), (err, countResult) => {
      if (err) {
        return res.status(403).send({
          success: false,
          msg: '다시 시도해주세요.',
        });
      }
      const totalCount = countResult[0].totalCount;

      conn.query(sql, queryValues, (err, rows) => {
        if (err) {
          return res.status(500).send({
            success: false,
            msg: '데이터를 가져오는 데 실패했습니다.',
          });
        }
        return res.status(200).send({
          success: true,
          datas: rows,
          pageCount: totalCount,
          pageSize: pageSizeValue,
          currentPage: pageValue,
          categories: categoryResults,
        });
      });
    });
  });
};

exports.add = (req, res) => {
  const { institutes } = req.body;
  console.log(institutes);

  const values = institutes.map((institute) => [
    institute.category,
    institute.name,
    institute.director,
    institute.location,
    institute.region,
    institute.district,
    institute.phone,
    institute.fax,
    institute.remarks,
    institute.expiration,
  ]);

  const deleteSql = 'DELETE FROM qcbot.tbl_institute';
  const insertSql =
    'INSERT INTO qcbot.tbl_institute (category, name, director, location, region, district, phone, fax, remarks, expiration) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

  pool.getConnection((err, conn) => {
    if (err) {
      return res.status(500).send({
        success: false,
        message: '데이터베이스 연결에 실패했습니다.',
      });
    }

    
    conn.beginTransaction((err) => {
      if (err) {
        conn.release();
        return res.status(500).send({
          success: false,
          message: '트랜잭션 시작에 실패했습니다.',
        });
      }

      
      conn.query(deleteSql, (err) => {
        if (err) {
          return conn.rollback(() => {
            conn.release();
            return res.status(500).send({
              success: false,
              message: '기존 데이터 삭제에 실패했습니다.',
            });
          });
        }

        
        const promises = values.map(
          (value) =>
            new Promise((resolve, reject) => {
              conn.query(insertSql, value, (err) => {
                if (err) reject(err);
                else resolve();
              });
            })
        );

        Promise.all(promises)
          .then(() => {
            
            conn.commit((err) => {
              if (err) {
                return conn.rollback(() => {
                  conn.release();
                  return res.status(500).send({
                    success: false,
                    message: '커밋 중 오류가 발생했습니다.',
                  });
                });
              }

              conn.release();
              return res.status(200).send({
                success: true,
                message: '데이터가 성공적으로 업데이트되었습니다.',
              });
            });
          })
          .catch((err) => {
            conn.rollback(() => {
              conn.release();
              return res.status(500).send({
                success: false,
                message: '데이터 삽입 중 오류가 발생했습니다.',
                error: err.message,
              });
            });
          });
      });
    });
  });
};


exports.delete = (req, res) => {
  const { id } = req.query;

  conn.query(
    'delete from qcbot.tbl_institute where id = ?',
    [id],
    (err, row) => {
      if (err) {
        return res.status(500).send({
          success: false,
          msg: '데이터를 가져오는 데 실패했습니다.',
        });
      }
      return res.status(200).send({
        success: true,
        data: row,
      });
    }
  );
};

exports.modify = (req, res) => {
  const {
    id,
    category,
    director,
    district,
    region,
    expiration,
    fax,
    name,
    phone,
    remarks,
  } = req.body;

  sql =
    'update qcbot.tbl_institute set category = ?, director = ?, district = ?, region = ?, expiration = ?, fax = ?, name = ?, phone = ?,  remarks = ? where id = ?';
  conn.query(
    sql,
    [
      category,
      director,
      district,
      region,
      expiration,
      fax,
      name,
      phone,
      remarks,
      id,
    ],
    (err, rows) => {
      if (err) throw err;

      return res.status(200).send({
        success: true,
        code: 200,
        msg: '수정이 완료되었습니다.',
      });
    }
  );
};

File: ./quality-admin/routes/v1/index.js
Content:
const router = require('express').Router();

const users = require('./users');
const faq = require('./faq');
const fee = require('./fee');
const frequency = require('./frequency');
const institute = require('./institute');
const auth = require('./auth');
const notifications = require('./notifications');

router.use('/notifications', notifications);
router.use('/users', users);
router.use('/faq', faq);
router.use('/fee', fee);
router.use('/frequency', frequency);
router.use('/institute', institute);
router.use('/auth', auth);

router.all('*', (req, res) => {
  res.status(404).send({ success: false,g: `api unknown uri ${req.path}` });
});

module.exports = router;

File: ./quality-admin/routes/v1/users/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.patch('/', dao.modify);
router.delete('/', dao.delete);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/users/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { user_name, user_role, user_email, user_phone } = req.query;

  let name = user_name ? `%${user_name}%` : null;
  let role = user_role ? `%${user_role}%` : null;
  let email = user_email ? `%${user_email}%` : null;
  let phone = user_phone ? `%${user_phone}%` : null;

  sql = `select * from qcbot.tbl_users
   where
    (user_name like ifnull(?, user_name)) and
    (user_role like ifnull(?, user_role)) and
    (user_email like ifnull(?, user_email)) and
    (user_phone like ifnull(?, user_phone))
  order by id desc
  `;

  conn.query(sql, [name, role, email, phone], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.add = (req, res) => {
  const { name, role, email, phoneNo } = req.body;

  sql =
    'insert into qcbot.tbl_users ( user_name, user_role, user_email, user_phone ) values (?, ?, ?, ?)';

  conn.query(sql, [name, role, email, phoneNo], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 저장하는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.delete = (req, res) => {
  const { check } = req.body; 

  const ids = Object.keys(check)
    .filter((key) => check[key] === true) 
    .map((key) => Number(key));

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');

  
  const sql = `DELETE FROM qcbot.tbl_users WHERE id IN (${placeholders})`;

  conn.query(sql, ids, (err, result) => {
    if (err) {
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '삭제 중 오류가 발생했습니다.',
      });
    }

    return res.status(200).send({
      success: true,
      code: 200,
      msg: '삭제되었습니다.',
    });
  });
};

exports.modify = (req, res) => {
  const { id, user_email, user_name, user_phone, user_role } = req.body;

  sql =
    'update qcbot.tbl_users set user_email = ?, user_name = ?, user_phone = ?, user_role = ? where id = ?';
  conn.query(
    sql,
    [user_email, user_name, user_phone, user_role, id],
    (err, rows) => {
      if (err) throw err;

      return res.status(200).send({
        success: true,
        code: 200,
        msg: '수정이 완료되었습니다.',
      });
    }
  );
};

File: ./quality-admin/routes/v1/notifications/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/health', (req, res) => {
  res.status(200).send({ success: true, msg: 'health check' });
});

router.get('/', dao.list);
router.patch('/', dao.modify);
router.delete('/', dao.delete);

router.all('*', (req, res) => {
  res.status(404).send({
    success: false,
    msg: `unknown uri ${req.path}`,
  });
});

module.exports = router;

File: ./quality-admin/routes/v1/notifications/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = async (req, res) => {
  try {
    const { page = 1, limit = 10, search, filterType } = req.query;
    const offset = (page - 1) * limit;
    

    const company_name = req.query.company_name
      ? `%${req.query.company_name}%`
      : null;
    const business_no = req.query.business_no
      ? `%${req.query.business_no}%`
      : null;
    const rep_name = req.query.rep_name ? `%${req.query.rep_name}%` : null;
    const business_type = req.query.business_type
      ? `%${req.query.business_type}%`
      : null;
    const phone_no = req.query.phone_no ? `%${req.query.phone_no}%` : null;
    const product_name = req.query.product_name
      ? `%${req.query.product_name}%`
      : null;

    
    let sql = `
      SELECT 
        n.*,
        np.product_name,
        np.expiry_date,
        u.id as user_id,
        u.company_name,
        u.business_no, 
        u.rep_name,
        u.business_type,
        u.phone_no
      FROM qcbot.tbl_notifications n
      LEFT JOIN qcbot.tbl_notification_products np ON n.noti_product_id = np.id
      LEFT JOIN qcbot.tbl_notification_users u ON n.noti_user_id = u.id
      WHERE 
      (u.company_name like ifnull(?, company_name)) and
      (u.business_no like ifnull(?, business_no)) and
      (u.rep_name like ifnull(?, rep_name)) and
      (u.business_type like ifnull(?, business_type)) and
      (u.phone_no like ifnull(?, phone_no)) and
      (np.product_name like ifnull(?, product_name))
      ;
    `;

    const queryParams = [
      company_name,
      business_no,
      rep_name,
      business_type,
      phone_no,
      product_name,
    ];

    
    const countSql = ` SELECT COUNT(*) as total
      FROM qcbot.tbl_notifications n
      LEFT JOIN qcbot.tbl_notification_products np ON n.noti_product_id = np.id
      LEFT JOIN qcbot.tbl_notification_users u ON n.noti_user_id = u.id
      WHERE 
      (u.company_name like ifnull(?, company_name)) and
      (u.business_no like ifnull(?, business_no)) and
      (u.rep_name like ifnull(?, rep_name)) and
      (u.business_type like ifnull(?, business_type)) and
      (u.phone_no like ifnull(?, phone_no)) and
      (np.product_name like ifnull(?, product_name))
      ;`;

    const [countResult, rows] = await Promise.all([
      new Promise((resolve, reject) => {
        conn.query(countSql, queryParams, (err, result) => {
          if (err) reject(err);
          resolve(result);
        });
      }),
      new Promise((resolve, reject) => {
        const paginatedSql =
          sql.replace(';', '') + ` ORDER BY n.created_at DESC LIMIT ? OFFSET ?`;
        conn.query(
          paginatedSql,
          [...queryParams, parseInt(limit), offset],
          (err, result) => {
            if (err) reject(err);
            resolve(result);
          }
        );
      }),
    ]);

    const totalCount = countResult[0].total;

    
    const response = {
      pageCount: Math.ceil(totalCount / limit),
      pageSize: parseInt(limit),
      currentPage: parseInt(page),
      datas: rows.map((row) => ({
        id: row.id,
        noti_user_id: row.user_id,
        noti_product_id: row.noti_product_id,
        noti_date: row.noti_date,
        status: row.status,
        created_at: row.created_at,
        updated_at: row.updated_at,
        product_name: row.product_name,
        expiry_date: row.expiry_date,
        company_name: row.company_name,
        business_no: row.business_no,
        rep_name: row.rep_name,
        business_type: row.business_type,
        phone_no: row.phone_no,
      })),
    };
    return res.status(200).send(response);
  } catch (error) {
    return res.status(500).send({
      success: false,
      message: 'Failed to fetch notifications',
      error: error.message,
    });
  }
};

exports.modify = (req, res) => {
  const { 
    id, 
    status, 
    noti_date,
    company_name,
    business_no,
    rep_name,
    business_type,
    phone_no,
    product_name 
  } = req.body;

  if (!id) {
    return res.status(400).send({
      success: false,
      message: 'ID is required',
    });
  }

  
  const selectSql = `
    SELECT 
      n.*,
      np.product_name,
      np.expiry_date,
      u.id as user_id,
      u.company_name,
      u.business_no, 
      u.rep_name,
      u.business_type,
      u.phone_no
    FROM qcbot.tbl_notifications n
    LEFT JOIN qcbot.tbl_notification_products np ON n.noti_product_id = np.id
    LEFT JOIN qcbot.tbl_notification_users u ON n.noti_user_id = u.id
    WHERE n.id = ?
  `;

  conn.beginTransaction(err => {
    if (err) {
      return res.status(500).send({
        success: false,
        message: 'Transaction start failed',
        error: err.message
      });
    }

    
    conn.query(selectSql, [id], (err, results) => {
      if (err) {
        return conn.rollback(() => {
          res.status(500).send({
            success: false,
            message: 'Failed to fetch current notification data',
            error: err.message
          });
        });
      }

      if (!results || results.length === 0) {
        return conn.rollback(() => {
          res.status(404).send({
            success: false,
            message: 'Notification not found'
          });
        });
      }

      const currentData = results[0];

      
      const userUpdateSql = `
        UPDATE qcbot.tbl_notification_users 
        SET 
          company_name = ?,
          business_no = ?,
          rep_name = ?,
          business_type = ?,
          phone_no = ?
        WHERE id = ?`;

      conn.query(userUpdateSql, 
        [
          company_name || currentData.company_name,
          business_no || currentData.business_no,
          rep_name || currentData.rep_name,
          business_type || currentData.business_type,
          phone_no || currentData.phone_no,
          currentData.user_id
        ], 
        (err) => {
          if (err) {
            return conn.rollback(() => {
              res.status(500).send({
                success: false,
                message: 'Failed to update user information',
                error: err.message
              });
            });
          }

          
          const productUpdateSql = `
            UPDATE qcbot.tbl_notification_products 
            SET product_name = ?
            WHERE id = ?`;

          conn.query(productUpdateSql, 
            [
              product_name || currentData.product_name,
              currentData.noti_product_id
            ], 
            (err) => {
              if (err) {
                return conn.rollback(() => {
                  res.status(500).send({
                    success: false,
                    message: 'Failed to update product information',
                    error: err.message
                  });
                });
              }

              
              const notificationUpdateSql = `
                UPDATE qcbot.tbl_notifications 
                SET 
                  noti_date = COALESCE(?, noti_date),
                  status = COALESCE(?, status)
                WHERE id = ?`;

              conn.query(notificationUpdateSql, 
                [
                  noti_date || currentData.noti_date,
                  status || currentData.status,
                  id
                ], 
                (err) => {
                  if (err) {
                    return conn.rollback(() => {
                      res.status(500).send({
                        success: false,
                        message: 'Failed to update notification',
                        error: err.message
                      });
                    });
                  }

                  conn.commit(err => {
                    if (err) {
                      return conn.rollback(() => {
                        res.status(500).send({
                          success: false,
                          message: 'Commit failed',
                          error: err.message
                        });
                      });
                    }

                    res.status(200).send({
                      success: true,
                      message: 'Update successful'
                    });
                  });
                });
            });
        });
    });
  });
};

exports.delete = (req, res) => {
  const { ids } = req.body;

  if (!Array.isArray(ids) || ids.length === 0) {
    return res.status(400).send({
      success: false,
      message: 'Valid notification IDs array is required',
    });
  }

  const sql = 'DELETE FROM qcbot.tbl_notifications WHERE id IN (?)';

  conn.query(sql, [ids], (err, result) => {
    if (err) {
      return res.status(500).send({
        success: false,
        message: 'Failed to delete notifications',
        error: err.message,
      });
    }

    return res.status(200).send({
      success: true,
      message: 'Notifications deleted successfully',
    });
  });
};

File: ./quality-admin/routes/users.js
Content:
var express = require('express');
var router = express.Router();

router.get('/', function (req, res, next) {
  res.send('respond with a resource');
});

module.exports = router;

File: ./quality-admin/routes/index.js
Content:
var express = require('express');
var router = express.Router();
const v1 = require('./v1');

router.get('/', function (req, res, next) {
  res.send({ message: 'Hello, World!' });
  next();
});

router.use('/v1', v1);

module.exports = router;

File: ./quality-admin/app.js
Content:
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

const db = require('./config/db');

var app = express();
const cors = require('cors');

const conn = db.init();
db.connect(conn);

app.set('view engine', 'ejs');  
app.set('views', './views');    

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(cors());
app.use('/', indexRouter);
app.use('/users', usersRouter);

module.exports = app;

File: ./quality-admin/src/component/Fee/FeeComponent.tsx
Content:
import { NextPage } from 'next';
import { useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';


import { FeeType } from '../../../type/feeType';

import { IoSearchOutline } from 'react-icons/io5';

import SelectCategory from '../Common/SelectCategory';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import PaginationComponent from '../Common/Pagination';
import RefreshBtn from '../Common/Buttons/RefreshBtn';
import StyledDropdown from '../Common/Dropdown/StyledDropdown';
import Numberdown from '../Common/Dropdown/Numberdown';
import handleDwn from '@/utils/downloadData';
import SortingTable from '../Common/Table/SortingTable';

interface FeeComponentProps {
  feeData: FeeType;
  inputRef: React.ForwardedRef<HTMLInputElement>;
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
  setEditModal: React.Dispatch<React.SetStateAction<boolean>>;
  optionState: string;
  setOptionState: React.Dispatch<React.SetStateAction<string>>;
  handleSearch: () => void;
  checkedItems: { [key: number]: boolean };
  selectAll: boolean;
  handleChangeItem: (
    idx: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleDelete: () => void;
}

const FeeComponent: NextPage<FeeComponentProps> = ({
  feeData,
  inputRef,
  setEditModal,
  optionState,
  setOptionState,
  handleSearch,
  checkedItems,
  selectAll,
  handleSelectAll,
  handleChangeItem,
  handleDelete,
}) => {
  
  const { datas, currentPage, pageCount, pageSize } = feeData;

  const router = useRouter();
  
  const [isOpen, setIsOpen] = useState(false);
  
  
  const tableHeader = [
    { key: 'product', label: '제품', numeric: false },
    { key: 'name', label: '검사항목', numeric: false },
    { key: 'fee', label: '수수료', numeric: false },
  ];

  
  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  
  const handleClick = async () => {
    try {
      const params = {
        ...router.query,
        page: 1,
        pageSize: pageCount,
      };

      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        {
          params,
        }
      );

      if (res.status === 200) {
        const dwnDatas = res.data.datas;
        const rows = dwnDatas.map((data: any) => {
          return {
            product: data.product,
            name: data.name,
            fee: data.fee,
          };
        });
        const type = '검사항목 및 수수료';
        handleDwn(['제품명', '검사항목', '수수료'], rows, type);
      } else {
        alert('잠시 후 다시 시도해주세요.');
      }
    } catch (error: unknown) {
      console.log(error);
      return alert('잠시 후 다시 시도해주세요.');
    }
  };

  return (
    <FeeBase>
      <H1>검사 항목 및 수수료</H1>
      <SelectCategory />
      <FaqContainer>
        <FaqBox>
          <Numberdown />
          <StyledDropdown
            title={optionState}
            options={['제품명', '검사항목', '수수료']}
            selectedOption={optionState}
            isOpen={isOpen}
            toggle={() => {
              setIsOpen(!isOpen);
            }}
            onSelectedOption={setOptionState}
          />
          <InputBox>
            <FaqLabel>
              <SearchIcon />
            </FaqLabel>
            <FaqInput ref={inputRef} onKeyDown={handleOnKeyPress} />
            <RefreshBtn />
          </InputBox>
        </FaqBox>

        <BtnBox>
          <ApplyBtn onClick={handleClick}>엑셀 다운로드</ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setEditModal(true);
            }}
          >
            수수료변경
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleDelete();
            }}
          >
            삭제
          </ApplyBtn>
        </BtnBox>
      </FaqContainer>
      <SortingTable
        headers={tableHeader}
        data={datas}
        checkedItems={checkedItems}
        handleChangeItem={handleChangeItem}
        selectAll={selectAll}
        handleSelectAll={handleSelectAll}
      />
      <PaginationComponent
        currentPage={currentPage}
        pageCount={pageCount}
        pageSize={pageSize}
      />
    </FeeBase>
  );
};

export default FeeComponent;

const FeeBase = styled.div``;
const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;

const FaqContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 16px;
`;

const FaqBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  margin-right: 12px;
`;

const Select = styled.select`
  width: 120px;
  height: 42px;
  padding: 0 12px;
  margin-right: 8px;
  border: 1px solid #ddd;
  border-radius: 5px;
  color: #757575;
  font-size: 14px;
  cursor: pointer;
`;

const Option = styled.option``;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 37px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const FaqInput = styled.input`
  width: 250px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const FaqLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const BtnBox = styled.div`
  display: flex;
`;

File: ./quality-admin/src/component/Fee/AddFee.tsx
Content:
import { useState, useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface AddFeeProps {
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const AddFee = ({ setAddModal }: AddFeeProps) => {
  const router = useRouter();
  const productRef = useRef<HTMLInputElement>(null);
  const nameRef = useRef<HTMLInputElement>(null);
  const feeRef = useRef<HTMLInputElement>(null);
  
  const handleAdd = async () => {
    let body = {
      product: productRef.current?.value,
      name: nameRef.current?.value,
      fee: Number(feeRef.current?.value),
    };

    if (Object.values(body).some(value => !value)) {
      return alert('내용을 입력해주세요');
    }

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        body
      );

      if (res.status === 200) {
        setAddModal(false);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 400) {
          alert(`${errorMessage}`);
        } else if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  };
  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사항목 및 수수료 등록</H2>
          <CloseBtn
            onClick={() => {
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>제품명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={productRef}
                      placeholder="제품명을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>검사항목</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={nameRef}
                      placeholder="검사항목을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>수수료</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      type="number"
                      ref={feeRef}
                      placeholder="수수료를 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddFee;

const AddBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 24px;
  padding: 0 3px;
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 8px 0;
    border: none;
  }
`;

const AddInput = styled.input`
  width: 100%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Fee/EditFee.tsx
Content:
import { useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface EditFeeProps {
  checkedItems: { [key: number]: boolean };
  setOpenToast: React.Dispatch<React.SetStateAction<boolean>>;
  setEditModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const EditFee = ({
  checkedItems,
  setOpenToast,
  setEditModal,
}: EditFeeProps) => {
  const router = useRouter();
  const feeRef = useRef<HTMLInputElement>(null);

  const handleModify = async () => {
    let body = {
      check: checkedItems,
      fee: feeRef?.current?.value,
    };
    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        body
      );

      if (res.status === 200) {
        setEditModal(false);
        router.replace(router.asPath);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else if (statusCode === 501) {
          setEditModal(false);
          setOpenToast(true);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };
  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사수수료 변경</H2>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>변경수수료</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      type="number"
                      placeholder="수수료를 입력해주세요"
                      ref={feeRef}
                    />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              setEditModal(false);
            }}
          >
            취소
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleModify();
            }}
          >
            변경
          </ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default EditFee;

const AddBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;


const Body = styled.div`
  margin: 16px 0 10px;
  padding: 10px 5px;
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 8px 0;
    border: none;
  }
`;

const AddInput = styled.input`
  width: 100%;
  height: 40px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  text-align: center;
  font-size: 14px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const AddSelectBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Frequency/AddFrequency.tsx
Content:
import { NextPage } from 'next';
import { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';

import { AddFrequencyType } from '../../../type/frequencyType';


interface AddFrequencyProps {
  scdOptions: string[];
  trdOptions: string[];
  productOptions: string[];
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
  getCategories: (value: string) => void;
}

const AddFrequency: NextPage<AddFrequencyProps> = ({
  scdOptions,
  trdOptions,
  productOptions,
  setAddModal,
  getCategories,
}) => {
  const router = useRouter();
  const [addState, setAddState] = useState<AddFrequencyType>({
    fst: null,
    scd: null,
    trd: null,
    product: null,
    frequency: null,
  });
  
  const handleAdd = async () => {
    if (Object.values(addState).includes('')) {
      return alert('선택하지 않은 항목이 있습니다.');
    }
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        addState
      );

      if (res.status === 200) {
        setAddModal(false);
        router.replace(router.asPath);
      }
    } catch (err) {
      console.log(err);
    }
  };

  
  const resetState = () => {
    setAddState({
      fst: '', 
      scd: '', 
      trd: '', 
      product: '', 
      frequency: '', 
    });
  };

  
  useEffect(() => {
    resetState(); 
  }, []);

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사대상 및 주기 등록</H2>
          <CloseBtn
            onClick={() => {
              resetState();
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>대분류</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          fst: e.target.value,
                          scd: '', 
                          trd: '', 
                          product: '',
                          frequency: '',
                        });
                        getCategories(e.target.value); 
                      }}
                    >
                      <Option disabled selected>
                        -- 대분류 --
                      </Option>
                      <Option>식품</Option>
                      <Option>축산물</Option>
                      <Option>기구 및 용기</Option>
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>중분류</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.scd || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          scd: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 중분류 --
                      </Option>
                      {scdOptions.map((scdOption: string) => {
                        return <Option>{scdOption}</Option>;
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>소분류</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.trd || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          trd: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 소분류 --
                      </Option>
                      {trdOptions.map((trdOption: string, idx: number) => {
                        return (
                          <Option value={trdOption} key={idx}>
                            {trdOption}
                          </Option>
                        );
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>제품</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.product || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          product: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 제품 --
                      </Option>
                      {productOptions.map(
                        (productOption: string, idx: number) => {
                          return (
                            <Option value={productOption} key={idx}>
                              {productOption}
                            </Option>
                          );
                        }
                      )}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>검사주기</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.frequency || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          frequency: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 검사주기 --
                      </Option>
                      <Option>1개월마다 1회이상</Option>
                      <Option>2개월마다 1회이상</Option>
                      <Option>3개월마다 1회이상</Option>
                      <Option>6개월마다 1회이상</Option>
                      <Option>9개월마다 1회이상</Option>
                    </Select>
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddFrequency;

const AddBase = styled.div`
  width: 490px;
  padding: 20px 18px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 24px;
  padding: 0 3px;
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    display: flex;
    justify-content: flex-end;
    border: none;
    padding: 8px 0;
  }
`;

const Select = styled.select`
  width: 370px;
  height: 36px;
  display: flex;
  align-items: center;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  cursor: pointer;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-all;
`;

const Option = styled.option``;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Frequency/FrequencyComponent.tsx
Content:
import { NextPage } from 'next';
import { useEffect, useRef, useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import handleSearch from '@/utils/handleSearch';

import { FrequencyType } from '../../../type/frequencyType';

import { IoSearchOutline } from 'react-icons/io5';

import SelectCategory from '../Common/SelectCategory';
import ApplyBtn from '../Common/Buttons/ApplyBtn';
import PaginationComponent from '../Common/Pagination';
import RefreshBtn from '../Common/Buttons/RefreshBtn';
import handleExcelDwn from '@/utils/handleDwn';
import Numberdown from '../Common/Dropdown/Numberdown';
import Dropdown from '../Common/Dropdown/Dropdown';
import handleDwn from '@/utils/downloadData';
import SortingTable from '../Common/Table/SortingTable';

interface FrequencyProps {
  frequencyData: FrequencyType;
  checkedItems: { [key: number]: boolean };
  scdOptions: string[];
  setModifyModal: React.Dispatch<React.SetStateAction<boolean>>;
  setOpenUpld: React.Dispatch<React.SetStateAction<boolean>>;
  selectAll: boolean;
  handleChangeItem: (
    idx: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleDelete: () => void;
}

const FrequencyComponent: NextPage<FrequencyProps> = ({
  handleDelete,
  checkedItems,
  frequencyData,
  scdOptions,
  setModifyModal,
  setOpenUpld,
  selectAll,
  handleSelectAll,
  handleChangeItem,
}) => {
  const router = useRouter();
  
  const { currentPage, pageCount, pageSize, datas } = frequencyData;
  
  const [isOpen, setIsOpen] = useState({
    scd: false,
  });
  const [scdOption, setScdOption] = useState('-- 중분류 --');
  
  const { handleMoveRoute } = handleSearch();
  
  const nameRef = useRef<HTMLInputElement>(null);
  
  const tableHeader = [
    { key: 'scd_category', label: '중분류', numeric: false },
    { key: 'product', label: '제품', numeric: false },
    { key: 'frequency', label: '검사주기', numeric: false },
  ];

  const handleOnKeyPress = (
    e:
      | React.KeyboardEvent<HTMLInputElement>
      | React.KeyboardEvent<HTMLSelectElement>
  ) => {
    if (e.key === 'Enter') {
      const selectedName = 'productName';
      const selectedValue = nameRef.current?.value;
      handleMoveRoute(selectedName, selectedValue);
    }
  };

  useEffect(() => {
    setScdOption('-- 중분류 --');
  }, [router.query.fst]);

  
  const handleExcel = () => {
    const column = [
      '대분류',
      '중분류',
      '제품',
      '검사항목',
      '검사금액',
      '검사주기',
      '비고',
    ];
    const rows = [
      {
        fst_category: '식품업',
        scd_category: '농산가공식품류',
        product: '찐쌀',
        name: '카드뮴',
        fee: '76700',
        frequency: '1개월마다 1회이상',
        remarks: '비고내용',
      },
      {
        fst_category: '식품업',
        scd_category: '농산가공식품류',
        product: '찐쌀',
        name: '납',
        fee: '76700',
        frequency: '1개월마다 1회이상',
        remarks: '',
      },
    ];
    const type = '검사항목 주기 및 수수료 양식';
    handleExcelDwn(column, rows, type);
  };

  
  const handleClick = async () => {
    try {
      const params = {
        ...router.query,
        page: 1,
        pageSize: pageCount,
      };

      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        {
          params,
        }
      );

      if (res.status === 200) {
        const dwnDatas = res.data.datas;
        const rows = dwnDatas.map((data: any) => {
          return {
            fst_category: data.fst_category,
            scd_category: data.scd_category,
            product: data.product,
            frequency: data.frequency,
          };
        });
        const type = '검사 대상 및 주기';
        handleDwn(['대분류', '중분류', '제품', '검사주기'], rows, type);
      } else {
        alert('잠시 후 다시 시도해주세요.');
      }
    } catch (error: unknown) {
      console.log(error);
      return alert('잠시 후 다시 시도해주세요.');
    }
  };

  return (
    <FrequencyBase>
      <H1>검사 대상 및 주기</H1>
      <SelectCategory />
      <EntityContainer>
        <FaqBox>
          <SOBox>
            <Numberdown />
            <Dropdown
              name="scd"
              title={scdOption}
              options={scdOptions}
              selectedOption={scdOption}
              isOpen={isOpen.scd}
              toggle={() => {
                setIsOpen({
                  scd: !isOpen.scd,
                });
              }}
              onSelectedOption={setScdOption}
            />
          </SOBox>
          <InputBox>
            <EntityLabel>
              <SearchIcon />
            </EntityLabel>
            <EntityInput
              placeholder="제품명"
              ref={nameRef}
              onKeyDown={handleOnKeyPress}
            />
            <RefreshBtn />
          </InputBox>
        </FaqBox>

        <BtnBox>
          <ApplyBtn onClick={handleClick}>엑셀 다운로드</ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setOpenUpld(true);
            }}
          >
            신규추가
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleDelete();
            }}
          >
            삭제
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setModifyModal(true);
            }}
          >
            주기변경
          </ApplyBtn>
          <ApplyBtn onClick={handleExcel}>양식 다운로드</ApplyBtn>
        </BtnBox>
      </EntityContainer>
      <SortingTable
        headers={tableHeader}
        data={datas}
        checkedItems={checkedItems}
        handleChangeItem={handleChangeItem}
        selectAll={selectAll}
        handleSelectAll={handleSelectAll}
      />
      <PaginationComponent
        currentPage={currentPage}
        pageCount={pageCount}
        pageSize={pageSize}
      />
    </FrequencyBase>
  );
};

export default FrequencyComponent;

const FrequencyBase = styled.div``;

const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;

const EntityContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 16px;
`;

const FaqBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  display: flex;
  align-items: center;
  margin-right: 12px;
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  width: 230px;
  height: 42px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const EntityInput = styled.input`
  width: 240px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const EntityLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const BtnBox = styled.div`
  display: flex;
`;

File: ./quality-admin/src/component/Frequency/ModifyFrequency.tsx
Content:
import { NextPage } from 'next';
import { useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import Modal from '../Common/Modal';

import { TfiClose } from 'react-icons/tfi';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface ModifyFrequencyProps {
  checkedItems: { [key: number]: boolean };
  setModifyModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const ModifyFrequency: NextPage<ModifyFrequencyProps> = ({
  checkedItems,
  setModifyModal,
}) => {
  const router = useRouter();
  const [optionState, setOptionState] = useState<string | null>('');
  const frequency = [
    '1개월마다 1회 이상',
    '2개월마다 1회 이상',
    '3개월마다 1회 이상',
    '6개월마다 1회 이상',
    '9개월마다 1회 이상',
  ];

  const handleModify = async () => {
    let body = {
      check: checkedItems,
      frequency: optionState,
    };
    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        body
      );
      if (res.status === 200) {
        router.replace(router.asPath);
        setModifyModal(false);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };

  return (
    <Modal>
      <ModifyBase>
        <Heading>
          <H2>검사주기 일괄 변경</H2>
          <CloseBtn
            onClick={() => {
              setModifyModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <SelectBox>
            <SelectH4>검사주기</SelectH4>
            <Select
              onChange={(e) => {
                setOptionState(e.target.value);
              }}
            >
              {frequency.map((fre, idx) => {
                return <Option key={idx}>{fre}</Option>;
              })}
            </Select>
          </SelectBox>
        </Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              handleModify();
            }}
          >
            저장 및 닫기
          </ApplyBtn>
        </BtnBox>
      </ModifyBase>
    </Modal>
  );
};
export default ModifyFrequency;

const ModifyBase = styled.div`
  width: 420px;
  padding: 20px 18px;
`;


const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 24px;
  padding: 0 3px;
`;

const SelectBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const SelectH4 = styled.h4``;

const Select = styled.select`
  width: 300px;
  height: 36px;
  display: flex;
  align-items: center;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  cursor: pointer;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-all;
`;

const Option = styled.option``;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 17px;
`;

File: ./quality-admin/src/component/Notification/EditNotificationModal.tsx
Content:
import React, { useState } from 'react';
import styled from 'styled-components';
import axios from 'axios';
import { useRouter } from 'next/router';
import { TfiClose } from 'react-icons/tfi';
import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';
import { toast } from 'react-toastify';

interface EditNotificationModalProps {
  notificationId: number;
  currentDate: Date;
  currentData: {
    company_name: string;
    business_no: string;
    rep_name: string;
    business_type: string;
    phone_no: string;
    product_name: string;
    expiry_date: Date;
  };
  onClose: () => void;
}

const EditNotificationModal = ({
  notificationId,
  currentDate,
  currentData,
  onClose,
}: EditNotificationModalProps) => {
  const router = useRouter();
  const [formData, setFormData] = useState({
    expiry_date: new Date(currentDate).toISOString().split('T')[0],
    company_name: currentData.company_name,
    business_no: currentData.business_no,
    rep_name: currentData.rep_name,
    business_type: currentData.business_type,
    phone_no: currentData.phone_no,
    product_name: currentData.product_name,
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async () => {
    try {
      const response = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/notifications`,
        {
          id: notificationId,
          noti_date: formData.expiry_date,
          ...formData,
        }
      );

      if (response.status === 200) {
        toast.success('정보가 성공적으로 수정되었습니다.');
        onClose();
        router.replace(router.asPath);
      }
    } catch (error) {
      console.error('Failed to update notification:', error);
      toast.error('정보 수정에 실패했습니다.');
    }
  };

  return (
    <Modal>
      <ModalBase>
        <ModalHeader>
          <Title>알림 정보 수정</Title>
          <CloseButton onClick={onClose}>
            <CloseIcon />
          </CloseButton>
        </ModalHeader>
        <ModalBody>
          <FormGroup>
            <Label>고객사명</Label>
            <Input
              name="company_name"
              value={formData.company_name}
              onChange={handleChange}
            />
          </FormGroup>
          <FormGroup>
            <Label>사업자번호</Label>
            <Input
              name="business_no"
              value={formData.business_no}
              onChange={handleChange}
            />
          </FormGroup>
          <FormGroup>
            <Label>담당자명</Label>
            <Input
              name="rep_name"
              value={formData.rep_name}
              onChange={handleChange}
            />
          </FormGroup>
          <FormGroup>
            <Label>업종</Label>
            <Input
              name="business_type"
              value={formData.business_type}
              onChange={handleChange}
            />
          </FormGroup>
          <FormGroup>
            <Label>연락처</Label>
            <Input
              name="phone_no"
              value={formData.phone_no}
              onChange={handleChange}
            />
          </FormGroup>
          <FormGroup>
            <Label>제품명</Label>
            <Input
              name="product_name"
              value={formData.product_name}
              onChange={handleChange}
            />
          </FormGroup>
          <FormGroup>
            <Label>알림일자</Label>
            <DateInput
              type="date"
              name="expiry_date"
              value={formData.expiry_date}
              onChange={handleChange}
            />
          </FormGroup>
        </ModalBody>
        <ModalFooter>
          <ApplyBtn onClick={handleSubmit}>저장</ApplyBtn>
          <ApplyBtn onClick={onClose}>취소</ApplyBtn>
        </ModalFooter>
      </ModalBase>
    </Modal>
  );
};

export default EditNotificationModal;

const ModalBase = styled.div`
  min-width: 400px;
  padding: 20px;
  background: white;
  border-radius: 8px;
`;

const ModalHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
`;

const Title = styled.h2`
  font-size: 18px;
  font-weight: 500;
`;

const CloseButton = styled.button`
  background: none;
  border: none;
  cursor: pointer;
  padding: 4px;
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
  color: #666;
`;

const ModalBody = styled.div`
  margin-bottom: 20px;
`;

const DateInput = styled.input`
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
`;

const ModalFooter = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: 8px;
`;

const FormGroup = styled.div`
  margin-bottom: 16px;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 8px;
  font-size: 14px;
  font-weight: 500;
`;

const Input = styled.input`
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
`;

File: ./quality-admin/src/component/Notification/NotificationComponent.tsx
Content:
import { NextPage } from 'next';
import { useRef, useState } from 'react';
import styled from 'styled-components';
import { NotificationProps } from '../../../type/notificationType';
import { TableBody, TableRow, TableCell, Checkbox } from '@mui/material';
import { IoSearchOutline } from 'react-icons/io5';
import CheckTable from '../Common/Table/CheckTable';
import PaginationComponent from '../Common/Pagination';
import RefreshBtn from '../Common/Buttons/RefreshBtn';
import { LuPencil } from 'react-icons/lu';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import EditNotificationModal from './EditNotificationModal';

interface NotificationComponentProps {
  notificationData: NotificationProps['notificationData'];
  inputRef: React.ForwardedRef<HTMLInputElement>;
  checkedItems: { [key: number]: boolean };
  selectAll: boolean;
  handleChangeItem: (
    idx: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleDelete: () => void;
  handleSearch: () => void;
  setOptionState: React.Dispatch<React.SetStateAction<string>>;
}

const NotificationComponent: NextPage<NotificationComponentProps> = ({
  notificationData,
  inputRef,
  checkedItems,
  selectAll,
  setOptionState,
  handleChangeItem,
  handleSelectAll,
  handleDelete,
  handleSearch,
}) => {
  const { datas, currentPage, pageCount, pageSize } = notificationData;

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedNotification, setSelectedNotification] = useState<
    {
      id: number;
      expiry_date: Date;
      company_name: string;
      business_no: string;
      rep_name: string;
      business_type: string;
      phone_no: string;
      product_name: string;
    } | null
  >(null);

  const handleEditClick = (
    id: number,
    expiry_date: string,
    company_name: string,
    business_no: string,
    rep_name: string,
    business_type: string,
    phone_no: string,
    product_name: string
  ) => {
    setSelectedNotification({
      id,
      expiry_date: new Date(expiry_date),
      company_name,
      business_no,
      rep_name,
      business_type,
      phone_no,
      product_name,
    });
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedNotification(null);
  };

  const tableHeader = [
    '고객사명',
    '사업자번호',
    '담당자명',
    '업종',
    '연락처',
    '제품명',
    '알림일자',
    '수정',
  ];

  const tableBody = datas.map((data) => (
    <TableBody key={data.id}>
      <TableRow>
        <TableCell padding="checkbox">
          <Checkbox
            color="success"
            checked={checkedItems[data.id] || false}
            onChange={handleChangeItem(data.id)}
          />
        </TableCell>
        <StyledTableCell>{data.company_name}</StyledTableCell>
        <StyledTableCell>{data.business_no}</StyledTableCell>
        <StyledTableCell>{data.rep_name}</StyledTableCell>
        <StyledTableCell>{data.business_type}</StyledTableCell>
        <StyledTableCell>{data.phone_no}</StyledTableCell>
        <StyledTableCell
          style={{
            maxWidth: '150px',
          }}
        >
          {data.product_name}
        </StyledTableCell>
        <StyledTableCell>
          {new Date(data.noti_date).toLocaleDateString('ko-KR')}
        </StyledTableCell>
        <StyledTableCell>
          <IconBtns>
            <EditBtn
              onClick={() =>
                handleEditClick(
                  data.id,
                  data.noti_date.toString(),
                  data.company_name,
                  data.business_no,
                  data.rep_name,
                  data.business_type,
                  data.phone_no,
                  data.product_name,

                )
              }
            >
              <EditIcon />
            </EditBtn>
          </IconBtns>
        </StyledTableCell>
      </TableRow>
    </TableBody>
  ));

  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <NotificationBase>
      <H1>알림 관리</H1>
      <SearchBase>
        <FaqBox>
          <SOBox>
            <Select
              onChange={(e) => {
                setOptionState(e.target.value);
              }}
            >
              {tableHeader.map((header, idx) => {
                return <Option key={idx}>{header}</Option>;
              })}
            </Select>
          </SOBox>
          <InputBox>
            <FaqLabel>
              <SearchIcon />
            </FaqLabel>
            <FaqInput ref={inputRef} onKeyDown={handleOnKeyPress} />
            <RefreshBtn />
          </InputBox>
        </FaqBox>
        <BtnBox>
          <DeleteBtn onClick={handleDelete}>삭제</DeleteBtn>
        </BtnBox>
      </SearchBase>

      <CheckTable
        tableHeader={tableHeader}
        tableBody={tableBody}
        selectAll={selectAll}
        handleSelectAll={handleSelectAll}
      />

      <PaginationComponent
        currentPage={currentPage}
        pageCount={pageCount}
        pageSize={pageSize}
      />

      {isModalOpen && selectedNotification && (
        <EditNotificationModal
          notificationId={selectedNotification.id}
          currentDate={selectedNotification.expiry_date}
          currentData={selectedNotification}
          onClose={handleCloseModal}
        />
      )}
    </NotificationBase>
  );
};

export default NotificationComponent;

const NotificationBase = styled.div``;

const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;

const SearchBase = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 16px;
`;

const FaqBox = styled.div`
  display: flex;
`;

const SOBox = styled.div`
  margin-right: 12px;
`;

const Select = styled.select`
  width: 120px;
  height: 42px;
  padding: 0 12px;
  margin-right: 8px;
  border: 1px solid #ddd;
  border-radius: 5px;
  color: #757575;
  font-size: 14px;
  cursor: pointer;
`;

const Option = styled.option``;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const FaqInput = styled.input`
  width: 250px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const FaqLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const BtnBox = styled.div`
  display: flex;
`;

const DeleteBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  margin-right: 8px;
  border-radius: 6px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
  &:last-child {
    margin-right: 0;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;

const IconBtns = styled.div`
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
`;

const EditBtn = styled.button`
  background-color: transparent;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  color: ${(props) => props.theme.primary_01};
  font-size: 20px;
  &:hover {
    background-color: #f5faf7;
  }
`;

const EditIcon = styled(LuPencil)``;

File: ./quality-admin/src/component/FAQ/AddFaq.tsx
Content:
import { useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface AddFaqProps {
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const AddFaq = ({ setAddModal }: AddFaqProps) => {
  const router = useRouter();
  const questionRef = useRef<HTMLTextAreaElement>(null);
  const answerRef = useRef<HTMLTextAreaElement>(null);
  const tagRef = useRef<HTMLTextAreaElement>(null);

  const handleAdd = useCallback(async () => {
    let body = {
      question: questionRef?.current?.value,
      answer: answerRef?.current?.value,
      tag: tagRef?.current?.value,
    };

    if (Object.values(body).some(value => !value)) {
      return alert('내용을 입력해주세요');
    }

    
    const specialCharPattern = /[!@#$%^&*(),.?":{}|<>]/;

    
    if (specialCharPattern.test(tagRef?.current!.value)) {
      return alert('특수문자는 사용할 수 없습니다.');
    }

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`,
        body
      );
      if (res.status === 200) {
        console.log(res);
        setAddModal(false);
      }
    } catch (err) {
      console.log(err);
    } finally {
      router.replace(router.asPath);
    }
  }, [questionRef, answerRef, tagRef]);

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>자주묻는질문 등록</H2>
          <CloseBtn
            onClick={() => {
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <Menu>
            <Item>
              <Label>질문</Label>
              <AddMemo placeholder="질문을 작성해주세요" ref={questionRef} />
            </Item>
            <Item>
              <Label>답변</Label>
              <AddMemo placeholder="답변을 작성해주세요" ref={answerRef} />
            </Item>
            <Item>
              <Label>태그</Label>
              <TagMemo
                placeholder="식품업,축산업,자가품질검사,키워드"
                ref={tagRef}
              />
            </Item>
          </Menu>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddFaq;

const AddBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 16px;
`;

const Menu = styled.ul``;

const Item = styled.li`
  padding: 10px 0;
  &:first-child {
    
  }
`;

const Label = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 120px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;

const TagMemo = styled(AddMemo)`
  height: 80px;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/FAQ/DeleteFaq.tsx
Content:
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import { ModalFaqType } from '../../../type/faqType';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface DeleteFaqProps {
  deleteModal: Partial<ModalFaqType>;
  setDeleteModal: React.Dispatch<React.SetStateAction<Partial<ModalFaqType>>>;
}

const DeleteFaq = ({ deleteModal, setDeleteModal }: DeleteFaqProps) => {
  const router = useRouter();
  const handleDelete = async () => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`,
        {
          params: {
            id: deleteModal.id,
          },
        }
      );
      if (res.status === 200) {
        setDeleteModal({
          ...deleteModal,
          modal: false,
        });
      }
    } catch (err) {
      console.log(err);
    } finally {
      router.replace(router.asPath);
    }
  };
  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>삭제하시겠어요?</H2>
          <CloseBtn
            onClick={() => {
              setDeleteModal({
                ...deleteModal,
                modal: false,
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>{deleteModal.question}</Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              setDeleteModal({
                ...deleteModal,
                modal: false,
              });
            }}
          >
            취소
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleDelete();
            }}
          >
            삭제
          </ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default DeleteFaq;

const AddBase = styled.div`
  width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;

const Body = styled.div`
  background-color: #f5faf7;
  margin: 24px 0 20px;
  padding: 24px 12px;
  color: #20bb59;
  border-radius: 5px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-all;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/FAQ/ModifyFaq.tsx
Content:
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import { ModalFaqType } from '../../../type/faqType';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface ModifyFaqProps {
  modifyModal: ModalFaqType;
  setModifyModal: React.Dispatch<React.SetStateAction<ModalFaqType>>;
}

const ModifyFaq = ({ modifyModal, setModifyModal }: ModifyFaqProps) => {
  const router = useRouter();
  const handleModify = async () => {
    let body = {
      id: modifyModal.id,
      question: modifyModal.question,
      answer: modifyModal.answer,
      tag: modifyModal.tag,
    };

    
    const specialCharPattern = /[!@#$%^&*(),.?":{}|<>]/;

    
    if (specialCharPattern.test(modifyModal.tag)) {
      return alert('특수문자는 사용할 수 없습니다.');
    }

    if (Object.values(body).some(value => !value)) {
      return alert('내용을 입력해주세요');
    }

    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`,
        body
      );
      if (res.status === 200) {
        setModifyModal({
          ...modifyModal,
          modal: false,
        });
      }
    } catch (err) {
      console.log(err);
    } finally {
      router.replace(router.asPath);
    }
  };

  return (
    <Modal>
      <ModifyBase>
        <Heading>
          <H2>자주묻는질문 등록</H2>
          <CloseBtn
            onClick={() => {
              setModifyModal({
                ...modifyModal,
                modal: false,
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <Menu>
            <Item>
              <Label>질문</Label>
              <AddMemo
                placeholder="질문을 작성해주세요"
                value={modifyModal.question ?? ''}
                onChange={(e) =>
                  setModifyModal({
                    ...modifyModal,
                    question: e.target.value,
                  })
                }
              />
            </Item>
            <Item>
              <Label>답변</Label>
              <AddMemo
                placeholder="답변을 작성해주세요"
                value={modifyModal.answer ?? ''}
                onChange={(e) =>
                  setModifyModal({
                    ...modifyModal,
                    answer: e.target.value,
                  })
                }
              />
            </Item>
            <Item>
              <Label>태그</Label>
              <TagMemo
                placeholder="#식품업 #축산업 #자가품질검사 #키워드"
                value={modifyModal.tag ?? ''}
                onChange={(e) =>
                  setModifyModal({
                    ...modifyModal,
                    tag: e.target.value,
                  })
                }
              />
            </Item>
          </Menu>
        </Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              handleModify();
            }}
          >
            저장 및 닫기
          </ApplyBtn>
        </BtnBox>
      </ModifyBase>
    </Modal>
  );
};

export default ModifyFaq;

const ModifyBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 16px;
`;

const Menu = styled.ul``;

const Item = styled.li`
  padding: 10px 0;
  &:first-child {
    
  }
`;

const Label = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 120px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;

const TagMemo = styled(AddMemo)`
  height: 80px;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/FAQ/FaqComponent.tsx
Content:
import { NextPage } from 'next';
import React, { useState } from 'react';
import styled from 'styled-components';

import { FaqType, ModalFaqType } from '../../../type/faqType';

import { IoSearchOutline, IoTrashOutline } from 'react-icons/io5';
import { LuPencil } from 'react-icons/lu';

import RefreshBtn from '../Common/Buttons/RefreshBtn';

interface FaqComponentProps {
  faqData: FaqType[];
  emailRef: React.RefObject<HTMLInputElement>;
  handleOnkey: () => void;
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
  setDeleteModal: React.Dispatch<React.SetStateAction<Partial<ModalFaqType>>>;
  setModifyModal: React.Dispatch<React.SetStateAction<ModalFaqType>>;
}

const FaqComponent: NextPage<FaqComponentProps> = ({
  faqData,
  emailRef,
  handleOnkey,
  setAddModal,
  setDeleteModal,
  setModifyModal,
}) => {
  
  const [openListId, setOpenListId] = useState<Array<number>>([]);
  
  const uniqueFaqData = Array.from(
    new Map(faqData.map((item) => [item.question, item])).values()
  );
  
  const handleAccordion = (id: number) => {
    if (openListId.includes(id)) {
      
      setOpenListId(openListId.filter((prevId) => prevId !== id));
    } else {
      
      setOpenListId([...openListId, id]);
    }
  };

  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleOnkey();
    }
  };

  return (
    <FaqBase>
      <H1>자주 묻는 질문</H1>
      <FaqContainer>
        <InputBox>
          <FaqLabel>
            <SearchIcon />
          </FaqLabel>
          <FaqInput
            placeholder="키워드를 입력하여 검색해주세요"
            ref={emailRef}
            onKeyDown={handleOnKeyPress}
          />
          <RefreshBtn />
        </InputBox>
        <AddBtn
          onClick={() => {
            setAddModal(true);
          }}
        >
          신규추가
        </AddBtn>
      </FaqContainer>
      <FAQMenu>
        {uniqueFaqData.length === 0 && (
          <NoneItem>
            <NoneIcon>🗒️</NoneIcon>
            <NoneP>검색결과가 없습니다</NoneP>
          </NoneItem>
        )}
        {uniqueFaqData.map((data) => {
          return (
            <FAQItem key={data.id}>
              <QuestionContent isopen={openListId.includes(data.id)}>
                <Question
                  onClick={() => {
                    handleAccordion(data.id);
                  }}
                  isopen={openListId.includes(data.id)}
                >
                  <QuestionP>{data.question}</QuestionP>
                </Question>
                <IconBtns>
                  <DeleteBtn
                    onClick={() => {
                      setDeleteModal({
                        id: data.id,
                        question: data.question,
                        modal: true,
                      });
                    }}
                  >
                    <DeleteIcon />
                  </DeleteBtn>
                  <EditBtn
                    onClick={() => {
                      setModifyModal({
                        id: data.id,
                        question: data.question,
                        answer: data.answer,
                        tag: data.keyword,
                        modal: true,
                      });
                    }}
                  >
                    <EditIcon />
                  </EditBtn>
                </IconBtns>
              </QuestionContent>
              {openListId.includes(data.id) && <Answer>{data.answer}</Answer>}
            </FAQItem>
          );
        })}
      </FAQMenu>
    </FaqBase>
  );
};

export default FaqComponent;

const FaqBase = styled.div``;

const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;

const FaqContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 16px;
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  border: 1px solid #c8c8c8;
  border-radius: 5px;
`;

const FaqInput = styled.input`
  width: 230px;
  height: 100%;
  margin-left: 8px;
  border: none;
`;

const FaqLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const AddBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  border-radius: 7px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);

  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
`;


const FAQMenu = styled.ul`
  margin-top: 12px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 12px;
`;

const NoneItem = styled.li`
  width: 100%;
  min-height: 520px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  color: ${(props) => props.theme.gray_07};
`;

const NoneIcon = styled.i`
  font-size: 22px;
`;

const NoneP = styled.p`
  font-size: 16px;
  margin-top: 12px;
`;

const FAQItem = styled.li`
  line-height: 1.5;
  border-bottom: 1px solid ${(props) => props.theme.gray_03};
  &:first-child {
    border-radius: 12px 12px 0 0;
  }
  &:last-child {
    border-radius: 0 0 12px 12px;
    border-bottom: none;
  }
`;

const QuestionContent = styled.div<{ isopen: boolean }>`
  background-color: ${(props) => (props.isopen ? '#effcf3' : 'transparent')};
  display: flex;
  align-items: center;
`;

const Question = styled.div<{ isopen: boolean }>`
  position: relative;
  width: 90%;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 16px 24px;
  cursor: pointer;
  font-weight: 500;
  color: ${(props) => (props.isopen ? '#0e4f26' : '2b2d3b')};
  &:after {
    content: '';
    position: absolute;
    top: ${(props) => (props.isopen ? '24px' : '20px')};
    right: 20px;
    width: 8px;
    height: 8px;
    border: 1px solid #555;
    border-left: 0;
    border-top: 0;
    transform: ${(props) =>
      props.isopen ? 'rotate(-135deg)' : 'rotate(-315deg)'};
  }
`;

const QuestionP = styled.p`
  width: 95%;
  font-weight: 700;
`;


const IconBtns = styled.div`
  width: 10%;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 0 12px;
`;

const DeleteBtn = styled.button`
  background-color: transparent;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  color: ${(props) => props.theme.primary_01};
  font-size: 20px;
  &:hover {
    background-color: #f5faf7;
  }
`;

const EditBtn = styled(DeleteBtn)`
  margin-left: 8px;
`;

const DeleteIcon = styled(IoTrashOutline)``;

const EditIcon = styled(LuPencil)``;

const Answer = styled.div`
  
  padding: 16px 24px;
  color: #757575;
  &:last-child {
    border-radius: 0 0 12px 12px;
  }
`;

File: ./quality-admin/src/component/Institute/InstituteComponent.tsx
Content:
import { NextPage } from 'next';
import { useState, useCallback, useRef } from 'react';
import styled from 'styled-components';
import axios from 'axios';

import { useRouter } from 'next/router';

import { InstituteType, ModalInstituteType } from '../../../type/instituteType';

import { TableBody, TableRow, TableCell } from '@mui/material';

import { IoSearchOutline, IoTrashOutline } from 'react-icons/io5';
import { LuPencil } from 'react-icons/lu';


import CommonTable from '../Common/Table/CommonTable';
import AddInstitute from './AddInstitute';
import ApplyBtn from '../Common/Buttons/ApplyBtn';
import PaginationComponent from '../Common/Pagination';
import RefreshBtn from '../Common/Buttons/RefreshBtn';
import ModifyInstitute from './ModifyInstitute';
import handleExcelDwn from '@/utils/handleDwn';
import Numberdown from '../Common/Dropdown/Numberdown';
import Dropdown from '../Common/Dropdown/Dropdown';
import handleDwn from '@/utils/downloadData';

interface InstituteComponentProps {
  instituteData: InstituteType;
  setOpenUpld: React.Dispatch<React.SetStateAction<boolean>>;
}

const InstituteComponent: NextPage<InstituteComponentProps> = ({
  instituteData,
  setOpenUpld,
}) => {
  const router = useRouter();
  const inputRef = useRef<HTMLInputElement>(null);
  const { datas, currentPage, pageCount, pageSize, categories } = instituteData;
  const [isOpen, setIsOpen] = useState({
    fst: false,
    scd: false,
    trd: false,
  });
  const [fstOption, setFstOption] = useState('검사분야');
  const [scdOption, setScdOption] = useState('-- 도/시 --');
  const [trdOption, setTrdOption] = useState('-- 시/군/구 --');

  const [addModal, setAddModal] = useState<boolean>(false);
  const [modifyModal, setModifyModal] = useState<ModalInstituteType>({
    modal: false,
    data: {
      id: null,
      category: null,
      director: null,
      district: null,
      region: null,
      expiration: null,
      fax: null,
      location: null,
      name: null,
      phone: null,
      remarks: null,
    },
  });

  
  const categoryOptions = categories
    .filter((item) => item.type === 'category')
    .map((item) => item.value);
  
  const regionOptions = categories
    .filter((item) => item.type === 'region')
    .map((item) => item.value);
  
  const districtOptions = categories
    .filter((item) => item.type === 'district')
    .map((item) => item.value);

  const tableHeader: string[] = [
    '검사분야',
    '검사기관',
    '도/시',
    '시/군/구',
    '연락처',
    '팩스',
    '삭제',
    '수정',
  ];

  const handleDelete = async (id: number) => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        {
          params: {
            id: id,
          },
        }
      );
      if (res.status === 200) {
        router.replace(router.asPath);
      }
    } catch (err) {
      console.log(err);
    }
  };

  console.log(datas);
  const tableBody = datas.map((data, idx) => {
    return (
      <TableBody key={data.id}>
        <StyledTableRow iseven={idx % 2 === 0}>
          <StyledTableCell>{data.category}</StyledTableCell>
          <StyledTableCell>{data.name}</StyledTableCell>
          <StyledTableCell>{data.region}</StyledTableCell>
          <StyledTableCell>{data.district}</StyledTableCell>
          <StyledTableCell>{data.phone}</StyledTableCell>
          <StyledTableCell>{data.fax}</StyledTableCell>
          <StyledTableCell>
            <IconBtns>
              <DeleteBtn
                onClick={() => {
                  handleDelete(data.id);
                }}
              >
                <DeleteIcon />
              </DeleteBtn>
            </IconBtns>
          </StyledTableCell>
          <StyledTableCell>
            <IconBtns>
              <EditBtn
                onClick={() => {
                  setModifyModal({
                    data: data,
                    modal: true,
                  });
                }}
              >
                <EditIcon />
              </EditBtn>
            </IconBtns>
          </StyledTableCell>
        </StyledTableRow>
      </TableBody>
    );
  });

  
  const handleOnkey = useCallback(() => {
    router.push({
      pathname: router.pathname,
      query: {
        ...router.query, 
        nameCheck: inputRef.current?.value, 
      },
    });
  }, [router]);

  
  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleOnkey();
    }
  };

  
  const handleClick = async () => {
    try {
      const params = {
        ...router.query,
        page: 1,
        pageSize: pageCount,
      };

      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        {
          params,
        }
      );

      if (res.status === 200) {
        const dwnDatas = res.data.datas;
        const rows = dwnDatas.map((data: any) => {
          return {
            category: data.category,
            name: data.name,
            director: data.director,
            location: data.location,
            region: data.region,
            district: data.district,
            phone: data.phone,
            fax: data.fax,
            remarks: data.remarks,
            expiration: data.expiration,
          };
        });
        const type = '검사기관';
        handleDwn(
          [
            '검사분야',
            '검사기관',
            '대표자명',
            '상세주소',
            '도/시',
            '시/군/구',
            '연락처',
            '팩스',
            '비고',
            '유효기간',
          ],
          rows,
          type
        );
      } else {
        alert('잠시 후 다시 시도해주세요.');
      }
    } catch (error: unknown) {
      console.log(error);
      return alert('잠시 후 다시 시도해주세요.');
    }
  };
  return (
    <InstituteBase>
      <H1>검사기관</H1>
      <SearchBase>
        <FaqBox>
          <SOBox>
            <Numberdown />
            <Dropdown
              name="fst"
              title={fstOption}
              options={categoryOptions}
              selectedOption={fstOption}
              isOpen={isOpen.fst}
              toggle={() => {
                setIsOpen({
                  fst: !isOpen.fst,
                  scd: false,
                  trd: false,
                });
              }}
              onSelectedOption={setFstOption}
            />
            <Dropdown
              name="regionValue"
              title={scdOption}
              options={regionOptions}
              selectedOption={scdOption}
              isOpen={isOpen.scd}
              toggle={() => {
                setIsOpen({
                  fst: false,
                  scd: !isOpen.scd,
                  trd: false,
                });
              }}
              onSelectedOption={setScdOption}
            />
            <Dropdown
              name="districtValue"
              title={trdOption}
              options={districtOptions}
              selectedOption={trdOption}
              isOpen={isOpen.trd}
              toggle={() => {
                setIsOpen({
                  fst: false,
                  scd: false,
                  trd: !isOpen.trd,
                });
              }}
              onSelectedOption={setTrdOption}
            />
          </SOBox>
          <InputBox>
            <EntityLabel>
              <SearchIcon />
            </EntityLabel>
            <EntityInput
              ref={inputRef}
              placeholder="기관명 검색"
              onKeyDown={handleOnKeyPress}
            />
            <RefreshBtn />
          </InputBox>
        </FaqBox>

        <BtnBox>
          <ApplyBtn onClick={handleClick}>엑셀 다운로드</ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setOpenUpld(true);
            }}
          >
            엑셀 등록 및 업데이트
          </ApplyBtn>
        </BtnBox>
      </SearchBase>
      <CommonTable tableHeader={tableHeader} tableBody={tableBody} />
      <PaginationComponent
        pageCount={pageCount}
        currentPage={currentPage}
        pageSize={pageSize}
      />
      {addModal && (
        <AddInstitute
          categoryOptions={categoryOptions}
          regionOptions={regionOptions}
          districtOptions={districtOptions}
          setAddModal={setAddModal}
        />
      )}
      {modifyModal.modal && (
        <ModifyInstitute
          categoryOptions={categoryOptions}
          regionOptions={regionOptions}
          districtOptions={districtOptions}
          modifyModal={modifyModal}
          setModifyModal={setModifyModal}
        />
      )}
    </InstituteBase>
  );
};

export default InstituteComponent;

const InstituteBase = styled.div``;
const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;


const SearchBase = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 24px;
`;
const FaqBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  display: flex;
  align-items: center;
  margin-right: 12px;
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const EntityInput = styled.input`
  width: 200px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const EntityLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;


const StyledTableRow = styled(TableRow)<{ iseven: boolean }>`
  background-color: ${(props) =>
    props.iseven ? 'transparent' : 'rgba(168, 181, 209, 0.05)'};
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;



const IconBtns = styled.div`
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
`;
const DeleteBtn = styled.button`
  background-color: transparent;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  color: ${(props) => props.theme.primary_01};
  font-size: 20px;
  &:hover {
    background-color: #f5faf7;
  }
`;

const EditBtn = styled(DeleteBtn)`
  margin-left: 8px;
`;

const DeleteIcon = styled(IoTrashOutline)``;

const EditIcon = styled(LuPencil)``;

File: ./quality-admin/src/component/Institute/ModifyInstitute.tsx
Content:
import { useRouter } from 'next/router';
import { useRef, useState, useCallback } from 'react';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import { ModalInstituteType } from '../../../type/instituteType';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface DeleteInstituteProps {
  categoryOptions: string[];
  regionOptions: string[];
  districtOptions: string[];
  modifyModal: ModalInstituteType;
  setModifyModal: React.Dispatch<React.SetStateAction<ModalInstituteType>>;
}

const ModifyInstitute = ({
  categoryOptions,
  regionOptions,
  districtOptions,
  modifyModal,
  setModifyModal,
}: DeleteInstituteProps) => {
  const router = useRouter();

  const nameRef = useRef<HTMLInputElement>(null);
  const directorRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);
  const faxRef = useRef<HTMLInputElement>(null);
  const expirationRef = useRef<HTMLInputElement>(null);
  const remarkRef = useRef<HTMLTextAreaElement>(null);

  const [options, setOptions] = useState({
    category: modifyModal.data.category,
    region: modifyModal.data.region,
    district: modifyModal.data.district,
  });

  const handleSelect = useCallback(
    (key: string, value: string) => {
      setOptions({
        ...options,
        [key]: value,
      });
    },
    [options]
  );

  console.log(options);
  
  const handleModify = useCallback(async () => {
    let body = {
      id: modifyModal.data.id,
      name: nameRef.current?.value,
      director: directorRef.current?.value,
      phone: phoneRef.current?.value,
      fax: faxRef.current?.value,
      expiration: expirationRef.current?.value,
      remark: remarkRef.current?.value,
      category: options.category,
      region: options.region,
      district: options.district,
    };

    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        body
      );

      if (res.status === 200) {
        setModifyModal({
          modal: false,
          data: {
            id: null,
            category: null,
            director: null,
            district: null,
            region: null,
            expiration: null,
            fax: null,
            location: null,
            name: null,
            phone: null,
            remarks: null,
          },
        });
      }
    } catch (err) {
      console.log(err);
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  }, [
    nameRef,
    directorRef,
    phoneRef,
    faxRef,
    expirationRef,
    remarkRef,
    options,
  ]);

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사항목 및 수수료 등록</H2>
          <CloseBtn
            onClick={() => {
              setModifyModal({
                data: {
                  id: null,
                  category: null,
                  director: null,
                  district: null,
                  region: null,
                  expiration: null,
                  fax: null,
                  location: null,
                  name: null,
                  phone: null,
                  remarks: null,
                },
                modal: false,
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>검사분야</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      name="category"
                      onChange={(e) => {
                        const selectedName = e.target.name;
                        const selectedValue = e.target.value;
                        handleSelect(selectedName, selectedValue);
                      }}
                    >
                      <Option defaultValue={modifyModal.data.category ?? ''}>
                        {modifyModal.data.category}
                      </Option>
                      {categoryOptions.map((option, idx) => {
                        return <Option key={idx}>{option}</Option>;
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={nameRef}
                      defaultValue={modifyModal.data.name ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>대표자명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={directorRef}
                      defaultValue={modifyModal.data.director ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관소재지</StyledLabelCell>
                  <StyledTableCell>
                    <AddSelectBox>
                      <Select
                        name="region"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option defaultValue={modifyModal.data.region ?? ''}>
                          {modifyModal.data.region}
                        </Option>
                        {regionOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                      </Select>
                      <Select
                        name="district"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option defaultValue={modifyModal.data.district ?? ''}>
                          {modifyModal.data.district}
                        </Option>
                        {districtOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                        <Option>기타지역</Option>
                      </Select>
                    </AddSelectBox>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>전화</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={phoneRef}
                      defaultValue={modifyModal.data.phone ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>팩스</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={faxRef}
                      defaultValue={modifyModal.data.fax ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>유효기간</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={expirationRef}
                      defaultValue={modifyModal.data.expiration ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>비고</StyledLabelCell>
                  <StyledTableCell>
                    <AddMemo
                      defaultValue={modifyModal.data.remarks ?? ''}
                      ref={remarkRef}
                    />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleModify}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default ModifyInstitute;

const AddBase = styled.div`
  min-width: 440px;
  padding: 24px 16px;
`;


const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 28px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 80px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 8px 0;
    border: none;
  }
`;

const Select = styled.select`
  width: 48%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  color: #96a0b5;
  margin-right: 12px;
  &:last-child {
    margin: 0 0;
  }
`;

const Option = styled.option``;

const AddInput = styled.input`
  width: 100%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const AddSelectBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Institute/AddInstitute.tsx
Content:
import { useRef, useState } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface AddEntityProps {
  categoryOptions: string[];
  regionOptions: string[];
  districtOptions: string[];
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const AddInstitute = ({
  categoryOptions,
  regionOptions,
  districtOptions,
  setAddModal,
}: AddEntityProps) => {
  const router = useRouter();
  const nameRef = useRef<HTMLInputElement>(null);
  const directorRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);
  const faxRef = useRef<HTMLInputElement>(null);
  const expirationRef = useRef<HTMLInputElement>(null);
  const remarkRef = useRef<HTMLTextAreaElement>(null);

  const [options, setOptions] = useState({
    category: '',
    region: '',
    district: '',
  });

  
  const handleAdd = async () => {
    let body = {
      name: nameRef.current?.value,
      director: directorRef.current?.value,
      phone: phoneRef.current?.value,
      fax: faxRef.current?.value,
      expiration: expirationRef.current?.value,
      remark: remarkRef.current?.value,
      category: options.category,
      region: options.region,
      district: options.district,
    };

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        body
      );
      console.log(res);

      if (res.status === 200) {
        setAddModal(false);
        router.replace(router.asPath);
      }
    } catch (err) {
      console.log(err);
    }
  };

  const handleSelect = (key: string, value: string) => {
    setOptions({
      ...options,
      [key]: value,
    });
  };

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사항목 및 수수료 등록</H2>
          <CloseBtn
            onClick={() => {
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>검사분야</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      name="category"
                      onChange={(e) => {
                        const selectedName = e.target.name;
                        const selectedValue = e.target.value;
                        handleSelect(selectedName, selectedValue);
                      }}
                    >
                      <Option disabled selected>
                        -- 검사분야 ---
                      </Option>
                      {categoryOptions.map((option, idx) => {
                        return <Option key={idx}>{option}</Option>;
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={nameRef}
                      placeholder="기관명을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>대표자명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={directorRef}
                      placeholder="대표자명을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관소재지</StyledLabelCell>
                  <StyledTableCell>
                    <AddSelectBox>
                      <Select
                        name="region"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option disabled selected>
                          -- 도/시 ---
                        </Option>
                        {regionOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                      </Select>
                      <Select
                        name="district"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option disabled selected>
                          -- 시/군/구 ---
                        </Option>
                        {districtOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                        <Option>기타지역</Option>
                      </Select>
                    </AddSelectBox>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>전화</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={phoneRef}
                      placeholder="전화번호를 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>팩스</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={faxRef}
                      placeholder="팩스번호를 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>유효기간</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={expirationRef}
                      placeholder="유효기간을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>비고</StyledLabelCell>
                  <StyledTableCell>
                    <AddMemo ref={remarkRef} />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddInstitute;

const AddBase = styled.div`
  min-width: 440px;
  padding: 24px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 28px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 80px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 8px 0;
    border: none;
  }
`;

const Select = styled.select`
  width: 48%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  color: #96a0b5;
  margin-right: 12px;
  &:last-child {
    margin: 0 0;
  }
`;

const Option = styled.option``;

const AddInput = styled.input`
  width: 100%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const AddSelectBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Layout/Layout.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import Sidebar from './Sidebar';
import { useRouter } from 'next/router';

type LayoutProps = {
  children: React.ReactNode;
};

const Layout: NextPage<LayoutProps> = ({ children }: LayoutProps) => {
  const router = useRouter();

  if (router.pathname === '/signin') {
    return <LayoutBase>{children}</LayoutBase>;
  }
  return (
    <LayoutBase>
      <Sidebar />
      <Main>{children}</Main>
    </LayoutBase>
  );
};

export default Layout;

const LayoutBase = styled.div`
  height: calc(var(--vh, 1vh) * 100);
  display: flex;
`;

const Main = styled.main`
  width: calc(var(--vw, 1vw) * 100 - 270px);
  padding: 16px;
`;

File: ./quality-admin/src/component/Layout/Sidebar.tsx
Content:
import { NextPage } from 'next';
import { useEffect, useState } from 'react';
import styled from 'styled-components';

import { useRouter } from 'next/router';
import Link from 'next/link';

import { TbUsers, TbSettings, TbBell } from 'react-icons/tb';

const Sidebar: NextPage = () => {
  const [openList, setOpenList] = useState<number>(1);
  const router = useRouter();

  useEffect(() => {
    if (router.pathname.includes('/users')) {
      setOpenList(1);
    } else if (router.pathname.includes('/chatbot')) {
      setOpenList(2);
    } else if (router.pathname.includes('/notifications')) {
      setOpenList(3);
    }
  }, [router.pathname]);

  return (
    <SideBase>
      <LogoBox>
        <Logo src="/images/logo.png" alt="파킹프렌즈 로고" />
      </LogoBox>
      <MainMenu>
        <MainList>
          <ListItem
            islocation={openList === 1}
            onClick={() => {
              window.location.href = '/users';
            }}
          >
            <UserIcon />
            <ItemLabel>이용자 관리</ItemLabel>
          </ListItem>
        </MainList>
        <MainList>
          <ListItem
            islocation={openList === 2}
            onClick={() => {
                    window.location.href = '/chatbot/faq';
		    setOpenList(2);
	    }}
	    >
            <SettingIcon />
            <ItemLabel>챗봇 데이터 설정</ItemLabel>
          </ListItem>
          <ToggleItemBox isVisible={openList === 2}>
            <ToggleMenu>
              <ToggleItem isPath={router.route === '/chatbot/faq'}>
                <StyledLink href="/chatbot/faq">자주 묻는 질문</StyledLink>
              </ToggleItem>
              <ToggleItem isPath={router.route === '/chatbot/frequency'}>
                <StyledLink href="/chatbot/frequency">
                  검사 대상 및 주기
                </StyledLink>
              </ToggleItem>
              <ToggleItem isPath={router.route === '/chatbot/fee'}>
                <StyledLink href="/chatbot/fee">검사 항목 및 수수료</StyledLink>
              </ToggleItem>
              <ToggleItem isPath={router.route === '/chatbot/institute'}>
                <StyledLink href="/chatbot/institute">검사 기관</StyledLink>
              </ToggleItem>
            </ToggleMenu>
          </ToggleItemBox>
        </MainList>
        <MainList>
          <ListItem
            islocation={openList === 3}
            onClick={() => {
              window.location.href = '/notifications';
              setOpenList(3);
            }}
          >
            <BellIcon />
            <ItemLabel>알림 관리</ItemLabel>
          </ListItem>
        </MainList>
      </MainMenu>
    </SideBase>
  );
};

export default Sidebar;

const SideBase = styled.aside`
  background-color: #fff;
  position: relative;
  width: 270px;
  padding: 0 16px 16px;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
`;

const LogoBox = styled.div`
  height: 140px;
  display: flex;
  align-items: center;
`;

const Logo = styled.img`
  width: 80%;
  display: block;
  object-fit: cover;
  margin: 0 auto;
`;

const ItemLabel = styled.span`
  margin-left: 22px;
`;

const MainMenu = styled.ul``;

const MainList = styled.li``;

const ListItem = styled.div<{ islocation: boolean }>`
  background-color: ${(props) =>
    props.islocation ? '#f4fdf8' : 'transparent'};
  position: relative;
  display: flex;
  align-items: center;
  padding: 12px 16px;
  margin-bottom: 8px;
  font-weight: 500;
  line-height: 1.8;
  border-radius: 10px;
  cursor: pointer;

  ${ItemLabel} {
    color: ${(props) => (props.islocation ? '#22c55e' : '#2b2d3b')};
  }
  &:before {
    content: '';
    background-color: ${(props) => props.theme.primary_01};
    display: ${(props) => (props.islocation ? 'block' : 'none')};
    position: absolute;
    top: 0;
    bottom: 0;
    left: -12px;
    border-radius: 5px;
    border: 3px solid ${(props) => props.theme.primary_01};
  }
  &:after {
    content: '';
    position: absolute;
    right: 16px;
    width: 6px;
    height: 6px;
    border: 1px solid ${(props) => (props.islocation ? '#22c55e' : '#2b2d3b')};
    border-left: 0;
    border-top: 0;
    transform: rotate(315deg);
  }
  &:hover {
    &:before {
      display: block;
    }
    &:after {
      border: 1px solid ${(props) => props.theme.primary_01};
      border-left: 0;
      border-top: 0;
    }
    ${ItemLabel} {
      color: ${(props) => props.theme.primary_01};
      transition:
        color 0.15s ease-in-out,
        background-color 0.15s ease-in-out,
        border-color 0.15s ease-in-out;
    }
  }
`;

const ToggleItemBox = styled.div<{ isVisible: boolean }>`
  display: ${(props) => (props.isVisible ? 'block' : 'none')};
  padding: 0 12px;
`;

const ToggleMenu = styled.ul`
  font-size: 14px;
`;

const ToggleItem = styled.li<{ isPath: boolean }>`
  position: relative;
  display: flex;
  align-items: center;
  margin-bottom: 8px;
  font-weight: 500;
  color: ${(props) => (props.isPath ? '#22c55e' : '#2b2d3b')};
  cursor: pointer;
  &:before {
    content: '';
    background-color: ${(props) => (props.isPath ? '#22c55e' : '#95a0c5')};
    position: absolute;
    left: 10px;
    width: 4px;
    height: 4px;
    border-radius: 50%;
  }
  &:hover {
    color: ${(props) => props.theme.primary_01};
    &:before {
      background-color: ${(props) => props.theme.primary_01};
    }
  }
  &:first-child {
    margin-top: 12px;
  }
`;

const StyledLink = styled(Link)`
  width: 210px;
  height: 36px;
  display: flex;
  align-items: center;
  padding-left: 42px;
`;


const UserIcon = styled(TbUsers)`
  color: ${(props) => props.theme.gray_06};
  font-size: 22px;
`;

const SettingIcon = styled(TbSettings)`
  color: ${(props) => props.theme.gray_06};
  font-size: 22px;
`;

const BellIcon = styled(TbBell)`
  color: ${(props) => props.theme.gray_06};
  font-size: 22px;
`;
File: ./quality-admin/src/component/Common/Dropdown/StyledDropdown.tsx
Content:

import styled from 'styled-components';

import { IoIosArrowDown } from 'react-icons/io';

interface DropdownProps {
  title: string | null;
  options: string[];
  selectedOption: string;
  isOpen: boolean;
  toggle: () => void;
  onSelectedOption: React.Dispatch<React.SetStateAction<string>>;
}

const StyledDropdown = ({
  title,
  options,
  selectedOption,
  isOpen,
  toggle,
  onSelectedOption,
}: DropdownProps) => {
  return (
    <Selectbox onClick={toggle}>
      <SelectedOption>{selectedOption || title}</SelectedOption>
      <ArrowIconWrap isDropdownOpen={isOpen}>
        <ArrowIcon />
      </ArrowIconWrap>
      {isOpen && (
        <Options>
          {options.map((option, index) => (
            <Option
              key={index}
              onClick={(e) => {
                e.stopPropagation();
                toggle();
                onSelectedOption(option);
              }}
            >
              {option}
            </Option>
          ))}
        </Options>
      )}
    </Selectbox>
  );
};

export default StyledDropdown;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-width: 126px;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-right: 4px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 5px;
`;

const SelectedOption = styled.div``;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  width: 102%;
  max-height: 200px;
  padding: 6px;
  border: 1px solid #e2e7f1;
  overflow-y: scroll;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin/src/component/Common/Dropdown/Numberdown.tsx
Content:

import { useRouter } from 'next/router';
import { useCallback, useState } from 'react';
import styled from 'styled-components';


import { IoIosArrowDown } from 'react-icons/io';

const Numberdown = () => {
  const router = useRouter();
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  
  const [selectedViewOption, setSelectedViewOption] = useState(10);
  const viewOptions = [10, 50, 100];

  const handleChangeOption = useCallback(
    (option: number) => {
      setSelectedViewOption(option);
      setIsDropdownOpen(false);

      router.push({
        pathname: router.pathname,
        query: {
          ...router.query,
          pageSize: option,
        },
      });
    },
    [router]
  );

  return (
    <NoDownBase>
      <Selectbox
        onClick={() => {
          setIsDropdownOpen(!isDropdownOpen);
        }}
      >
        <SelectedOption>{selectedViewOption} 개씩 보기</SelectedOption>
        <ArrowIconWrap isDropdownOpen={isDropdownOpen}>
          <ArrowIcon />
        </ArrowIconWrap>
        {isDropdownOpen && (
          <Options>
            {viewOptions.map((option, index) => (
              <Option
                key={index}
                onClick={(e) => {
                  e.stopPropagation();
                  handleChangeOption(option);
                }}
              >
                {option}
              </Option>
            ))}
          </Options>
        )}
      </Selectbox>
    </NoDownBase>
  );
};

export default Numberdown;

const NoDownBase = styled.div`
  display: flex;
  align-items: center;
  font-size: 14px;
`;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 126px;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-right: 4px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 10px;
`;

const SelectedOption = styled.div``;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  width: 102%;
  padding: 6px;
  border: 1px solid #e2e7f1;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

const SelectSpan = styled.span`
  margin-left: 6px;
  color: #636363;
`;

File: ./quality-admin/src/component/Common/Dropdown/Dropdown.tsx
Content:

import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

import { IoIosArrowDown } from 'react-icons/io';

interface DropdownProps {
  name: string;
  title: string | null;
  options: string[];
  selectedOption: string;
  isOpen: boolean;
  toggle: () => void;
  onSelectedOption: React.Dispatch<React.SetStateAction<string>>;
}

const Dropdown = ({
  name,
  title,
  options,
  selectedOption,
  isOpen,
  toggle,
  onSelectedOption,
}: DropdownProps) => {
  const router = useRouter();

  const handleChangeOption = useCallback(
    (name: string, option: string) => {
      onSelectedOption(option);

      router.push({
        pathname: router.pathname,
        query: {
          ...router.query,
          [name]: option,
          page: 1,
        },
      });
    },
    [router]
  );

  return (
    <Selectbox onClick={toggle}>
      <SelectedOption>{selectedOption || title}</SelectedOption>
      <ArrowIconWrap isDropdownOpen={isOpen}>
        <ArrowIcon />
      </ArrowIconWrap>
      {isOpen && (
        <Options>
          {options.map((option, index) => (
            <Option
              key={index}
              onClick={(e) => {
                e.stopPropagation();
                toggle();
                handleChangeOption(name, option);
              }}
            >
              {option}
            </Option>
          ))}
        </Options>
      )}
    </Selectbox>
  );
};

export default Dropdown;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-width: 126px;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-right: 4px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 10px;
`;

const SelectedOption = styled.div``;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  
  padding: 6px;
  border: 1px solid #e2e7f1;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  margin-left: 4px;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin/src/component/Common/Pagination.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';


import { Pagination } from '@mui/material';

interface PaginationProps {
  currentPage: number;
  pageCount: number;
  pageSize: number;
}

const PaginationComponent: NextPage<PaginationProps> = (props) => {
  const { currentPage, pageCount, pageSize } = props;
  const router = useRouter();

  const pageChange = useCallback(
    (pageValue: number) => {
      router.push({
        pathname: router.pathname, 
        query: {
          ...router.query, 
          page: pageValue, 
        },
      });
    },
    [router]
  );

  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
    pageChange(value);
  };
  return (
    <PaginationBase>
      <StyledPagination
        page={currentPage}
        count={Math.ceil(pageCount / pageSize)}
        onChange={handleChange}
        variant="outlined"
        shape="rounded"
        hidePrevButton
      />
    </PaginationBase>
  );
};

export default PaginationComponent;

const PaginationBase = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 20px;
`;

const StyledPagination = styled(Pagination)`
  && {
    .MuiButtonBase-root {
      font-family: 'Noto Sans KR', sans-serif;
      margin: 0 0;
    }
    .MuiPaginationItem-root {
      border: 1px solid ${(props) => props.theme.table_line02};
    }
    .Mui-selected {
      background-color: ${(props) => props.theme.primary_01} !important;
      color: #fff;
    }
  }
`;

File: ./quality-admin/src/component/Common/Card.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

type CardProps = {
  children: React.ReactNode;
};
const Card: NextPage<CardProps> = ({ children }: CardProps) => {
  return <CardBase>{children}</CardBase>;
};

export default Card;

const CardBase = styled.div`
  position: relative;
  background-color: #fff;
  width: 100%;
  height: 100%;
  padding: 16px;
  border-radius: 10px;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
  overflow-y: scroll;
`;

File: ./quality-admin/src/component/Common/Buttons/ApplyBtn.tsx
Content:
import styled from 'styled-components';

type ApplyBtnProps = {
  children: React.ReactNode;
  onClick: () => void;
};

const ApplyBtn = (props: ApplyBtnProps) => {
  const { children, onClick } = props;

  return <ApplyButton onClick={onClick}>{children}</ApplyButton>;
};

export default ApplyBtn;

const ApplyButton = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  border-radius: 6px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
  margin-right: 8px;
  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
  &:last-child {
    margin-right: 0;
  }
`;

File: ./quality-admin/src/component/Common/Buttons/RefreshBtn.tsx
Content:
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

import { IoCloseCircle } from 'react-icons/io5';

const RefreshBtn = () => {
  const router = useRouter();

  const handleClose = useCallback(() => {
    const urlWithoutQuery = window.location.origin + window.location.pathname;

    window.location.href = urlWithoutQuery;
  }, [router]);

  return (
    <RefreshButton onClick={handleClose}>
      <RefreshIcon />
    </RefreshButton>
  );
};

export default RefreshBtn;

const RefreshButton = styled.button`
  height: 100%;
  display: flex;
  align-items: center;
`;

const RefreshIcon = styled(IoCloseCircle)`
  font-size: 18px;
  color: #757575;
`;

File: ./quality-admin/src/component/Common/ExcelUpld.tsx
Content:
import { useState } from 'react';
import * as Excel from 'exceljs';
import styled from 'styled-components';

import { TableBody, TableRow, TableCell } from '@mui/material';

import { RiCloseLargeFill } from 'react-icons/ri';

import Modal from './Modal';
import CommonTable from './Table/CommonTable';
import ApplyBtn from './Buttons/ApplyBtn';

const ExcelUpld = ({
  upldResult,
  setUpldDatas,
  setOpenUpld,
  handleUpldDatas,
  mapRowData,
}: any) => {
  const [fileName, setFileName] = useState<string | null>(null);

  console.log(upldResult);
  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile: File | undefined = e.target.files?.[0];

    if (selectedFile) {
      const promise = validateExcelFile(selectedFile);

      promise.then(
        (result) => {
          if (result === 'success') {
            setFileName(selectedFile.name);
          }
        },
        (err) => {
          
          console.log(err);
        }
      );
    }
  };

  const validateExcelFile = (file: Blob) => {
    const sheetData: any[] = [];

    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsArrayBuffer(file);
      reader.onload = () => {
        const buffer = reader.result as any;
        const workbook = new Excel.Workbook();
        workbook.xlsx
          .load(buffer)
          .then(() => {
            const worksheet = workbook.getWorksheet(1);
            worksheet?.eachRow((row, rowNumber) => {
              if (rowNumber === 1) return; 

              const rowData: any[] = [];
              row.eachCell((cell, cellNumber) => {
                rowData[cellNumber - 1] = { value: cell.value };
              });

              
              if (rowData.length > 0) {
                sheetData.push(rowData);
              }
            });

            const jsonArray = sheetData.map((rowArray) => mapRowData(rowArray));
            setUpldDatas(jsonArray);

            resolve('success');
          })
          .catch((error) => {
            console.log(error);
          });
      };
    });
  };

  
  const tableHeader = ['등록 성공', '등록 실패'];
  const tableBody = (
    <TableBody>
      <TableRow>
        <StyledTableCell>{upldResult?.success}개</StyledTableCell>
        <StyledTableCell>
          <ErrorStrong>{upldResult?.failure}</ErrorStrong> 개
        </StyledTableCell>
      </TableRow>
    </TableBody>
  );

  return (
    <Modal>
      <UploadUsers>
        <CloseIconBtn
          onClick={() => {
            setUpldDatas(null);
            setOpenUpld(false);
          }}
        >
          <CloseBtnIcon />
        </CloseIconBtn>
        <UplP>파일 업로드</UplP>
        {!upldResult.status ? (
          <>
            <FileBox isUpload={fileName !== null}>
              <FileLabel isUpload={fileName !== null}>
                엑셀파일을 업로드해주세요.
              </FileLabel>

              <FileInput
                type="file"
                accept=".xlsx, .xls"
                onChange={(e) => {
                  handleFileChange(e);
                }}
              />
              <FileName>{fileName}</FileName>
            </FileBox>
            <FileAlert>
              • 엑셀양식을 미리 다운로드 하신 후 양식에 맞춰서 등록해주세요.
            </FileAlert>
            <FileAlert>• 파일은 한번에 한개씩만 처리가능합니다.</FileAlert>

            <BtnBox>
              <ApplyBtn onClick={handleUpldDatas}>등록하기</ApplyBtn>
            </BtnBox>
          </>
        ) : (
          <>
            <UpldResultBox>
              <CommonTable tableHeader={tableHeader} tableBody={tableBody} />
            </UpldResultBox>
            <FileAlert>
              • 실패한 항목은 수정하신 후 다시 업로드해주세요.
            </FileAlert>
            <BtnBox>
              <ApplyBtn
                onClick={() => {
                  setUpldDatas(null);
                  setOpenUpld(false);
                  window.location.reload();
                }}
              >
                닫기
              </ApplyBtn>
            </BtnBox>
          </>
        )}
      </UploadUsers>
    </Modal>
  );
};

export default ExcelUpld;

const UploadUsers = styled.div`
  position: relative;
  background-color: #fff;
  min-width: 460px;
  padding: 32px 24px 24px;
  border-radius: 10px;
`;

const CloseIconBtn = styled.button`
  position: absolute;
  top: 0;
  right: 0;
`;

const UplP = styled.p`
  text-align: center;
  font-size: 20px;
  font-weight: 500;
`;

const FileBox = styled.div<{ isUpload: boolean }>`
  background-color: ${(props) => (props.isUpload ? '#f6f6f6' : 'transprent')};
  position: relative;
  height: 75px;
  display: flex;
  align-ites: center;
  justify-content: center;
  flex-direction: column;
  margin: 24px 0 16px;
  border: ${(props) => (props.isUpload ? 'none' : '1px dashed #aaa')};
  border-radius: 3px;
`;

const FileLabel = styled.label<{ isUpload: boolean }>`
  display: ${(props) => (props.isUpload ? 'none' : 'show')};
  text-align: center;
  color: #575757;
`;

const FileInput = styled.input`
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0;
  cursor: pointer;
`;

const FileName = styled.span`
  font-size: 14px;
  text-align: center;
  color: ${(props) => props.theme.primary_dgray};
`;

const FileAlert = styled.p`
  line-height: 1.5;
  font-size: 13px;
  color: ${(props) => props.theme.gray_07};
`;

const UpldResultBox = styled.div`
  
  padding: 12px 0;
  margin: 16px 0;
  line-height: 1.8;
`;

const UpldBtn = styled.button`
  background-color: ${(props) => props.theme.primary_dgray};
  width: 100%;
  padding: 16px 0;
  margin-top: 16px;
  color: #fff;
  border-radius: 8px;
`;

const CloseBtnIcon = styled(RiCloseLargeFill)`
  position: absolute;
  top: 20px;
  right: 24px;
  cursor: pointer;
  font-size: 18px;
`;

const BtnBox = styled.div`
  display: flex;
  align-ites: center;
  justify-content: flex-end;
  margin-top: 20px;
`;


const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 40px;
    vertical-align: middle;
    text-align: center;
    border-bottom: 1px solid ${(props) => props.theme.table_line02};
    color: ${(props) => props.theme.primary_dgray};
  }
`;

const ErrorStrong = styled.strong`
  color: red;
`;

File: ./quality-admin/src/component/Common/MobileModal.tsx
Content:
import { useEffect, useRef } from 'react';
import styled from 'styled-components';

type ModalProps = {
  children: React.ReactNode;
};

const MobileModal = ({ children }: ModalProps) => {
  return (
    <ModalBase>
      <ModalInner>{children}</ModalInner>
    </ModalBase>
  );
};

export default MobileModal;

const ModalBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 16px;
  z-index: 999;
`;

const ModalInner = styled.div`
  background: #fff;
  border-radius: 5px;
`;

File: ./quality-admin/src/component/Common/Table/SortingTable.tsx
Content:
import React, { useState, useMemo } from 'react';
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TableContainer,
  Checkbox,
  TableSortLabel,
} from '@mui/material';
import styled from 'styled-components';

interface TableHeader {
  key: string;
  label: string;
  numeric: boolean;
}

interface SortingTableProps {
  headers: TableHeader[];
  data: any[];
  checkedItems: { [key: number]: boolean };
  handleChangeItem: (
    id: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  selectAll: boolean;
  handleSelectAll: (event: React.ChangeEvent<HTMLInputElement>) => void;
}

const SortingTable: React.FC<SortingTableProps> = ({
  headers,
  data,
  checkedItems,
  handleChangeItem,
  selectAll,
  handleSelectAll,
}) => {
  const [order, setOrder] = useState<'asc' | 'desc'>('asc');
  const [orderBy, setOrderBy] = useState<string>(headers[0]?.key || '');

  const handleSort = (property: string) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedData = useMemo(() => {
    return [...data].sort((a, b) => {
      const aValue = a[orderBy];
      const bValue = b[orderBy];
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return order === 'asc'
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      }
      return order === 'asc' ? aValue - bValue : bValue - aValue;
    });
  }, [data, order, orderBy]);

  return (
    <TableBase>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <StyledTableCellHead padding="checkbox">
                <Checkbox
                  color="success"
                  checked={selectAll}
                  onChange={handleSelectAll}
                />
              </StyledTableCellHead>
              {headers.map((header) => (
                <StyledTableCellHead
                  key={header.key}
                  align={header.numeric ? 'right' : 'left'}
                  sortDirection={orderBy === header.key ? order : false}
                >
                  <TableSortLabel
                    active={orderBy === header.key}
                    direction={orderBy === header.key ? order : 'asc'}
                    onClick={() => handleSort(header.key)}
                  >
                    {header.label}
                  </TableSortLabel>
                </StyledTableCellHead>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {sortedData.map((row) => (
              <TableRow key={row.id} hover>
                <StyledTableCell padding="checkbox">
                  <Checkbox
                    color="success"
                    checked={checkedItems[row.id] || false}
                    onChange={handleChangeItem(row.id)}
                  />
                </StyledTableCell>
                {headers.map((header) => (
                  <StyledTableCell
                    key={header.key}
                    align={header.numeric ? 'right' : 'left'}
                  >
                    {row[header.key]}
                  </StyledTableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </TableBase>
  );
};

export default SortingTable;

const TableBase = styled.div`
  margin: 8px 0;
  height: calc(var(--vh, 1vh) * 100 - 300px);
  overflow-y: scroll;
`;

const StyledTableContainer = styled(TableContainer)``;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    background-color: #f4f6f9;
    height: 45px;
    text-align: center;
    letter-spacing: -0.5px;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;

File: ./quality-admin/src/component/Common/Table/CheckTable.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import { CheckTableProps } from '../../../../type/commonType';

import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Checkbox,
} from '@mui/material';

const CheckTable: NextPage<CheckTableProps> = (props) => {
  const { tableHeader, tableBody, selectAll, handleSelectAll } = props;

  return (
    <TableBase>
      <StyledTableContainer>
        <Table size="small">
          <TableHead>
            <TableRow>
              <StyledTableCellHead padding="checkbox">
                <Checkbox
                  color="success"
                  checked={selectAll}
                  onChange={handleSelectAll}
                />
              </StyledTableCellHead>
              {tableHeader.map((header, idx) => {
                return (
                  <StyledTableCellHead key={idx}>{header}</StyledTableCellHead>
                );
              })}
            </TableRow>
          </TableHead>
          {tableBody}
        </Table>
      </StyledTableContainer>
    </TableBase>
  );
};

export default CheckTable;

const TableBase = styled.div`
  margin: 8px 0;
  height: calc(var(--vh, 1vh) * 100 - 300px);
  overflow-y: scroll;
`;

const StyledTableContainer = styled(TableContainer)``;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    background-color: #f4f6f9;
    height: 45px;
    text-align: center;
    letter-spacing: -0.5px;
  }
`;

File: ./quality-admin/src/component/Common/Table/CommonTable.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import { TableProps } from '../../../../type/commonType';

import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';

const CommonTable: NextPage<TableProps> = (props) => {
  const { tableHeader, tableBody } = props;
  return (
    <TableBase>
      <StyledTableContainer>
        <Table size="small">
          <TableHead>
            <TableRow>
              {tableHeader.map((header, idx) => {
                return (
                  <StyledTableCellHead key={idx}>{header}</StyledTableCellHead>
                );
              })}
            </TableRow>
          </TableHead>
          {tableBody}
        </Table>
      </StyledTableContainer>
    </TableBase>
  );
};

export default CommonTable;

const TableBase = styled.div`
  margin: 8px 0;
  padding: 0 0 16px;
  max-height: calc(var(--vh, 1vh) * 100 - 280px);
  overflow-y: scroll;
  
`;

const StyledTableContainer = styled(TableContainer)`
  border-top: 1px solid ${(props) => props.theme.table_line02};
`;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 45px;
    border-bottom: 1px solid #e2e7f1;
    font-weight: 500;
    text-align: center;
    letter-spacing: -0.5px;
    color: ${(props) => props.theme.gray_07};
  }
`;

File: ./quality-admin/src/component/Common/Modal.tsx
Content:
import { useEffect, useRef } from 'react';
import styled from 'styled-components';

type ModalProps = {
  children: React.ReactNode;
};

const Modal = ({ children }: ModalProps) => {
  return (
    <ModalBase>
      <ModalInner>{children}</ModalInner>
    </ModalBase>
  );
};

export default Modal;

const ModalBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
`;

const ModalInner = styled.div`
  background: #fff;
  border-radius: 5px;
`;

File: ./quality-admin/src/component/Common/Toast.tsx
Content:
import { useEffect, useState } from 'react';
import styled, { keyframes } from 'styled-components';


import { VscChromeClose } from 'react-icons/vsc';

type ToastProps = {
  children: React.ReactNode;
  setOpenToast: React.Dispatch<React.SetStateAction<boolean>>;
};

const Toast = ({ children, setOpenToast }: ToastProps) => {
  useEffect(() => {
    
    const timer = setTimeout(() => {
      setOpenToast(false);
    }, 1500);

    return () => {
      clearTimeout(timer);
    };
  }, []);

  return (
    <ToastBase
      onClick={() => {
        setOpenToast(false);
      }}
    >
      <ToastBox>
        <ToastClose>
          <CloseIcon />
        </ToastClose>
        {children}
      </ToastBox>
    </ToastBase>
  );
};

export default Toast;

const slideIn = keyframes`
from {
  transform: translateY(0%);
}
to {
  transform: translateY(-40%);
}
`;

const ToastBase = styled.div`
  position: absolute;
  bottom: 20px;
  width: 100%;
  animation: ${slideIn} 300ms ease-in-out 0s 1 normal forwards;
  cursor: pointer;
`;

const ToastBox = styled.div`
  background-color: #fdecee;
  width: 420px;
  display: flex;
  align-items: center;
  padding: 18px;
  margin: 0 auto;
  color: #fff;
  border-radius: 7px;
  box-shadow: 0 0.3rem 0.7rem rgb(0 0 0 / 8%);
`;

const ToastClose = styled.div`
  background-color: #ef4d56;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
`;

const CloseIcon = styled(VscChromeClose)`
  font-size: 11px;
`;

File: ./quality-admin/src/component/Common/SelectCategory.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

const SelectCategory: NextPage = () => {
  const router = useRouter();
  
  const handleQuery = useCallback(
    (target: string) => {
      router.push({
        pathname: router.route,
        query: {
          ...router.query,
          fst: target,
          scd: null,
          page: 1,
        },
      });
    },
    [router.query]
  );

  return (
    <CategoryBox>
      <CategoryMenu>
        <CategoryItem
          isQuery={
            router.query.fst === undefined || router.query.fst === '식품업'
          }
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          식품업
        </CategoryItem>
        <CategoryItem
          isQuery={router.query.fst === '축산물'}
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          축산물
        </CategoryItem>
        <CategoryItem
          isQuery={router.query.fst === '기구 및 용기'}
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          기구 및 용기
        </CategoryItem>
      </CategoryMenu>
    </CategoryBox>
  );
};

export default SelectCategory;

const CategoryBox = styled.div`
  margin-top: 16px;
`;

const CategoryMenu = styled.ul`
  display: flex;
`;

const CategoryItem = styled.li<{ isQuery: boolean }>`
  padding: 8px 36px;
  color: ${(props) => (props.isQuery ? '#22c55e' : '#555b7e')};
  border-bottom: ${(props) =>
    props.isQuery ? ' 1.5px solid #22c55e' : ' 1px solid #c1cde0'};
  font-weight: ${(props) => (props.isQuery ? '600' : '400')};
  font-size: 16px;
  cursor: pointer;
`;

File: ./quality-admin/src/component/Signin/SigninComponent.tsx
Content:
import axios from 'axios';
import React, { useCallback, useEffect, useState, useRef } from 'react';
import styled from 'styled-components';
import cookie from 'react-cookies';

export default function SigninComponent() {
  const [isAuth, setIsAuth] = useState(false);
  const [authCode, setAuthCode] = useState('');
  const [token, setToken] = useState('');
  const [timeLeft, setTimeLeft] = useState(5 * 60); 
  const [email, setEmail] = useState(''); 
  const [authInput, setAuthInput] = useState(''); 
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  const handleAuth = useCallback(async () => {
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/auth`,
        {
          user_email: email,
        }
      );
      if (res.status === 200) {
        setEmail(''); 
        setToken(res.data.jwt);
        setAuthCode(res.data.authcode);
        setIsAuth(true);
        setTimeLeft(5 * 60); 
      } else {
        alert('오류가 발생하였습니다. 다시 한번 시도해주세요.');
        window.location.reload();
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';
        alert(`${errorMessage}`);
      }
    }
  }, [email]);

  const handleReAuth = useCallback(async () => {
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/auth`,
        {
          user_email: email,
        }
      );
      if (res.status === 200) {
        setAuthCode(res.data.authcode);
        setToken(res.data.jwt);
        alert('인증번호가 재발송되었습니다.'); 
        setTimeLeft(5 * 60); 
      } else {
        alert('오류가 발생하였습니다. 다시 한번 시도해주세요.');
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';
        alert(`${errorMessage}`);
      }
    }
  }, [email]);

  const handleSignin = useCallback(async () => {
    if (authInput !== authCode) {
      return alert('인증번호가 일치하지 않습니다.');
    } else {
      cookie.save('qhrjs-access-token', token, {
        path: '/',
      });
      window.location.replace('/');
    }
  }, [authInput, authCode, token]);

  
  useEffect(() => {
    if (isAuth) {
      timerRef.current = setInterval(() => {
        setTimeLeft((prevTime) => {
          if (prevTime <= 1) {
            clearInterval(timerRef.current!);
            setIsAuth(false);
            return 0;
          }
          return prevTime - 1;
        });
      }, 1000);
    } else {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    }
    return () => {
      if (timerRef.current) clearInterval(timerRef.current);
    };
  }, [isAuth]);

  
  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  };

  return (
    <SigninBase>
      <SigninContents>
        <LogoBox>
          <LogoImg src="/images/sign-logo.png" alt="로고" />
          <SigninP>자가품질검사 챗봇 관리자</SigninP>
        </LogoBox>
        {isAuth ? (
          <ContentsBox>
            <InputLabel>인증번호</InputLabel>
            <InputBox>
              <Input
                value={authInput}
                onChange={(e) => setAuthInput(e.target.value)}
                placeholder="인증번호를 입력해주세요"
              />
              <InputAuthTime>{formatTime(timeLeft)}</InputAuthTime>
            </InputBox>

            <InputInfo>
              <InfoP>이메일로 발송한 인증번호를 입력해 주세요.</InfoP>
              <ReAuthBtn onClick={handleReAuth}>인증번호 다시받기</ReAuthBtn>
            </InputInfo>
            <SigninBtn onClick={handleSignin}>확인</SigninBtn>
          </ContentsBox>
        ) : (
          <ContentsBox>
            <InputLabel>이메일 주소</InputLabel>
            <InputBox>
              <Input
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="이메일 주소를 입력해주세요"
              />
            </InputBox>

            <SigninBtn onClick={handleAuth}>인증번호 발송</SigninBtn>
          </ContentsBox>
        )}
      </SigninContents>
    </SigninBase>
  );
}
const SigninBase = styled.main`
  width: 100%;
  max-width: 450px;
  min-width: 280px;
  height: 100vh;
  margin: 0 auto;
`;

const SigninContents = styled.article`
  height: 100%;
  display: flex;
  flex-flow: column;
  align-items: center;
  justify-content: center;
`;

const LogoBox = styled.div`
  background-color: #272b3c;
  width: 100%;
  height: 145px;
  display: flex;
  flex-flow: column;
  align-items: center;
  justify-content: center;
  padding: 16px 0;
  border-radius: 8px 8px 0 0;
`;

const LogoImg = styled.img`
  width: 52%;
  height: 50%;
  display: block;
  object-fit: cover;
`;

const SigninP = styled.p`
  margin-top: 12px;
  color: #fff;
  font-size: 18px;
  font-weight: 500;
  letter-spacing: -0.5px;
`;

const ContentsBox = styled.div`
  background-color: #fff;
  width: 100%;
  
  padding: 30px 24px;
  border-radius: 0 0 8px 8px;
  box-shadow: rgba(0, 0, 0, 0.04) 0px 3px 5px;
`;

const InputLabel = styled.label`
  padding-left: 3px;
  font-size: 14px;
  color: ${(props) => props.theme.gray_07};
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 8px;
  padding: 0 16px;
  border: 1px solid ${(props) => props.theme.table_line03};
  border-radius: 8px;
`;

const Input = styled.input`
  width: 80%;
  padding: 12px 0;
  border: none;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const InputAuthTime = styled.span`
  font-size: 14px;
  color: #ff8f8f;
`;

const InputInfo = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 16px;
  font-size: 14px;
`;

const InfoP = styled.p`
  color: #96a0b5;
`;

const ReAuthBtn = styled.button`
  font-weight: 500;
  font-size: 14px;
  color: #656d9a;
`;

const SigninBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  width: 100%;
  height: 45px;
  padding: 13px 0;
  margin-top: 30px;
  border-radius: 6px;
  color: #fff;
  font-size: 15px;
  &:disabled {
    background-color: #ececec;
    cursor: default;
  }
`;

File: ./quality-admin/src/component/Users/UsersCompoonent.tsx
Content:
import { NextPage } from 'next';
import { useRef, useState, useCallback } from 'react';
import styled from 'styled-components';


import { TableBody, TableCell, TableRow, Checkbox } from '@mui/material';

import CheckTable from '../Common/Table/CheckTable';
import UserDetail from './UserDetail';
import RefreshBtn from '../Common/Buttons/RefreshBtn';

import { IoSearchOutline } from 'react-icons/io5';

import { UsersType, DetailUser } from '../../../type/usersType';
import { useRouter } from 'next/router';

interface UsersComponentProps {
  usersData: UsersType;
  checkedItems: { [key: number]: boolean };
  selectAll: boolean;
  setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;
  handleChangeItem: (
    idx: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleDelete: () => void;
}

const UsersComponent: NextPage<UsersComponentProps> = ({
  usersData,
  setOpenModal,
  checkedItems,
  selectAll,
  handleSelectAll,
  handleChangeItem,
  handleDelete,
}) => {
  const { data } = usersData;
  const router = useRouter();
  const inputRef = useRef<HTMLInputElement>(null);

  const [detailData, setDetailData] = useState<DetailUser>({
    modal: false,
    data: {
      id: null,
      created_at: null,
      user_name: null,
      user_role: null,
      user_email: null,
      user_phone: null,
    },
  });

  const tableHeader: string[] = [
    '이름',
    '담당직무',
    '이메일주소',
    '연락처',
    '상세보기',
  ];

  const tableBody = data.map((data, idx) => {
    return (
      <TableBody key={data.id}>
        <StyledTableRow iseven={idx % 2 === 0}>
          <StyledTableCell padding="checkbox">
            <Checkbox
              color="success"
              checked={checkedItems[data.id] || false}
              onChange={handleChangeItem(data.id)}
            />
          </StyledTableCell>
          <StyledTableCell>{data.user_name}</StyledTableCell>
          <StyledTableCell>{data.user_role}</StyledTableCell>
          <StyledTableCell>{data.user_email}</StyledTableCell>
          <StyledTableCell>{data.user_phone}</StyledTableCell>
          <StyledTableCell>
            <DetailBtn
              onClick={() => {
                setDetailData({
                  modal: true,
                  data: data,
                });
              }}
            >
              상세보기
            </DetailBtn>
          </StyledTableCell>
        </StyledTableRow>
      </TableBody>
    );
  });

  
  const [optionState, setOptionState] = useState<string>('전체보기');
  
  const getOptionValue = (
    option: string,
    name: string,
    input: string | number | undefined
  ) => {
    return option === name && inputRef.current?.value ? input : null;
  };
  
  const handleSearch = useCallback(() => {
    router.push({
      pathname: '/users',
      query: {
        user_name:
          optionState === '이름'
            ? getOptionValue(optionState, '이름', inputRef.current?.value)
            : null,
        user_role:
          optionState === '담당직무'
            ? getOptionValue(optionState, '담당직무', inputRef.current?.value)
            : null,
        user_email:
          optionState === '이메일주소'
            ? getOptionValue(optionState, '이메일주소', inputRef.current?.value)
            : null,
        user_phone:
          optionState === '연락처'
            ? getOptionValue(
                optionState,
                '연락처',
                Number(inputRef.current?.value)
              )
            : null,
      },
    });
  }, [optionState, inputRef]);

  
  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleClose = useCallback(() => {
    const urlWithoutQuery = window.location.origin + window.location.pathname;

    window.location.href = urlWithoutQuery;
  }, [router]);

  return (
    <UserBase>
      <UserH1>이용자 관리</UserH1>
      <SearchBase>
        <FaqBox>
          <SOBox>
            <Select
              onChange={(e) => {
                if (e.target.value === '전체선택') {
                  handleClose();
                }
                setOptionState(e.target.value);
              }}
            >
              <Option>전체선택</Option>
              <Option>이름</Option>
              <Option>담당직무</Option>
              <Option>이메일주소</Option>
              <Option>연락처</Option>
            </Select>
          </SOBox>
          <InputBox>
            <EntityLabel>
              <SearchIcon />
            </EntityLabel>
            <EntityInput ref={inputRef} onKeyDown={handleOnKeyPress} />
            <RefreshBtn />
          </InputBox>
        </FaqBox>
        <UserBtnBox>
          <DeleteBtn onClick={handleDelete}>삭제</DeleteBtn>
          <AddBtn
            onClick={() => {
              setOpenModal(true);
            }}
          >
            신규추가
          </AddBtn>
        </UserBtnBox>
      </SearchBase>

      <CheckTable
        tableHeader={tableHeader}
        tableBody={tableBody}
        selectAll={selectAll}
        handleSelectAll={handleSelectAll}
      />
      {detailData.modal && (
        <UserDetail detailData={detailData} setDetailData={setDetailData} />
      )}
    </UserBase>
  );
};

export default UsersComponent;

const UserBase = styled.div``;
const UserH1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;



const SearchBase = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 24px;
`;
const FaqBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  margin-right: 12px;
`;

const Select = styled.select`
  height: 42px;
  padding: 0 16px;
  margin-right: 8px;
  border: 1px solid #ddd;
  border-radius: 5px;
  color: #757575;
  font-size: 14px;
`;

const Option = styled.option``;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const EntityInput = styled.input`
  width: 210px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const EntityLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const UserBtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin: 12px 0;
`;

const DeleteBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  border-radius: 7px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);

  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
`;

const AddBtn = styled(DeleteBtn)`
  margin-left: 12px;
`;

const StyledTableRow = styled(TableRow)<{ iseven: boolean }>`
  background-color: ${(props) =>
    props.iseven ? 'transparent' : 'rgba(168, 181, 209, 0.05)'};
  &:hover {
    
    
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;

const DetailBtn = styled.button`
  background-color: rgba(34, 197, 94, 0.1);
  color: ${(props) => props.theme.primary_01};
  padding: 12px 16px;
  border-radius: 6px;
`;

File: ./quality-admin/src/component/Users/UserDetail.tsx
Content:
import { NextPage } from 'next';
import { useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


import { DetailUser } from '../../../type/usersType';


interface UserDetailProps {
  detailData: DetailUser;
  setDetailData: React.Dispatch<React.SetStateAction<DetailUser>>;
}

const UserDetail: NextPage<UserDetailProps> = ({
  detailData,
  setDetailData,
}) => {
  const router = useRouter();

  const nameRef = useRef<HTMLInputElement>(null);
  const emailRef = useRef<HTMLInputElement>(null);
  const roleRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);

  
  const handleModify = useCallback(async () => {
    let body = {
      id: detailData.data.id,
      user_name: nameRef.current?.value,
      user_email: emailRef.current?.value,
      user_role: roleRef.current?.value,
      user_phone: String(phoneRef.current?.value),
    };

    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
        body
      );

      if (res.status === 200) {
        setDetailData({
          modal: false,
          data: {
            id: null,
            created_at: null,
            user_name: null,
            user_role: null,
            user_email: null,
            user_phone: null,
          },
        });
      }
    } catch (err) {
      console.log(err);
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  }, [nameRef, emailRef, roleRef, phoneRef]);
  return (
    <Modal>
      <SignupBase>
        <SignupHeading>
          <SignupH2>이용자 상세</SignupH2>
          <CloseBtn
            onClick={() => {
              setDetailData({
                modal: false,
                data: {
                  id: null,
                  created_at: null,
                  user_name: null,
                  user_role: null,
                  user_email: null,
                  user_phone: null,
                },
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </SignupHeading>
        <SignupBody>
          <SignupMenu>
            <SignupItem>
              <SignupLabel>이름</SignupLabel>
              <SignupInput
                ref={nameRef}
                defaultValue={detailData?.data?.user_name ?? ''}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>Email</SignupLabel>
              <SignupInput
                ref={emailRef}
                defaultValue={detailData.data.user_email ?? ''}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>담당직무</SignupLabel>
              <SignupInput
                ref={roleRef}
                defaultValue={detailData.data.user_role ?? ''}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>핸드폰번호</SignupLabel>
              <SignupInput
                type="tel"
                ref={phoneRef}
                defaultValue={detailData.data.user_phone ?? ''}
              />
            </SignupItem>
          </SignupMenu>
        </SignupBody>
        <BtnBox>
          <ApplyBtn onClick={handleModify}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </SignupBase>
    </Modal>
  );
};

export default UserDetail;

const SignupBase = styled.div`
  min-width: 440px;
  padding: 20px 16px 28px;
`;

const SignupHeading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const SignupH2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const SignupBody = styled.div`
  margin-top: 18px;
`;

const SignupMenu = styled.ul``;

const SignupItem = styled.li`
  padding: 12px 0;
  &:first-child {
    padding: 0 0 12px;
  }
`;

const SignupLabel = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const SignupInput = styled.input`
  display: flex;
  align-items: center;
  width: 100%;
  height: 34px;
  padding: 0 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: #96a0b5;
  }
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Users/UserSignup.tsx
Content:
import { useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface UserSignupProps {
  setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const UserSignup = ({ setOpenModal }: UserSignupProps) => {
  const router = useRouter();
  const nameRef = useRef<HTMLInputElement>(null);
  const emailRef = useRef<HTMLInputElement>(null);
  const roleRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);

  
  const handleAdd = useCallback(async () => {
    let body = {
      name: nameRef.current?.value,
      email: emailRef.current?.value,
      role: roleRef.current?.value,
      phoneNo: String(phoneRef.current?.value),
    };

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
        body
      );

      if (res.status === 200) {
        setOpenModal(false);
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  }, [nameRef, emailRef, roleRef, phoneRef]);

  return (
    <Modal>
      <SignupBase>
        <SignupHeading>
          <SignupH2>이용자 신규등록</SignupH2>
          <CloseBtn
            onClick={() => {
              setOpenModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </SignupHeading>
        <SignupBody>
          <SignupMenu>
            <SignupItem>
              <SignupLabel>이름</SignupLabel>
              <SignupInput ref={nameRef} placeholder="홍길동" />
            </SignupItem>
            <SignupItem>
              <SignupLabel>Email</SignupLabel>
              <SignupInput ref={emailRef} placeholder="email" />
            </SignupItem>
            <SignupItem>
              <SignupLabel>담당직무</SignupLabel>
              <SignupInput ref={roleRef} placeholder="데이터관리" />
            </SignupItem>
            <SignupItem>
              <SignupLabel>핸드폰번호</SignupLabel>
              <SignupInput
                type="number"
                ref={phoneRef}
                placeholder="하이픈(-)기호 없이 입력해주세요"
              />
            </SignupItem>
          </SignupMenu>
        </SignupBody>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </SignupBase>
    </Modal>
  );
};

export default UserSignup;

const SignupBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const SignupHeading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const SignupH2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const SignupBody = styled.div`
  margin-top: 18px;
`;

const SignupMenu = styled.ul``;

const SignupItem = styled.li`
  padding: 12px 0;
  &:first-child {
    padding: 0 0 12px;
  }
`;

const SignupLabel = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const SignupInput = styled.input`
  display: flex;
  align-items: center;
  width: 100%;
  height: 34px;
  padding: 0 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: #96a0b5;
  }
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/utils/handleSearch.ts
Content:
import { Router, useRouter } from 'next/router';
import { useCallback } from 'react';

const handleSearch = () => {
  const router = useRouter();

  const handleMoveRoute = useCallback(
    (key: string, value: string | undefined) => {
      router.push({
        pathname: router.pathname,
        query: {
          ...router.query, 
          [key]: value,
        },
      });
    },
    [router]
  );

  return { handleMoveRoute };
};

export default handleSearch;

File: ./quality-admin/src/utils/handleDwn.ts
Content:
import dayjs from 'dayjs';

import * as Excel from 'exceljs';
import { saveAs } from 'file-saver';

const handleExcelDwn = async (headers: string[], rows: any[], type: string) => {
  try {
    
    const wb = new Excel.Workbook();
    const sheet = wb.addWorksheet('Sheet1');

    
    const headerRow = sheet.addRow(headers);
    
    
    headerRow.eachCell((cell: any, colNumber: any) => {
      styleHeaderCell(cell);
      sheet.getColumn(colNumber).width = 15;
    });

    
    rows
      .sort((a, b) => a.id - b.id)
      .forEach((item) => {
        const rowDatas = Object.values(item);
        const row = sheet.addRow(rowDatas);

        
        row.getCell(6).numFmt = '@';
      });

    
    const fileData = await wb.xlsx.writeBuffer(); 
    const blob = new Blob([fileData], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    });
    saveAs(blob, `${type}_${dayjs(new Date()).format('YYYYMMDD')}`);
  } catch (err) {
    console.log(err);
  }
};

const styleHeaderCell = (cell: any) => {
  
  cell.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'ffe699' },
  };
  
  cell.alignment = {
    vertical: 'middle',
    horizontal: 'center',
    wrapText: true,
  };
};

export default handleExcelDwn;

File: ./quality-admin/src/utils/downloadData.ts
Content:
import dayjs from 'dayjs';

import * as Excel from 'exceljs';
import { saveAs } from 'file-saver';

import { DownloadType } from '../../type/commonType';

const handleDwn = async (
  headers: string[],
  rows: DownloadType[],
  type: string
) => {
  try {
    
    const wb = new Excel.Workbook();
    const sheet = wb.addWorksheet('Sheet1');

    
    const headerRow = sheet.addRow(headers);
    
    
    headerRow.eachCell((cell) => {
      styleHeaderCell(cell);
    });

    
    rows
      .sort((a, b) => a.id - b.id)
      .forEach((item) => {
        const rowDatas = Object.values(item); 
        sheet.addRow(rowDatas); 
      });

    
    const fileData = await wb.xlsx.writeBuffer();
    const blob = new Blob([fileData], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    });
    saveAs(blob, `${type}_${dayjs(new Date()).format('YYYYMMDD')}`);
  } catch (err) {
    console.log(err);
  }
};

const styleHeaderCell = (cell: Excel.Cell) => {
  
  cell.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'ffe699' },
  };
  
  cell.alignment = {
    vertical: 'middle',
    horizontal: 'center',
    wrapText: true,
  };
};

export default handleDwn;

File: ./quality-admin/src/utils/checkAuth.ts
Content:
import { GetServerSidePropsContext } from 'next';
import cookie from 'cookie';

const checkAuth = (context: GetServerSidePropsContext) => {
  
  const parsedCookie = context.req?.headers.cookie
    ? cookie.parse(context.req.headers.cookie)
    : {};

  if (!parsedCookie['qhrjs-access-token']) {
    
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
    };
  }
};

export default checkAuth;

File: ./quality-admin/src/container/FeeContainer.tsx
Content:
import { NextPage } from 'next';
import { useRef, useState, useCallback, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import { FeeProps } from '../../type/feeType';

import useCheckbox from '@/hooks/useCheckbox';


import Card from '@/component/Common/Card';
import FeeComponent from '@/component/Fee/FeeComponent';
import AddFee from '@/component/Fee/AddFee';
import EditFee from '@/component/Fee/EditFee';
import Toast from '@/component/Common/Toast';

const FeeContainer: NextPage<FeeProps> = ({ feeData }) => {
  const router = useRouter();
  const [addModal, setAddModal] = useState(false);
  const [editModal, setEditModal] = useState(false);
  const [openToast, setOpenToast] = useState(false);

  
  const { checkedItems, selectAll, handleChangeItem, handleSelectAll } =
    useCheckbox(feeData.datas);

  const inputRef = useRef<HTMLInputElement>(null);
  
  const [optionState, setOptionState] = useState<string>('제품명');

  
  const getOptionValue = (
    option: string,
    name: string,
    input: string | number | undefined
  ) => {
    return option === name && inputRef.current?.value ? input : null;
  };

  
  const handleSearch = useCallback(() => {
    router.push({
      pathname: '/chatbot/fee',
      query: {
        productName:
          optionState === '제품명'
            ? getOptionValue(optionState, '제품명', inputRef.current?.value)
            : null,
        nameCheck:
          optionState === '검사항목'
            ? getOptionValue(optionState, '검사항목', inputRef.current?.value)
            : null,
        feeValue:
          optionState === '수수료'
            ? getOptionValue(
                optionState,
                '수수료',
                Number(inputRef.current?.value)
              )
            : null,
      },
    });
  }, [optionState, inputRef]);

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/fee');
    }
  }, []);

  
  const handleDelete = async () => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        {
          params: {
            check: checkedItems,
          },
        }
      );

      if (res.status === 200) {
        
        router.replace(router.asPath);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else if (statusCode === 501) {
          setEditModal(false);
          setOpenToast(true);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };

  return (
    <Card>
      <FeeComponent
        feeData={feeData}
        inputRef={inputRef}
        setAddModal={setAddModal}
        setEditModal={setEditModal}
        optionState={optionState}
        setOptionState={setOptionState}
        handleSearch={handleSearch}
        checkedItems={checkedItems}
        selectAll={selectAll}
        handleChangeItem={handleChangeItem}
        handleSelectAll={handleSelectAll}
        handleDelete={handleDelete}
      />
      {addModal && <AddFee setAddModal={setAddModal} />}
      {editModal && (
        <EditFee
          checkedItems={checkedItems}
          setOpenToast={setOpenToast}
          setEditModal={setEditModal}
        />
      )}
      {openToast && (
        <Toast setOpenToast={setOpenToast}>
          <ToastBox>
            <ToastP>
              수수료를 변경하려면 동일한 검사 항목만 선택해야 합니다.
            </ToastP>
            <LightP>
              여러 항목을 선택할 경우, 수수료 변경이 적용되지 않습니다.
            </LightP>
          </ToastBox>
        </Toast>
      )}
    </Card>
  );
};

export default FeeContainer;


const ToastBox = styled.div`
  margin-left: 16px;
  line-height: 1.4;
`;
const ToastP = styled.p`
  color: #601f22;
  font-weight: 600;
`;

const LightP = styled(ToastP)`
  font-weight: 300;
  font-size: 14px;
`;

File: ./quality-admin/src/container/FaqContainer.tsx
Content:
import { NextPage } from 'next';
import { useCallback, useEffect, useRef, useState } from 'react';


import { useRouter } from 'next/router';

import { FaqProps, ModalFaqType } from '../../type/faqType';


import Card from '@/component/Common/Card';
import FaqComponent from '@/component/FAQ/FaqComponent';
import AddFaq from '@/component/FAQ/AddFaq';
import DeleteFaq from '@/component/FAQ/DeleteFaq';
import ModifyFaq from '@/component/FAQ/ModifyFaq';

const FaqContainer: NextPage<FaqProps> = ({ faqData }) => {
  const router = useRouter();
  const emailRef = useRef<HTMLInputElement>(null);
  
  const [addModal, setAddModal] = useState<boolean>(false);
  const [deleteModal, setDeleteModal] = useState<Partial<ModalFaqType>>({
    id: null,
    question: null,
    modal: false,
  });
  const [modifyModal, setModifyModal] = useState<ModalFaqType>({
    id: null,
    question: null,
    answer: null,
    tag: '',
    modal: false,
  });

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/faq');
    }
  }, []);

  
  const handleOnkey = useCallback(() => {
    router.push({
      pathname: '/chatbot/faq',
      query: {
        filter: emailRef?.current?.value,
      },
    });
  }, [emailRef]);

  return (
    <Card>
      <FaqComponent
        faqData={faqData}
        emailRef={emailRef}
        handleOnkey={handleOnkey}
        setAddModal={setAddModal}
        setDeleteModal={setDeleteModal}
        setModifyModal={setModifyModal}
      />
      {addModal && <AddFaq setAddModal={setAddModal} />}
      {deleteModal.modal && (
        <DeleteFaq deleteModal={deleteModal} setDeleteModal={setDeleteModal} />
      )}
      {modifyModal.modal && (
        <ModifyFaq modifyModal={modifyModal} setModifyModal={setModifyModal} />
      )}
    </Card>
  );
};

export default FaqContainer;

File: ./quality-admin/src/container/NotificationContainer.tsx
Content:
import { NextPage } from 'next';
import { useCallback, useRef, useState } from 'react';
import axios from 'axios';
import Card from '@/component/Common/Card';
import NotificationComponent from '@/component/Notification/NotificationComponent';
import { NotificationProps } from '../../type/notificationType';
import useCheckbox from '@/hooks/useCheckbox';
import { useRouter } from 'next/router';
import { toast } from 'react-toastify';

const NotificationContainer: NextPage<NotificationProps> = ({
  notificationData,
}) => {
  const router = useRouter();
  const { datas } = notificationData;
  const { checkedItems, selectAll, handleChangeItem, handleSelectAll } =
    useCheckbox(datas);
  const inputRef = useRef<HTMLInputElement>(null);
  const [optionState, setOptionState] = useState<string>('고객사명');

  const getOptionValue = (
    option: string,
    name: string,
    input: string | undefined
  ) => {
    return option === name && inputRef.current?.value ? input : null;
  };

  const handleSearch = useCallback(() => {
    router.push({
      pathname: '/notifications',
      query: {
        company_name:
          optionState === '고객사명'
            ? getOptionValue(optionState, '고객사명', inputRef.current?.value)
            : null,
        business_no:
          optionState === '사업자번호'
            ? getOptionValue(optionState, '사업자번호', inputRef.current?.value)
            : null,
        rep_name:
          optionState === '담당자명'
            ? getOptionValue(optionState, '담당자명', inputRef.current?.value)
            : null,
        business_type:
          optionState === '업종'
            ? getOptionValue(optionState, '업종', inputRef.current?.value)
            : null,
        phone_no:
          optionState === '연락처'
            ? getOptionValue(optionState, '연락처', inputRef.current?.value)
            : null,
        product_name:
          optionState === '제품명'
            ? getOptionValue(optionState, '제품명', inputRef.current?.value)
            : null,
      },
    });
  }, [optionState, inputRef]);

  const handleDelete = async () => {
    try {
      const selectedIds = Object.entries(checkedItems)
        .filter(([_, checked]) => checked)
        .map(([id]) => parseInt(id));

      if (selectedIds.length === 0) {
        toast.warn('삭제할 항목을 선택해주세요.');
        return;
      }

      const response = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/notifications`,
        { data: { ids: selectedIds } }
      );

      if (response.status === 200) {
        toast.success('선택한 항목이 삭제되었습니다.');
        router.replace(router.asPath);
      }
    } catch (error) {
      console.error('Delete error:', error);
      toast.error('알림 삭제 중 오류가 발생했습니다.');
    }
  };

  return (
    <Card>
      <NotificationComponent
        notificationData={notificationData}
        inputRef={inputRef}
        checkedItems={checkedItems}
        selectAll={selectAll}
        handleChangeItem={handleChangeItem}
        handleSelectAll={handleSelectAll}
        handleDelete={handleDelete}
        handleSearch={handleSearch}
        setOptionState={setOptionState}
      />
    </Card>
  );
};

export default NotificationContainer;

File: ./quality-admin/src/container/UsersContainer.tsx
Content:
import { NextPage } from 'next';
import { useState } from 'react';
import axios from 'axios';

import useCheckbox from '@/hooks/useCheckbox';

import Card from '@/component/Common/Card';
import UsersComponent from '@/component/Users/UsersCompoonent';
import UserSignup from '@/component/Users/UserSignup';

import { UsersProps } from '../../type/usersType';
import { useRouter } from 'next/router';

const UsersContainer: NextPage<UsersProps> = ({ usersData }) => {
  const { data } = usersData;
  const router = useRouter();
  
  const { checkedItems, selectAll, handleChangeItem, handleSelectAll } =
    useCheckbox(data);
  const [oepnModal, setOpenModal] = useState<boolean>(false);

  
  const handleDelete = async () => {
    try {
      const res = await axios.request({
        method: 'delete',
        url: `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
        data: {
          check: checkedItems, 
        },
      });
      if (res.status === 200) {
        router.replace(router.asPath);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };
  return (
    <Card>
      <UsersComponent
        checkedItems={checkedItems}
        selectAll={selectAll}
        handleChangeItem={handleChangeItem}
        handleSelectAll={handleSelectAll}
        usersData={usersData}
        setOpenModal={setOpenModal}
        handleDelete={handleDelete}
      />
      {oepnModal && <UserSignup setOpenModal={setOpenModal} />}
    </Card>
  );
};

export default UsersContainer;

File: ./quality-admin/src/container/FrequencyContainer.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useEffect, useState, useCallback } from 'react';
import axios from 'axios';

import { FrequencyProps } from '../../type/frequencyType';

import FrequencyComponent from '@/component/Frequency/FrequencyComponent';
import Card from '@/component/Common/Card';
import useCheckbox from '@/hooks/useCheckbox';
import ModifyFrequency from '@/component/Frequency/ModifyFrequency';
import ExcelUpld from '@/component/Common/ExcelUpld';

const FrequencyContainer: NextPage<FrequencyProps> = ({ frequencyData }) => {
  const { categories, datas } = frequencyData;
  const router = useRouter();
  
  const [openUpld, setOpenUpld] = useState(false);
  const [upldDatas, setUpldDatas] = useState(null);
  const [upldResult, setUpldResult] = useState({
    status: false,
    success: 0,
    failure: 0,
    msg: null,
  });
  
  const { checkedItems, selectAll, handleChangeItem, handleSelectAll } =
    useCheckbox(datas);

  
  const [modifyModal, setModifyModal] = useState<boolean>(false);

  
  const [scdOptions, setScdOptions] = useState<string[]>([]);

  
  const getCategories = useCallback(
    (query: string | string[]) => {
      const scdSet = new Set<string>();

      
      categories.forEach((category) => {
        if (category.fst_category === query) {
          scdSet.add(category.scd_category);
        }
      });

      setScdOptions(Array.from(scdSet));
    },
    [router.query]
  );

  useEffect(() => {
    if (router.query.fst) {
      getCategories(router.query.fst);
    } else {
      getCategories('식품업');
    }
  }, [router.query]);

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/frequency');
    }
  }, []);

  const handleDelete = async () => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        {
          params: {
            check: checkedItems,
          },
        }
      );
      console.log(res);

      if (res.status === 200) {
        
        router.replace(router.asPath);
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };

  
  const mapRowData = (rowArray: any[]) => {
    return {
      fst_category: rowArray[0]?.value,
      scd_category: rowArray[1]?.value,
      product: rowArray[2]?.value,
      name: rowArray[3]?.value,
      fee: String(rowArray[4]?.value),
      frequency: rowArray[5]?.value,
      remarks: rowArray[6]?.value,
      test_code: rowArray[7]?.value,
    };
  };
  
  const handleUpldDatas = useCallback(async () => {
    const body = {
      datas: upldDatas,
    };
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        body
      );
      if (res.status === 200) {
        console.log(res.data);

        setUpldResult({
          status: true,
          success:
            res.data.successCount === undefined ? 0 : res.data.successCount,
          failure:
            res.data.duplicateCount === undefined ? 0 : res.data.duplicateCount,
          msg: null,
        });
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 400) {
          return alert(`${errorMessage}`);
        } else {
          return alert(`${errorMessage}`);
        }
      }
    }
  }, [upldDatas]);
  return (
    <Card>
      <FrequencyComponent
        handleDelete={handleDelete}
        checkedItems={checkedItems}
        setModifyModal={setModifyModal}
        setOpenUpld={setOpenUpld}
        scdOptions={scdOptions}
        frequencyData={frequencyData}
        selectAll={selectAll}
        handleChangeItem={handleChangeItem}
        handleSelectAll={handleSelectAll}
      />
      {openUpld && (
        <ExcelUpld
          upldResult={upldResult}
          setUpldDatas={setUpldDatas}
          setOpenUpld={setOpenUpld}
          mapRowData={mapRowData}
          handleUpldDatas={handleUpldDatas}
        />
      )}
      {modifyModal && (
        <ModifyFrequency
          checkedItems={checkedItems}
          setModifyModal={setModifyModal}
        />
      )}
    </Card>
  );
};

export default FrequencyContainer;

File: ./quality-admin/src/container/SigninContainer.tsx
Content:
import React, { useCallback } from 'react';

import SigninComponent from '@/component/Signin/SigninComponent';

const SigninContainer: React.FC = () => {
  return <SigninComponent />;
};

export default SigninContainer;

File: ./quality-admin/src/container/InstituteContainer.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import dayjs from 'dayjs';

import { InstituteProps } from '../../type/instituteType';

import Card from '@/component/Common/Card';
import InstituteComponent from '@/component/Institute/InstituteComponent';
import ExcelUpld from '@/component/Common/ExcelUpld';

const InstituteContainer: NextPage<InstituteProps> = ({ instituteData }) => {
  const router = useRouter();

  
  const [openUpld, setOpenUpld] = useState(false);
  const [upldDatas, setUpldDatas] = useState(null);
  const [upldResult, setUpldResult] = useState({
    status: false,
    success: null,
    failure: [],
    msg: null,
  });

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/institute');
    }
  }, []);

  
  const mapRowData = (rowArray: any[]) => {
    return {
      category: rowArray[0]?.value,
      name: rowArray[1]?.value,
      director: rowArray[2]?.value,
      location: rowArray[3]?.value,
      region: rowArray[4]?.value,
      district: rowArray[5]?.value,
      phone: rowArray[6]?.value,
      fax: rowArray[7]?.value,
      remarks: rowArray[8]?.value,
      expiration: dayjs(rowArray[9]?.value).format('YYYY.MM.DD'),
    };
  };
  
  const handleUpldDatas = useCallback(async () => {
    const body = {
      institutes: upldDatas,
    };
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        body
      );
      console.log(res);
      if (res.status === 200) {
        setUpldResult({
          status: true,
          success: upldDatas,
          failure: [],
          msg: null,
        });
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const data = err.response?.data;
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 400) {
          alert(`${errorMessage}`);
        } else if (statusCode === 500) {
          setUpldResult({
            status: true,
            success: null,
            failure: data.failedRows,
            msg: data.message,
          });
        } else {
          alert(`${errorMessage}`);
        }
      }
    }
  }, [upldDatas]);

  return (
    <Card>
      <InstituteComponent
        instituteData={instituteData}
        setOpenUpld={setOpenUpld}
      />
      {openUpld && (
        <ExcelUpld
          upldResult={upldResult}
          setUpldDatas={setUpldDatas}
          setOpenUpld={setOpenUpld}
          mapRowData={mapRowData}
          handleUpldDatas={handleUpldDatas}
        />
      )}
    </Card>
  );
};

export default InstituteContainer;

File: ./quality-admin/src/styles/globalstyles.ts
Content:
import { createGlobalStyle } from 'styled-components';
import Reset from 'styled-reset';

const GlobalStyles = createGlobalStyle`
${Reset}

  @font-face {
    font-family: 'Noto Sans KR', sans-serif;
    src: 
    url('https:
    font-style: normal;
  }

:root {
}

* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  line-height: inherit;
}

body {
  background: #f7f9fB;
  font-family: 'Noto Sans KR', sans-serif;
  font-weight: 400;
  font-size: 15px;
  height: calc(var(--vh, 1vh) * 100);
  color: ${(props) => props.theme.font_color};
  box-sizing: border-box;
  ::-webkit-scrollbar {
    display: none;
  }
}
a {
  text-decoration: none;
  color: inherit;
}
button {
  font-family: 'Noto Sans KR', sans-serif;
  background: transparent;
  font-weight: 400;
  font-size: 14px;
  color: ${(props) => props.theme.font_color};
  border: 0 none;
  outline:none;
  cursor: pointer;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
}
ol, ul, li {
  list-style: none;
}
select, option {
  background: transparent;
  font-family: 'Noto Sans KR', sans-serif;
  font-size: 14px;
  
  
  
  color: ${(props) => props.theme.font_color};
}
a, button, input {
  font-family: 'Noto Sans KR', sans-serif;
  appearance: none;
  -webkit-appearance: none;
  -webkit-border-radius: 0;
  -webkit-tap-highlight-color: transparent;
  outline:none;
}

`;

export default GlobalStyles;

File: ./quality-admin/src/styles/theme.ts
Content:
const theme = {
  
  primary_01: '#22c55e',
  primary_02: '#20bb59', 

  
  gray_01: '#f4f6f9',
  gray_02: '#eaeff5',
  gray_03: '#d9e1ec',
  gray_04: '#c1cde0',
  gray_05: '#a8b5d1',
  gray_06: '#95a0c5',
  gray_07: '#656D9A',
  gray_08: '#555b7e',
  gray_09: '#2b2d3b',
  
  table_line01: '#d4d9e1',
  table_line02: '#dfe3e9',
  table_line03: '#E2E7F1',
  table_line04: '#f5f5f5',
  table_bg01: '#effcf3', 
  table_bg02: '#fcfcfc', 

  
  ui_red01: '#FF8F8F',
  ui_red02: '#ee4d5a',
  ui_red03: '#f65745',

  font_color: '#2b2d3b',
};

export default theme;

File: ./quality-admin/src/hooks/useCheckbox.ts
Content:
import { useState, useEffect } from 'react';

const useCheckbox = (datas: { id: number }[]) => {
  const [checkedItems, setCheckedItems] = useState<{ [key: number]: boolean }>(
    {}
  );
  const [selectAll, setSelectAll] = useState<boolean>(false);

  
  const handleChangeItem =
    (id: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
      setCheckedItems((prevState) => ({
        ...prevState,
        [id]: e.target.checked,
      }));
    };

  
  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    const isChecked = e.target.checked;
    setSelectAll(isChecked);

    const updatedCheckedItems = datas.reduce(
      (acc, data) => {
        acc[data.id] = isChecked;
        return acc;
      },
      {} as { [key: number]: boolean }
    );

    setCheckedItems(updatedCheckedItems);
  };

  
  useEffect(() => {
    const initialCheckedItems = datas.reduce(
      (acc, data) => {
        acc[data.id] = false;
        return acc;
      },
      {} as { [key: number]: boolean }
    );
    setCheckedItems(initialCheckedItems);
    setSelectAll(false); 
  }, [datas]); 

  return {
    checkedItems,
    selectAll,
    handleChangeItem,
    handleSelectAll,
  };
};

export default useCheckbox;

File: ./quality-admin/src/pages/index.tsx
Content:
import checkAuth from '@/utils/checkAuth';
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';

const Home: NextPage = () => {
  return <div></div>;
};

export default Home;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);

  
  if (authResult?.redirect) {
    return authResult;
  }
  return {
    redirect: {
      permanent: false,
      destination: '/users',
      
    },
  };
};

File: ./quality-admin/src/pages/chatbot/institute.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { InstituteProps } from '../../../type/instituteType';

import InstituteContainer from '@/container/InstituteContainer';
import checkAuth from '@/utils/checkAuth';

const institute: NextPage<InstituteProps> = ({ instituteData }) => {
  return <InstituteContainer instituteData={instituteData} />;
};

export default institute;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = [
    'fst',
    'nameCheck',
    'regionValue',
    'districtValue',
    'page',
    'pageSize',
  ];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
    {
      params,
    }
  );

  const instituteData = res.data;
  console.log(instituteData);
  return {
    props: { instituteData },
  };
};

File: ./quality-admin/src/pages/chatbot/fee.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { FeeProps } from '../../../type/feeType';

import FeeContainer from '@/container/FeeContainer';
import checkAuth from '@/utils/checkAuth';
const fee: NextPage<FeeProps> = ({ feeData }) => {
  return <FeeContainer feeData={feeData} />;
};

export default fee;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = [
    'fst',
    'productName',
    'nameCheck',
    'feeValue',
    'page',
    'pageSize',
  ];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(`${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`, {
    params,
  });

  const feeData = res.data;

  return {
    props: { feeData },
  };
};

File: ./quality-admin/src/pages/chatbot/frequency.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { FrequencyProps } from '../../../type/frequencyType';

import FrequencyContainer from '@/container/FrequencyContainer';
import checkAuth from '@/utils/checkAuth';

const frequency: NextPage<FrequencyProps> = ({ frequencyData }) => {
  return <FrequencyContainer frequencyData={frequencyData} />;
};

export default frequency;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = ['fst', 'scd', 'productName', 'page', 'pageSize'];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
    {
      params,
    }
  );

  const frequencyData = res.data;
  return {
    props: { frequencyData },
  };
};

File: ./quality-admin/src/pages/chatbot/faq.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { FaqProps } from '../../../type/faqType';

import FaqContainer from '@/container/FaqContainer';
import checkAuth from '@/utils/checkAuth';

const faq: NextPage<FaqProps> = ({ faqData }) => {
  return <FaqContainer faqData={faqData} />;
};

export default faq;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const filter = context.query.filter
    ? (context.query.filter as unknown as string)
    : null;

  const res = await axios.get(`${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`, {
    params: {
      filter: filter,
    },
  });

  const faqData = res.data.data;

  return {
    props: { faqData },
  };
};

File: ./quality-admin/src/pages/_document.tsx
Content:
import Document, {
  Html,
  Head,
  Main,
  NextScript,
  DocumentContext,
} from 'next/document';
import { ServerStyleSheet } from 'styled-components';

class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;
    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App) => (props) =>
            sheet.collectStyles(<App {...props} />),
        });

      const initialProps = await Document.getInitialProps(ctx);
      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }

  render() {
    return (
      <Html lang="ko">
        <Head>
          <meta charSet="utf-8" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

File: ./quality-admin/src/pages/users/index.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import UsersContainer from '@/container/UsersContainer';

import { UsersProps } from '../../../type/usersType';
import checkAuth from '@/utils/checkAuth';

const users: NextPage<UsersProps> = ({ usersData }) => {
  return <UsersContainer usersData={usersData} />;
};

export default users;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = ['user_name', 'user_role', 'user_email', 'user_phone'];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );
  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
    {
      params,
    }
  );

  const usersData = res.data;

  return {
    props: { usersData },
  };
};

File: ./quality-admin/src/pages/_app.tsx
Content:
import type { AppProps } from 'next/app';
import { NextPage } from 'next';

import { ThemeProvider } from 'styled-components';
import GlobalStyles from '@/styles/globalstyles';
import theme from '../styles/theme';


import Layout from '../component/Layout/Layout';

const App: NextPage<AppProps> = ({ Component, pageProps }: AppProps) => {
  return (
    <ThemeProvider theme={theme}>
      <GlobalStyles />
      <Layout>
        <Component {...pageProps} />
      </Layout>
    </ThemeProvider>
  );
};

export default App;

File: ./quality-admin/src/pages/notifications/index.tsx
Content:
import { GetServerSideProps, NextPage } from 'next';
import axios from 'axios';
import NotificationContainer from '@/container/NotificationContainer';
import {
  NotificationProps,
  NotificationType,
} from '../../../type/notificationType';

const NotificationPage: NextPage<NotificationProps> = ({
  notificationData,
}) => {
  return <NotificationContainer notificationData={notificationData} />;
};

export default NotificationPage;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { search, filterType, page = 1, limit = 10 } = context.query;

  try {
    const response = await axios.get(
      `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/notifications`,
      {
        params: {
          search,
          filterType,
          page,
          limit,
        },
      }
    );

    
    const notificationData: NotificationType = {
      datas: response.data.datas || [],
      pageCount: response.data.pageCount || 0,
      pageSize: response.data.pageSize || parseInt(limit as string),
      currentPage: response.data.currentPage || parseInt(page as string),
    };

    return {
      props: {
        notificationData,
      },
    };
  } catch (error) {
    console.error('Server-side props error:', error);
    
    return {
      props: {
        notificationData: {
          datas: [],
          pageCount: 0,
          pageSize: parseInt(limit as string),
          currentPage: parseInt(page as string),
        },
      },
    };
  }
};

File: ./quality-admin/src/pages/signin.tsx
Content:
import { NextPage } from 'next';
import SigninContainer from '@/container/SigninContainer';

const signin: NextPage = () => {
  return <SigninContainer />;
};

export default signin;

