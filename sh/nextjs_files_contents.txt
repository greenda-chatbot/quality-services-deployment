File: ./quality-admin/bin/next-sever.js
Content:
const http = require('http');
const next = require('next');

const dev = process.env.NODE_ENV !== 'production';
const nextApp = next({ dev });
const handle = nextApp.getRequestHandler();
const nextPort = '4000';

nextApp
  .prepare()
  .then(() => {
    http.createServer((req, res) => handle(req, res)).listen(nextPort);
  })
  .catch((e) => {
    console.log('cannot prepare next', e);
  });

File: ./quality-admin/config/db.js
Content:
const mysql = require('mysql2');

const db_info = {
  host: '13.209.138.233',
  port: '3306',
  user: 'root',
  password: 'chatbot',
  database: 'qcbot',
};

module.exports = {
  init() {
    return mysql.createPool(db_info);  
  },
  connect(pool) {
    pool.getConnection((err, conn) => {
      if (err) {
        console.error(`mysql connection error : ${err}`);
      } else {
        console.log('mysql is connected successfully!');
        conn.release();  
      }
    });
  }
};

File: ./quality-admin/config/jwtMiddleware.js
Content:
const jwt = require('jsonwebtoken');

const jwtMiddleware = (req, res, next) => {
  const token = req.headers['authorization']
    ? req.headers['authorization'].split(' ')[1]
    : null;

  if (!token) {
    return res.status(403).send({
      success: false,
      msg: '로그인이 되어있지 않습니다.',
      error: err,
    });
  }

  try {
    const verifiedToken = jwt.verify(token, process.env.JWT_KEY);
    req.verifiedToken = verifiedToken;

    next();
  } catch (err) {
    return res.status(403).send({
      success: false,
      msg: '등록된 사용자가 아닙니다.',
      error: err,
    });
  }
};

module.exports = jwtMiddleware;

File: ./quality-admin/next.config.js
Content:
const nextConfig = {
  reactStrictMode: true,
  compiler: {
    
    styledComponents: true, 
  },
  distDir: '.next',
};

module.exports = nextConfig;

File: ./quality-admin/next-env.d.ts
Content:






File: ./quality-admin/type/frequencyType.ts
Content:
export interface FrequencyProps {
  frequencyData: FrequencyType;
}

export type FrequencyType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
    name: string;
    fee: number;
    frequency: string;
  }[];
  categories: {
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
  }[];
};

export type AddFrequencyType = {
  fst: string | null;
  scd: string | null;
  trd: string | null;
  product: string | null;
  frequency: string | null;
};

File: ./quality-admin/type/faqType.ts
Content:
export interface FaqProps {
  faqData: FaqType[];
}

export type FaqType = {
  id: number;
  created_at: Date;
  modified_at: Date;
  business: string;
  category: string;
  supplement: string;
  question: string;
  answer: string;
  keyword: string;
};

export type ModalFaqType = {
  id: number | null;
  question: string | null;
  answer: string | null;
  tag: string;
  modal: boolean;
};

File: ./quality-admin/type/usersType.ts
Content:
export interface UsersProps {
  usersData: UsersType;
}

export type UsersType = {
  data: {
    id: number;
    created_at: Date;
    user_name: string;
    user_role: string;
    user_email: string;
    user_phone: string;
  }[];
  success: boolean;
};

export type DetailUser = {
  modal: boolean;
  data: {
    id: number | null;
    created_at: Date | null;
    user_name: string | null;
    user_role: string | null;
    user_email: string | null;
    user_phone: string | null;
  };
};

File: ./quality-admin/type/commonType.ts
Content:

export interface TableProps {
  tableHeader: string[];
  tableBody: React.ReactNode;
}

export interface CheckTableProps {
  tableHeader: any[];
  tableBody: React.ReactNode;
  selectAll: boolean;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

export type ModalType = {
  add: boolean;
  edit: boolean;
};

export type DownloadType = {
  id: number;
  base_name: string;
  phone_number: string;
};

File: ./quality-admin/type/react-dropdown.d.ts
Content:
import { ReactNode } from 'react';

export interface DropdownOption {
  value: string;
  label?: string;
}

export interface DropdownProps {
  options: DropdownOption[] | string[];
  onChange?: (option: DropdownOption) => void;
  value?: string | DropdownOption;
  placeholder?: string;
  disabled?: boolean;
  className?: string;
  controlClassName?: string;
  placeholderClassName?: string;
  menuClassName?: string;
  arrowClassName?: string;
  arrowClosed?: ReactNode;
  arrowOpen?: ReactNode;
}

declare module 'react-dropdown' {
  const Dropdown: React.FC<DropdownProps>;
  export default Dropdown;
}

File: ./quality-admin/type/feeType.ts
Content:
export interface FeeProps {
  feeData: FeeType;
}

export type FeeType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    fst_category: string;
    product: string;
    name: string;
    fee: number;
  }[];
  categories: {
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
  }[];
};

export type FeeModalType = {
  add: boolean;
  edit: boolean;
};

export type FeeDropdownType = {
  fst: boolean;
  scd: boolean;
  trd: boolean;
};

File: ./quality-admin/type/instituteType.ts
Content:
export interface InstituteProps {
  instituteData: InstituteType;
}

export type InstituteType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    category: string;
    district: string;
    region: string;
    expiration: string;
    fax: string;
    location: string;
    director: string;
    name: string;
    phone: string;
    remarks: string;
  }[];
  categories: {
    value: string;
    type: string;
  }[];
};

export type ModalInstituteType = {
  modal: boolean;
  data: {
    id: number | null;
    category: string | null;
    district: string | null;
    director: string | null;
    region: string | null;
    expiration: string | null;
    fax: string | null;
    location: string | null;
    name: string | null;
    phone: string | null;
    remarks: string | null;
  };
};

export type DetailInstitute = {
  id: number | null;
  category: string | null;
  district: string | null;
  region: string | null;
  expiration: string | null;
  fax: string | null;
  location: string | null;
  name: string | null;
  phone: string | null;
  remarks: string | null;
};

File: ./quality-admin/.env
Content:
# NEXT_PUBLIC_APP_API_KEY = "http:
# NEXT_PUBLIC_APP_API_KEY = "http:
NEXT_PUBLIC_APP_API_KEY = "http:

GMAIL_ADDRESS = "qhrjs407@gmail.com"
GMAIL_PASSWORD = "uuxfpjgiwhkfohpo"
JWT_KEY = 'qhrjs407!'
File: ./quality-admin/ecosystem.config.js
Content:
module.exports = {
  apps: [
    {
      name: 'backend-server',
      script: './bin/www', 
      env: {
        NODE_ENV: 'production',
        PORT: 3002, 
      },
    },
    {
      name: 'next-server',
      script: 'npm',
      args: 'run next-start', 
      env: {
        NODE_ENV: 'production',
        PORT: 4000, 
      },
    },
  ],
};

File: ./quality-admin/routes/v1/fee/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/fee/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { fst, productName, nameCheck, feeValue, page, pageSize } = req.query;

  let fst_category = fst ? `%${fst}%` : '식품업';
  let product = productName ? `%${productName}%` : null;
  let name = nameCheck ? `%${nameCheck}%` : null;
  let fee = feeValue ? feeValue : null;
  
  const pageValue = page ? parseInt(page) : 1;
  const pageSizeValue = pageSize ? parseInt(pageSize) : 8;
  const offset = (pageValue - 1) * pageSizeValue;

  
  const sqlCount = `select count(*) as totalCount from qcbot.tbl_fee
    where
  (fst_category like ifnull(?, fst_category)) and
  (product like ifnull(?, product)) and
  (name like ifnull(?, name)) and
  (fee like ifnull(?, fee))
  `;
  
  const sql = `select * from qcbot.tbl_fee
    where
  (fst_category like ifnull(?, fst_category)) and
  (product like ifnull(?, product)) and
  (name like ifnull(?, name)) and
  (fee like ifnull(?, fee))
    order by id desc
    limit ? offset ?
  `;

  
  const queryValues = [fst_category, product, name, fee, pageSizeValue, offset];

  conn.query(sqlCount, queryValues.slice(0, -2), (err, countResult) => {
    if (err) {
      return res.status(403).send({
        success: false,
        msg: '다시 시도해주세요.',
      });
    }
    const totalCount = countResult[0].totalCount;

    conn.query(sql, queryValues, (err, rows) => {
      if (err) {
        return res.status(500).send({
          success: false,
          msg: '데이터를 가져오는 데 실패했습니다.',
        });
      }
      return res.status(200).send({
        success: true,
        datas: rows,
        pageCount: totalCount,
        pageSize: pageSizeValue,
        currentPage: pageValue,
      });
    });
  });
};

exports.modify = (req, res) => {
  const { check, fee } = req.body;

  const ids = Object.keys(check)
    .filter((key) => check[key] === true)
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  const placeholders = ids.map(() => '?').join(',');

  const sqlSelect = `SELECT name FROM qcbot.tbl_fee WHERE id IN (${placeholders})`;

  conn.query(sqlSelect, [...ids], (err, rows) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터 조회에 실패했습니다.',
      });
    }

    
    const uniqueNames = [...new Set(rows.map((row) => row.name))];
    if (uniqueNames.length > 1) {
      return res.status(501).send({
        success: false,
        msg: '선택된 항목들의 name 값이 서로 다릅니다.',
      });
    }

    
    const sqlUpdate = `UPDATE qcbot.tbl_fee SET fee = ? WHERE id IN (${placeholders})`;

    conn.query(sqlUpdate, [fee, ...ids], (err, row) => {
      if (err) {
        return res.status(500).send({
          success: false,
          msg: '데이터를 수정하는 데 실패했습니다.',
        });
      }
      return res.status(200).send({
        success: true,
        data: row,
      });
    });
  });
};

exports.delete = (req, res) => {
  const { check } = req.query;

  console.log(check);
  const ids = Object.keys(check)
    .filter((key) => check[key] === 'true') 
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');

  
  const sql = `DELETE FROM qcbot.tbl_fee WHERE id IN (${placeholders})`;

  conn.query(sql, ids, (err, result) => {
    if (err) {
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '삭제 중 오류가 발생했습니다.',
      });
    }

    return res.status(200).send({
      success: true,
      code: 200,
      msg: '삭제되었습니다.',
    });
  });
};

File: ./quality-admin/routes/v1/frequency/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/frequency/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();
const pool = require('../../../config/db').init();

exports.list = (req, res) => {
  const { fst, scd, productName, page, pageSize } = req.query;

  let fst_category = fst ? `%${fst}%` : '식품업';
  let scd_category = scd ? `%${scd}%` : null;
  let product = productName ? `%${productName}%` : null;
  
  let pageValue = page ? parseInt(page) : 1;
  let pageSizeValue = pageSize ? parseInt(pageSize) : 8;
  let offset = (pageValue - 1) * pageSizeValue;

  
  const sqlCount = `
    SELECT COUNT(DISTINCT product) AS totalCount
    FROM qcbot.tbl_frequency
    WHERE
      (fst_category LIKE IFNULL(?, fst_category)) AND
      (scd_category LIKE IFNULL(?, scd_category)) AND
      (product LIKE IFNULL(?, product))
  `;

  
  const sql = `
    SELECT DISTINCT product, fst_category, scd_category, frequency, MAX(id) AS id
    FROM qcbot.tbl_frequency
    WHERE
      (fst_category LIKE IFNULL(?, fst_category)) AND
      (scd_category LIKE IFNULL(?, scd_category)) AND
      (product LIKE IFNULL(?, product))
    GROUP BY product, fst_category, scd_category, frequency
    ORDER BY id DESC
    LIMIT ?, ?
  `;

  
  const sqlCategories = `
    SELECT DISTINCT fst_category, scd_category, product
    FROM qcbot.tbl_frequency
  `;

  
  const queryValues = [
    fst_category,
    scd_category,
    product,
    offset,
    pageSizeValue,
  ];

  conn.query(sqlCategories, [], (err, categoryResults) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '카테고리를 가져오는 데 실패했습니다.',
      });
    }
    conn.query(sqlCount, queryValues.slice(0, -2), (err, countResult) => {
      if (err) {
        return res.status(403).send({
          success: false,
          msg: '다시 시도해주세요.',
        });
      }
      const totalCount = countResult[0].totalCount;

      conn.query(sql, queryValues, (err, rows) => {
        if (err) {
          return res.status(500).send({
            success: false,
            msg: '데이터를 가져오는 데 실패했습니다.',
          });
        }
        return res.status(200).send({
          success: true,
          datas: rows,
          pageCount: totalCount,
          pageSize: pageSizeValue,
          currentPage: pageValue,
          categories: categoryResults,
        });
      });
    });
  });
};

exports.add = (req, res) => {
  const { datas } = req.body;
  console.log(datas)
  const feeValues = datas.map((data) => [
    data.fst_category,
    data.scd_category,
    data.product,
    data.name,
    data.fee,
    data.frequency,
    data.remarks,
    data.test_code,
  ]);

  const sqlFeeInsert = `
    INSERT INTO qcbot.tbl_fee (fst_category, scd_category, product, name, fee, frequency, remarks, test_code)
    VALUES ?
  `;

  const sqlFeeCheck = `
    SELECT fst_category, scd_category, product, name, fee
    FROM qcbot.tbl_fee
    WHERE (fst_category, scd_category, product, name, fee) IN (?)
  `;

  let successCount = 0;
  let duplicateCount = 0;

  pool.getConnection((err, conn) => {
    if (err) {
      return res.status(500).send({
        success: false,
        message: '데이터베이스 연결에 실패했습니다.',
        error: err.message,
      });
    }

    conn.beginTransaction((err) => {
      if (err) {
        conn.release();
        return res.status(500).send({
          success: false,
          message: '트랜잭션 시작에 실패했습니다.',
          error: err.message,
        });
      }

      
      conn.query(
        sqlFeeCheck,
        [feeValues.map((v) => [v[0], v[1], v[2], v[3], v[4]])],
        (err, existingFeeRows) => {
          if (err) {
            conn.release();
            return res.status(500).send({
              success: false,
              message: 'tbl_fee 중복 확인 실패.',
              error: err.message,
            });
          }

          const existingFeeKeys = new Set(
            existingFeeRows.map(
              (row) =>
                `${row.fst_category}-${row.scd_category}-${row.product}-${row.name}-${row.fee}`
            )
          );

          
          const newFeeValues = feeValues.filter((value) => {
            const key = `${value[0]}-${value[1]}-${value[2]}-${value[3]}-${value[4]}`;
            return !existingFeeKeys.has(key);
          });

          
          duplicateCount += existingFeeKeys.size;

          
          if (newFeeValues.length > 0) {
            conn.query(sqlFeeInsert, [newFeeValues], (err, result) => {
              if (err) {
                return conn.rollback(() => {
                  conn.release();
                  return res.status(500).send({
                    success: false,
                    message: 'tbl_fee 데이터 삽입 실패.',
                  });
                });
              }

              
              successCount += result.affectedRows;

              
              conn.commit((err) => {
                if (err) {
                  return conn.rollback(() => {
                    conn.release();
                    return res.status(500).send({
                      success: false,
                      message: '커밋 실패.',
                      error: err.message,
                    });
                  });
                }

                conn.release();
                return res.status(200).send({
                  success: true,
                  message: '데이터가 성공적으로 처리되었습니다.',
                  successCount,
                  duplicateCount,
                });
              });
            });
          } else {
            
            conn.commit((err) => {
              if (err) {
                return conn.rollback(() => {
                  conn.release();
                  return res.status(500).send({
                    success: false,
                    message: '커밋 실패.',
                    error: err.message,
                  });
                });
              }

              conn.release();
              return res.status(200).send({
                success: true,
                message: '중복된 데이터만 존재합니다.',
                successCount,
                duplicateCount,
              });
            });
          }
        }
      );
    });
  });
};


exports.delete = (req, res) => {
  const { check } = req.query;

  console.log(check);
  const ids = Object.keys(check)
    .filter((key) => check[key] === 'true') 
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');

  
  const sql = `DELETE FROM qcbot.tbl_frequency WHERE id IN (${placeholders})`;

  conn.query(sql, ids, (err, result) => {
    if (err) {
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '삭제 중 오류가 발생했습니다.',
      });
    }

    return res.status(200).send({
      success: true,
      code: 200,
      msg: '삭제되었습니다.',
    });
  });
};

exports.modify = (req, res) => {
  const { check, frequency } = req.body;

  console.log(req.body);

  
  const ids = Object.keys(check)
    .filter((key) => check[key] === true)
    .map((key) => Number(key)); 

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');
  console.log('Placeholders:', placeholders);
  console.log('IDs:', ids);

  const sql = `UPDATE qcbot.tbl_frequency SET frequency = ? WHERE id IN (${placeholders})`;

  
  conn.query(sql, [frequency, ...ids], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 수정하는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

File: ./quality-admin/routes/v1/auth/index.js
Content:
const router = require('express').Router();
const dao = require('./dao'); 

router.post('/', dao.send);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'auth unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/auth/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();
const nodemailer = require('nodemailer');

const jwt = require('jsonwebtoken');
require('dotenv').config();

const generateAuthCode = () => {
  return String(Math.floor(Math.random() * 1000000)).padStart(6, '0');
};

const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    port: 587,
    host: 'smtp.gmail.com',
    secure: false,
    requireTLS: true,
    auth: {
      user: process.env.GMAIL_ADDRESS,
      pass: process.env.GMAIL_PASSWORD,
    },
  });
};

const createMailOptions = (userEmail, authCode) => {
  return {
    from: process.env.GMAIL_ADDRESS,
    to: userEmail,
    subject: '보건환경연구원 로그인 2차 인증메일입니다.',
    html: `
      <p>계정 보안을 위해 2차 인증이 필요합니다. 아래 인증 코드를 입력하여 로그인 절차를 완료해주세요.</p>
      <br></br>
      <p><strong>인증번호: ${authCode}</strong></p>
      <br></br>
      <p>인증코드는 5분 동안만 유효합니다.<br/>
      인증이 완료되지 않은 경우 새로운 인증코드를 발급받으시기 바랍니다.</p>
    `,
  };
};
exports.send = (req, res) => {
  const { user_email } = req.body;

  if (!user_email) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '이메일을 입력해주세요.',
    });
  }

  const sql = 'SELECT * FROM qcbot.tbl_users WHERE user_email = ?';

  conn.query(sql, [user_email], (err, rows) => {
    if (err) {
      console.error('DB 오류:', err);
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '서버 오류가 발생했습니다.',
      });
    }

    
    if (rows.length === 0) {
      return res.status(400).send({
        success: false,
        code: 400,
        msg: '회원정보가 존재하지 않습니다.',
      });
    }
    console.log(rows[0]);
    
    const authCode = generateAuthCode();
    const transporter = createTransporter();
    const mailOptions = createMailOptions(user_email, authCode);

    transporter.sendMail(mailOptions, (err) => {
      if (err) {
        console.error('메일 전송 오류:', err);
        return res.status(500).send({
          success: false,
          code: 500,
          msg: '메일 전송에 실패했습니다.',
        });
      }

      try {
        const { id, user_email } = rows[0];
        const token = jwt.sign(
          { user_id: id, user_email: user_email },
          process.env.JWT_KEY
        );
        console.log('Generated Token:', token);
        return res.status(200).send({
          jwt: token,
          authcode: authCode,
          success: true,
          code: 200,
          msg: '입력하신 이메일로 인증번호가 발송되었습니다.',
        });
      } catch (error) {
        console.error('토큰 생성 오류:', error);
        return res.status(500).send({
          success: false,
          code: 500,
          msg: '서버 오류가 발생했습니다.',
        });
      }
    });
  });
};

File: ./quality-admin/routes/v1/faq/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/faq/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { filter } = req.query;

  
  const keyword = filter || null;

  sql = `select * from qcbot.tbl_faq where keyword like ifnull(?, keyword) order by id desc`;

  conn.query(sql, [keyword], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.add = (req, res) => {
  const { question, answer, tag } = req.body;

  sql =
    'insert into qcbot.tbl_faq ( question, answer, keyword ) values (?, ?, ?)';

  conn.query(sql, [question, answer, tag], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.modify = (req, res) => {
  const { question, answer, tag, id } = req.body;

  sql = `update qcbot.tbl_faq set question = ?, answer = ?, keyword = ? where id = ?`;

  conn.query(sql, [question, answer, tag, id], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.delete = (req, res) => {
  const { id } = req.query;

  conn.query('delete from qcbot.tbl_faq where id = ?', [id], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

File: ./quality-admin/routes/v1/institute/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.delete('/', dao.delete);
router.patch('/', dao.modify);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/institute/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();
const pool = require('../../../config/db').init();

exports.list = (req, res) => {
  const { fst, nameCheck, regionValue, districtValue, page, pageSize } =
    req.query;

  let category = fst ? `%${fst}%` : null;
  let name = nameCheck ? `%${nameCheck}%` : null;
  let region = regionValue ? `%${regionValue}%` : null;
  let district = districtValue ? `%${districtValue}%` : null;

  
  const pageValue = page ? parseInt(page) : 1;
  const pageSizeValue = pageSize ? parseInt(pageSize) : 8;
  const offset = (pageValue - 1) * pageSizeValue;

  
  const sqlCount = `select count(*) as totalCount from qcbot.tbl_institute
    where
  (category like ifnull(?, category)) and
  (region like ifnull(?, region)) and
  (district like ifnull(?, district)) and
  (name like ifnull(?, name))
  `;
  
  const sql = `select * from qcbot.tbl_institute
    where
  (category like ifnull(?, category)) and
  (region like ifnull(?, region)) and
  (district like ifnull(?, district)) and
  (name like ifnull(?, name))
    order by id desc
    limit ? offset ?
  `;
  
  const sqlCategories = `
  select distinct cast(category as char) as value, 'category' as type from qcbot.tbl_institute
  union
  select distinct cast(region as char) as value, 'region' as type from qcbot.tbl_institute
  union
  select distinct cast(district as char) as value, 'district' as type from qcbot.tbl_institute;
  `;

  
  const queryValues = [category, region, district, name, pageSizeValue, offset];

  conn.query(sqlCategories, (err, categoryResults) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '카테고리를 가져오는 데 실패했습니다.',
      });
    }
    conn.query(sqlCount, queryValues.slice(0, -2), (err, countResult) => {
      if (err) {
        return res.status(403).send({
          success: false,
          msg: '다시 시도해주세요.',
        });
      }
      const totalCount = countResult[0].totalCount;

      conn.query(sql, queryValues, (err, rows) => {
        if (err) {
          return res.status(500).send({
            success: false,
            msg: '데이터를 가져오는 데 실패했습니다.',
          });
        }
        return res.status(200).send({
          success: true,
          datas: rows,
          pageCount: totalCount,
          pageSize: pageSizeValue,
          currentPage: pageValue,
          categories: categoryResults,
        });
      });
    });
  });
};

exports.add = (req, res) => {
  const { institutes } = req.body;
  console.log(institutes);

  const values = institutes.map((institute) => [
    institute.category,
    institute.name,
    institute.director,
    institute.location,
    institute.region,
    institute.district,
    institute.phone,
    institute.fax,
    institute.remarks,
    institute.expiration,
  ]);

  const deleteSql = 'DELETE FROM qcbot.tbl_institute';
  const insertSql =
    'INSERT INTO qcbot.tbl_institute (category, name, director, location, region, district, phone, fax, remarks, expiration) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';

  pool.getConnection((err, conn) => {
    if (err) {
      return res.status(500).send({
        success: false,
        message: '데이터베이스 연결에 실패했습니다.',
      });
    }

    
    conn.beginTransaction((err) => {
      if (err) {
        conn.release();
        return res.status(500).send({
          success: false,
          message: '트랜잭션 시작에 실패했습니다.',
        });
      }

      
      conn.query(deleteSql, (err) => {
        if (err) {
          return conn.rollback(() => {
            conn.release();
            return res.status(500).send({
              success: false,
              message: '기존 데이터 삭제에 실패했습니다.',
            });
          });
        }

        
        const promises = values.map(
          (value) =>
            new Promise((resolve, reject) => {
              conn.query(insertSql, value, (err) => {
                if (err) reject(err);
                else resolve();
              });
            })
        );

        Promise.all(promises)
          .then(() => {
            
            conn.commit((err) => {
              if (err) {
                return conn.rollback(() => {
                  conn.release();
                  return res.status(500).send({
                    success: false,
                    message: '커밋 중 오류가 발생했습니다.',
                  });
                });
              }

              conn.release();
              return res.status(200).send({
                success: true,
                message: '데이터가 성공적으로 업데이트되었습니다.',
              });
            });
          })
          .catch((err) => {
            conn.rollback(() => {
              conn.release();
              return res.status(500).send({
                success: false,
                message: '데이터 삽입 중 오류가 발생했습니다.',
                error: err.message,
              });
            });
          });
      });
    });
  });
};


exports.delete = (req, res) => {
  const { id } = req.query;

  conn.query(
    'delete from qcbot.tbl_institute where id = ?',
    [id],
    (err, row) => {
      if (err) {
        return res.status(500).send({
          success: false,
          msg: '데이터를 가져오는 데 실패했습니다.',
        });
      }
      return res.status(200).send({
        success: true,
        data: row,
      });
    }
  );
};

exports.modify = (req, res) => {
  const {
    id,
    category,
    director,
    district,
    region,
    expiration,
    fax,
    name,
    phone,
    remarks,
  } = req.body;

  sql =
    'update qcbot.tbl_institute set category = ?, director = ?, district = ?, region = ?, expiration = ?, fax = ?, name = ?, phone = ?,  remarks = ? where id = ?';
  conn.query(
    sql,
    [
      category,
      director,
      district,
      region,
      expiration,
      fax,
      name,
      phone,
      remarks,
      id,
    ],
    (err, rows) => {
      if (err) throw err;

      return res.status(200).send({
        success: true,
        code: 200,
        msg: '수정이 완료되었습니다.',
      });
    }
  );
};

File: ./quality-admin/routes/v1/index.js
Content:
const router = require('express').Router();

const users = require('./users');
const faq = require('./faq');
const fee = require('./fee');
const frequency = require('./frequency');
const institute = require('./institute');
const auth = require('./auth');

router.use('/users', users);
router.use('/faq', faq);
router.use('/fee', fee);
router.use('/frequency', frequency);
router.use('/institute', institute);
router.use('/auth', auth);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: `api unknown uri ${req.path}` });
});

module.exports = router;

File: ./quality-admin/routes/v1/users/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.post('/', dao.add);
router.patch('/', dao.modify);
router.delete('/', dao.delete);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin/routes/v1/users/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { user_name, user_role, user_email, user_phone } = req.query;

  let name = user_name ? `%${user_name}%` : null;
  let role = user_role ? `%${user_role}%` : null;
  let email = user_email ? `%${user_email}%` : null;
  let phone = user_phone ? `%${user_phone}%` : null;

  sql = `select * from qcbot.tbl_users
   where
    (user_name like ifnull(?, user_name)) and
    (user_role like ifnull(?, user_role)) and
    (user_email like ifnull(?, user_email)) and
    (user_phone like ifnull(?, user_phone))
  order by id desc
  `;

  conn.query(sql, [name, role, email, phone], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.add = (req, res) => {
  const { name, role, email, phoneNo } = req.body;

  sql =
    'insert into qcbot.tbl_users ( user_name, user_role, user_email, user_phone ) values (?, ?, ?, ?)';

  conn.query(sql, [name, role, email, phoneNo], (err, row) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 저장하는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      data: row,
    });
  });
};

exports.delete = (req, res) => {
  const { check } = req.body; 

  const ids = Object.keys(check)
    .filter((key) => check[key] === true) 
    .map((key) => Number(key));

  
  if (ids.length === 0) {
    return res.status(400).send({
      success: false,
      code: 400,
      msg: '선택된 항목이 없습니다.',
    });
  }

  
  const placeholders = ids.map(() => '?').join(',');

  
  const sql = `DELETE FROM qcbot.tbl_users WHERE id IN (${placeholders})`;

  conn.query(sql, ids, (err, result) => {
    if (err) {
      return res.status(500).send({
        success: false,
        code: 500,
        msg: '삭제 중 오류가 발생했습니다.',
      });
    }

    return res.status(200).send({
      success: true,
      code: 200,
      msg: '삭제되었습니다.',
    });
  });
};

exports.modify = (req, res) => {
  const { id, user_email, user_name, user_phone, user_role } = req.body;

  sql =
    'update qcbot.tbl_users set user_email = ?, user_name = ?, user_phone = ?, user_role = ? where id = ?';
  conn.query(
    sql,
    [user_email, user_name, user_phone, user_role, id],
    (err, rows) => {
      if (err) throw err;

      return res.status(200).send({
        success: true,
        code: 200,
        msg: '수정이 완료되었습니다.',
      });
    }
  );
};

File: ./quality-admin/routes/users.js
Content:
var express = require('express');
var router = express.Router();

router.get('/', function (req, res, next) {
  res.send('respond with a resource');
});

module.exports = router;

File: ./quality-admin/routes/index.js
Content:
var express = require('express');
var router = express.Router();
const v1 = require('./v1');

router.get('/', function (req, res, next) {
  res.render('index', { title: 'Express' });
  next();
});

router.use('/v1', v1);

module.exports = router;

File: ./quality-admin/app.js
Content:
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

const db = require('./config/db');

var app = express();
const cors = require('cors');

const conn = db.init();
db.connect(conn);

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(cors());
app.use('/', indexRouter);
app.use('/users', usersRouter);

module.exports = app;

File: ./quality-admin/src/component/Fee/FeeComponent.tsx
Content:
import { NextPage } from 'next';
import { useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';


import { FeeType } from '../../../type/feeType';

import { IoSearchOutline } from 'react-icons/io5';

import SelectCategory from '../Common/SelectCategory';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import PaginationComponent from '../Common/Pagination';
import RefreshBtn from '../Common/Buttons/RefreshBtn';
import StyledDropdown from '../Common/Dropdown/StyledDropdown';
import Numberdown from '../Common/Dropdown/Numberdown';
import handleDwn from '@/utils/downloadData';
import SortingTable from '../Common/Table/SortingTable';

interface FeeComponentProps {
  feeData: FeeType;
  inputRef: React.ForwardedRef<HTMLInputElement>;
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
  setEditModal: React.Dispatch<React.SetStateAction<boolean>>;
  optionState: string;
  setOptionState: React.Dispatch<React.SetStateAction<string>>;
  handleSearch: () => void;
  checkedItems: { [key: number]: boolean };
  selectAll: boolean;
  handleChangeItem: (
    idx: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleDelete: () => void;
}

const FeeComponent: NextPage<FeeComponentProps> = ({
  feeData,
  inputRef,
  setEditModal,
  optionState,
  setOptionState,
  handleSearch,
  checkedItems,
  selectAll,
  handleSelectAll,
  handleChangeItem,
  handleDelete,
}) => {
  
  const { datas, currentPage, pageCount, pageSize } = feeData;

  const router = useRouter();
  
  const [isOpen, setIsOpen] = useState(false);
  
  
  const tableHeader = [
    { key: 'product', label: '제품', numeric: false },
    { key: 'name', label: '검사항목', numeric: false },
    { key: 'fee', label: '수수료', numeric: false },
  ];

  
  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  
  const handleClick = async () => {
    try {
      const params = {
        ...router.query,
        page: 1,
        pageSize: pageCount,
      };

      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        {
          params,
        }
      );

      if (res.status === 200) {
        const dwnDatas = res.data.datas;
        const rows = dwnDatas.map((data: any) => {
          return {
            product: data.product,
            name: data.name,
            fee: data.fee,
          };
        });
        const type = '검사항목 및 수수료';
        handleDwn(['제품명', '검사항목', '수수료'], rows, type);
      } else {
        alert('잠시 후 다시 시도해주세요.');
      }
    } catch (error: unknown) {
      console.log(error);
      return alert('잠시 후 다시 시도해주세요.');
    }
  };

  return (
    <FeeBase>
      <H1>검사 항목 및 수수료</H1>
      <SelectCategory />
      <FaqContainer>
        <FaqBox>
          <Numberdown />
          <StyledDropdown
            title={optionState}
            options={['제품명', '검사항목', '수수료']}
            selectedOption={optionState}
            isOpen={isOpen}
            toggle={() => {
              setIsOpen(!isOpen);
            }}
            onSelectedOption={setOptionState}
          />
          <InputBox>
            <FaqLabel>
              <SearchIcon />
            </FaqLabel>
            <FaqInput ref={inputRef} onKeyDown={handleOnKeyPress} />
            <RefreshBtn />
          </InputBox>
        </FaqBox>

        <BtnBox>
          <ApplyBtn onClick={handleClick}>엑셀 다운로드</ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setEditModal(true);
            }}
          >
            수수료변경
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleDelete();
            }}
          >
            삭제
          </ApplyBtn>
        </BtnBox>
      </FaqContainer>
      <SortingTable
        headers={tableHeader}
        data={datas}
        checkedItems={checkedItems}
        handleChangeItem={handleChangeItem}
        selectAll={selectAll}
        handleSelectAll={handleSelectAll}
      />
      <PaginationComponent
        currentPage={currentPage}
        pageCount={pageCount}
        pageSize={pageSize}
      />
    </FeeBase>
  );
};

export default FeeComponent;

const FeeBase = styled.div``;
const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;

const FaqContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 16px;
`;

const FaqBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  margin-right: 12px;
`;

const Select = styled.select`
  width: 120px;
  height: 42px;
  padding: 0 12px;
  margin-right: 8px;
  border: 1px solid #ddd;
  border-radius: 5px;
  color: #757575;
  font-size: 14px;
  cursor: pointer;
`;

const Option = styled.option``;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 37px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const FaqInput = styled.input`
  width: 250px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const FaqLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const BtnBox = styled.div`
  display: flex;
`;

File: ./quality-admin/src/component/Fee/AddFee.tsx
Content:
import { useState, useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface AddFeeProps {
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const AddFee = ({ setAddModal }: AddFeeProps) => {
  const router = useRouter();
  const productRef = useRef<HTMLInputElement>(null);
  const nameRef = useRef<HTMLInputElement>(null);
  const feeRef = useRef<HTMLInputElement>(null);
  
  const handleAdd = async () => {
    let body = {
      product: productRef.current?.value,
      name: nameRef.current?.value,
      fee: Number(feeRef.current?.value),
    };

    if (Object.values(body).some(value => !value)) {
      return alert('내용을 입력해주세요');
    }

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        body
      );

      if (res.status === 200) {
        setAddModal(false);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 400) {
          alert(`${errorMessage}`);
        } else if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  };
  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사항목 및 수수료 등록</H2>
          <CloseBtn
            onClick={() => {
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>제품명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={productRef}
                      placeholder="제품명을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>검사항목</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={nameRef}
                      placeholder="검사항목을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>수수료</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      type="number"
                      ref={feeRef}
                      placeholder="수수료를 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddFee;

const AddBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 24px;
  padding: 0 3px;
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 8px 0;
    border: none;
  }
`;

const AddInput = styled.input`
  width: 100%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Fee/EditFee.tsx
Content:
import { useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface EditFeeProps {
  checkedItems: { [key: number]: boolean };
  setOpenToast: React.Dispatch<React.SetStateAction<boolean>>;
  setEditModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const EditFee = ({
  checkedItems,
  setOpenToast,
  setEditModal,
}: EditFeeProps) => {
  const router = useRouter();
  const feeRef = useRef<HTMLInputElement>(null);

  const handleModify = async () => {
    let body = {
      check: checkedItems,
      fee: feeRef?.current?.value,
    };
    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        body
      );

      if (res.status === 200) {
        setEditModal(false);
        router.replace(router.asPath);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else if (statusCode === 501) {
          setEditModal(false);
          setOpenToast(true);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };
  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사수수료 변경</H2>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>변경수수료</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      type="number"
                      placeholder="수수료를 입력해주세요"
                      ref={feeRef}
                    />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              setEditModal(false);
            }}
          >
            취소
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleModify();
            }}
          >
            변경
          </ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default EditFee;

const AddBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;


const Body = styled.div`
  margin: 16px 0 10px;
  padding: 10px 5px;
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 8px 0;
    border: none;
  }
`;

const AddInput = styled.input`
  width: 100%;
  height: 40px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  text-align: center;
  font-size: 14px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const AddSelectBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Frequency/AddFrequency.tsx
Content:
import { NextPage } from 'next';
import { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';

import { AddFrequencyType } from '../../../type/frequencyType';


interface AddFrequencyProps {
  scdOptions: string[];
  trdOptions: string[];
  productOptions: string[];
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
  getCategories: (value: string) => void;
}

const AddFrequency: NextPage<AddFrequencyProps> = ({
  scdOptions,
  trdOptions,
  productOptions,
  setAddModal,
  getCategories,
}) => {
  const router = useRouter();
  const [addState, setAddState] = useState<AddFrequencyType>({
    fst: null,
    scd: null,
    trd: null,
    product: null,
    frequency: null,
  });
  
  const handleAdd = async () => {
    if (Object.values(addState).includes('')) {
      return alert('선택하지 않은 항목이 있습니다.');
    }
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        addState
      );

      if (res.status === 200) {
        setAddModal(false);
        router.replace(router.asPath);
      }
    } catch (err) {
      console.log(err);
    }
  };

  
  const resetState = () => {
    setAddState({
      fst: '', 
      scd: '', 
      trd: '', 
      product: '', 
      frequency: '', 
    });
  };

  
  useEffect(() => {
    resetState(); 
  }, []);

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사대상 및 주기 등록</H2>
          <CloseBtn
            onClick={() => {
              resetState();
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>대분류</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          fst: e.target.value,
                          scd: '', 
                          trd: '', 
                          product: '',
                          frequency: '',
                        });
                        getCategories(e.target.value); 
                      }}
                    >
                      <Option disabled selected>
                        -- 대분류 --
                      </Option>
                      <Option>식품</Option>
                      <Option>축산물</Option>
                      <Option>기구 및 용기</Option>
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>중분류</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.scd || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          scd: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 중분류 --
                      </Option>
                      {scdOptions.map((scdOption: string) => {
                        return <Option>{scdOption}</Option>;
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>소분류</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.trd || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          trd: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 소분류 --
                      </Option>
                      {trdOptions.map((trdOption: string, idx: number) => {
                        return (
                          <Option value={trdOption} key={idx}>
                            {trdOption}
                          </Option>
                        );
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>제품</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.product || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          product: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 제품 --
                      </Option>
                      {productOptions.map(
                        (productOption: string, idx: number) => {
                          return (
                            <Option value={productOption} key={idx}>
                              {productOption}
                            </Option>
                          );
                        }
                      )}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>검사주기</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      value={addState.frequency || ''}
                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {
                        setAddState({
                          ...addState,
                          frequency: e.target.value,
                        });
                      }}
                    >
                      <Option disabled value="">
                        -- 검사주기 --
                      </Option>
                      <Option>1개월마다 1회이상</Option>
                      <Option>2개월마다 1회이상</Option>
                      <Option>3개월마다 1회이상</Option>
                      <Option>6개월마다 1회이상</Option>
                      <Option>9개월마다 1회이상</Option>
                    </Select>
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddFrequency;

const AddBase = styled.div`
  width: 490px;
  padding: 20px 18px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 24px;
  padding: 0 3px;
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    display: flex;
    justify-content: flex-end;
    border: none;
    padding: 8px 0;
  }
`;

const Select = styled.select`
  width: 370px;
  height: 36px;
  display: flex;
  align-items: center;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  cursor: pointer;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-all;
`;

const Option = styled.option``;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Frequency/FrequencyComponent.tsx
Content:
import { NextPage } from 'next';
import { useEffect, useRef, useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import handleSearch from '@/utils/handleSearch';

import { FrequencyType } from '../../../type/frequencyType';

import { IoSearchOutline } from 'react-icons/io5';

import SelectCategory from '../Common/SelectCategory';
import ApplyBtn from '../Common/Buttons/ApplyBtn';
import PaginationComponent from '../Common/Pagination';
import RefreshBtn from '../Common/Buttons/RefreshBtn';
import handleExcelDwn from '@/utils/handleDwn';
import Numberdown from '../Common/Dropdown/Numberdown';
import Dropdown from '../Common/Dropdown/Dropdown';
import handleDwn from '@/utils/downloadData';
import SortingTable from '../Common/Table/SortingTable';

interface FrequencyProps {
  frequencyData: FrequencyType;
  checkedItems: { [key: number]: boolean };
  scdOptions: string[];
  setModifyModal: React.Dispatch<React.SetStateAction<boolean>>;
  setOpenUpld: React.Dispatch<React.SetStateAction<boolean>>;
  selectAll: boolean;
  handleChangeItem: (
    idx: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleDelete: () => void;
}

const FrequencyComponent: NextPage<FrequencyProps> = ({
  handleDelete,
  checkedItems,
  frequencyData,
  scdOptions,
  setModifyModal,
  setOpenUpld,
  selectAll,
  handleSelectAll,
  handleChangeItem,
}) => {
  const router = useRouter();
  
  const { currentPage, pageCount, pageSize, datas } = frequencyData;
  
  const [isOpen, setIsOpen] = useState({
    scd: false,
  });
  const [scdOption, setScdOption] = useState('-- 중분류 --');
  
  const { handleMoveRoute } = handleSearch();
  
  const nameRef = useRef<HTMLInputElement>(null);
  
  const tableHeader = [
    { key: 'scd_category', label: '중분류', numeric: false },
    { key: 'product', label: '제품', numeric: false },
    { key: 'frequency', label: '검사주기', numeric: false },
  ];

  const handleOnKeyPress = (
    e:
      | React.KeyboardEvent<HTMLInputElement>
      | React.KeyboardEvent<HTMLSelectElement>
  ) => {
    if (e.key === 'Enter') {
      const selectedName = 'productName';
      const selectedValue = nameRef.current?.value;
      handleMoveRoute(selectedName, selectedValue);
    }
  };

  useEffect(() => {
    setScdOption('-- 중분류 --');
  }, [router.query.fst]);

  
  const handleExcel = () => {
    const column = [
      '대분류',
      '중분류',
      '제품',
      '검사항목',
      '검사금액',
      '검사주기',
      '비고',
    ];
    const rows = [
      {
        fst_category: '식품업',
        scd_category: '농산가공식품류',
        product: '찐쌀',
        name: '카드뮴',
        fee: '76700',
        frequency: '1개월마다 1회이상',
        remarks: '비고내용',
      },
      {
        fst_category: '식품업',
        scd_category: '농산가공식품류',
        product: '찐쌀',
        name: '납',
        fee: '76700',
        frequency: '1개월마다 1회이상',
        remarks: '',
      },
    ];
    const type = '검사항목 주기 및 수수료 양식';
    handleExcelDwn(column, rows, type);
  };

  
  const handleClick = async () => {
    try {
      const params = {
        ...router.query,
        page: 1,
        pageSize: pageCount,
      };

      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        {
          params,
        }
      );

      if (res.status === 200) {
        const dwnDatas = res.data.datas;
        const rows = dwnDatas.map((data: any) => {
          return {
            fst_category: data.fst_category,
            scd_category: data.scd_category,
            product: data.product,
            frequency: data.frequency,
          };
        });
        const type = '검사 대상 및 주기';
        handleDwn(['대분류', '중분류', '제품', '검사주기'], rows, type);
      } else {
        alert('잠시 후 다시 시도해주세요.');
      }
    } catch (error: unknown) {
      console.log(error);
      return alert('잠시 후 다시 시도해주세요.');
    }
  };

  return (
    <FrequencyBase>
      <H1>검사 대상 및 주기</H1>
      <SelectCategory />
      <EntityContainer>
        <FaqBox>
          <SOBox>
            <Numberdown />
            <Dropdown
              name="scd"
              title={scdOption}
              options={scdOptions}
              selectedOption={scdOption}
              isOpen={isOpen.scd}
              toggle={() => {
                setIsOpen({
                  scd: !isOpen.scd,
                });
              }}
              onSelectedOption={setScdOption}
            />
          </SOBox>
          <InputBox>
            <EntityLabel>
              <SearchIcon />
            </EntityLabel>
            <EntityInput
              placeholder="제품명"
              ref={nameRef}
              onKeyDown={handleOnKeyPress}
            />
            <RefreshBtn />
          </InputBox>
        </FaqBox>

        <BtnBox>
          <ApplyBtn onClick={handleClick}>엑셀 다운로드</ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setOpenUpld(true);
            }}
          >
            신규추가
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleDelete();
            }}
          >
            삭제
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setModifyModal(true);
            }}
          >
            주기변경
          </ApplyBtn>
          <ApplyBtn onClick={handleExcel}>양식 다운로드</ApplyBtn>
        </BtnBox>
      </EntityContainer>
      <SortingTable
        headers={tableHeader}
        data={datas}
        checkedItems={checkedItems}
        handleChangeItem={handleChangeItem}
        selectAll={selectAll}
        handleSelectAll={handleSelectAll}
      />
      <PaginationComponent
        currentPage={currentPage}
        pageCount={pageCount}
        pageSize={pageSize}
      />
    </FrequencyBase>
  );
};

export default FrequencyComponent;

const FrequencyBase = styled.div``;

const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;

const EntityContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 16px;
`;

const FaqBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  display: flex;
  align-items: center;
  margin-right: 12px;
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  width: 230px;
  height: 42px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const EntityInput = styled.input`
  width: 240px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const EntityLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const BtnBox = styled.div`
  display: flex;
`;

File: ./quality-admin/src/component/Frequency/ModifyFrequency.tsx
Content:
import { NextPage } from 'next';
import { useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import Modal from '../Common/Modal';

import { TfiClose } from 'react-icons/tfi';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface ModifyFrequencyProps {
  checkedItems: { [key: number]: boolean };
  setModifyModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const ModifyFrequency: NextPage<ModifyFrequencyProps> = ({
  checkedItems,
  setModifyModal,
}) => {
  const router = useRouter();
  const [optionState, setOptionState] = useState<string | null>('');
  const frequency = [
    '1개월마다 1회 이상',
    '2개월마다 1회 이상',
    '3개월마다 1회 이상',
    '6개월마다 1회 이상',
    '9개월마다 1회 이상',
  ];

  const handleModify = async () => {
    let body = {
      check: checkedItems,
      frequency: optionState,
    };
    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        body
      );
      if (res.status === 200) {
        router.replace(router.asPath);
        setModifyModal(false);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };

  return (
    <Modal>
      <ModifyBase>
        <Heading>
          <H2>검사주기 일괄 변경</H2>
          <CloseBtn
            onClick={() => {
              setModifyModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <SelectBox>
            <SelectH4>검사주기</SelectH4>
            <Select
              onChange={(e) => {
                setOptionState(e.target.value);
              }}
            >
              {frequency.map((fre, idx) => {
                return <Option key={idx}>{fre}</Option>;
              })}
            </Select>
          </SelectBox>
        </Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              handleModify();
            }}
          >
            저장 및 닫기
          </ApplyBtn>
        </BtnBox>
      </ModifyBase>
    </Modal>
  );
};
export default ModifyFrequency;

const ModifyBase = styled.div`
  width: 420px;
  padding: 20px 18px;
`;


const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 24px;
  padding: 0 3px;
`;

const SelectBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const SelectH4 = styled.h4``;

const Select = styled.select`
  width: 300px;
  height: 36px;
  display: flex;
  align-items: center;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  cursor: pointer;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-all;
`;

const Option = styled.option``;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 17px;
`;

File: ./quality-admin/src/component/FAQ/AddFaq.tsx
Content:
import { useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface AddFaqProps {
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const AddFaq = ({ setAddModal }: AddFaqProps) => {
  const router = useRouter();
  const questionRef = useRef<HTMLTextAreaElement>(null);
  const answerRef = useRef<HTMLTextAreaElement>(null);
  const tagRef = useRef<HTMLTextAreaElement>(null);

  const handleAdd = useCallback(async () => {
    let body = {
      question: questionRef?.current?.value,
      answer: answerRef?.current?.value,
      tag: tagRef?.current?.value,
    };

    if (Object.values(body).some(value => !value)) {
      return alert('내용을 입력해주세요');
    }

    
    const specialCharPattern = /[!@#$%^&*(),.?":{}|<>]/;

    
    if (specialCharPattern.test(tagRef?.current!.value)) {
      return alert('특수문자는 사용할 수 없습니다.');
    }

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`,
        body
      );
      if (res.status === 200) {
        console.log(res);
        setAddModal(false);
      }
    } catch (err) {
      console.log(err);
    } finally {
      router.replace(router.asPath);
    }
  }, [questionRef, answerRef, tagRef]);

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>자주묻는질문 등록</H2>
          <CloseBtn
            onClick={() => {
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <Menu>
            <Item>
              <Label>질문</Label>
              <AddMemo placeholder="질문을 작성해주세요" ref={questionRef} />
            </Item>
            <Item>
              <Label>답변</Label>
              <AddMemo placeholder="답변을 작성해주세요" ref={answerRef} />
            </Item>
            <Item>
              <Label>태그</Label>
              <TagMemo
                placeholder="식품업,축산업,자가품질검사,키워드"
                ref={tagRef}
              />
            </Item>
          </Menu>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddFaq;

const AddBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 16px;
`;

const Menu = styled.ul``;

const Item = styled.li`
  padding: 10px 0;
  &:first-child {
    
  }
`;

const Label = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 120px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;

const TagMemo = styled(AddMemo)`
  height: 80px;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/FAQ/DeleteFaq.tsx
Content:
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import { ModalFaqType } from '../../../type/faqType';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface DeleteFaqProps {
  deleteModal: Partial<ModalFaqType>;
  setDeleteModal: React.Dispatch<React.SetStateAction<Partial<ModalFaqType>>>;
}

const DeleteFaq = ({ deleteModal, setDeleteModal }: DeleteFaqProps) => {
  const router = useRouter();
  const handleDelete = async () => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`,
        {
          params: {
            id: deleteModal.id,
          },
        }
      );
      if (res.status === 200) {
        setDeleteModal({
          ...deleteModal,
          modal: false,
        });
      }
    } catch (err) {
      console.log(err);
    } finally {
      router.replace(router.asPath);
    }
  };
  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>삭제하시겠어요?</H2>
          <CloseBtn
            onClick={() => {
              setDeleteModal({
                ...deleteModal,
                modal: false,
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>{deleteModal.question}</Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              setDeleteModal({
                ...deleteModal,
                modal: false,
              });
            }}
          >
            취소
          </ApplyBtn>
          <ApplyBtn
            onClick={() => {
              handleDelete();
            }}
          >
            삭제
          </ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default DeleteFaq;

const AddBase = styled.div`
  width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;

const Body = styled.div`
  background-color: #f5faf7;
  margin: 24px 0 20px;
  padding: 24px 12px;
  color: #20bb59;
  border-radius: 5px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-all;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/FAQ/ModifyFaq.tsx
Content:
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import { ModalFaqType } from '../../../type/faqType';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface ModifyFaqProps {
  modifyModal: ModalFaqType;
  setModifyModal: React.Dispatch<React.SetStateAction<ModalFaqType>>;
}

const ModifyFaq = ({ modifyModal, setModifyModal }: ModifyFaqProps) => {
  const router = useRouter();
  const handleModify = async () => {
    let body = {
      id: modifyModal.id,
      question: modifyModal.question,
      answer: modifyModal.answer,
      tag: modifyModal.tag,
    };

    
    const specialCharPattern = /[!@#$%^&*(),.?":{}|<>]/;

    
    if (specialCharPattern.test(modifyModal.tag)) {
      return alert('특수문자는 사용할 수 없습니다.');
    }

    if (Object.values(body).some(value => !value)) {
      return alert('내용을 입력해주세요');
    }

    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`,
        body
      );
      if (res.status === 200) {
        setModifyModal({
          ...modifyModal,
          modal: false,
        });
      }
    } catch (err) {
      console.log(err);
    } finally {
      router.replace(router.asPath);
    }
  };

  return (
    <Modal>
      <ModifyBase>
        <Heading>
          <H2>자주묻는질문 등록</H2>
          <CloseBtn
            onClick={() => {
              setModifyModal({
                ...modifyModal,
                modal: false,
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <Menu>
            <Item>
              <Label>질문</Label>
              <AddMemo
                placeholder="질문을 작성해주세요"
                value={modifyModal.question ?? ''}
                onChange={(e) =>
                  setModifyModal({
                    ...modifyModal,
                    question: e.target.value,
                  })
                }
              />
            </Item>
            <Item>
              <Label>답변</Label>
              <AddMemo
                placeholder="답변을 작성해주세요"
                value={modifyModal.answer ?? ''}
                onChange={(e) =>
                  setModifyModal({
                    ...modifyModal,
                    answer: e.target.value,
                  })
                }
              />
            </Item>
            <Item>
              <Label>태그</Label>
              <TagMemo
                placeholder="#식품업 #축산업 #자가품질검사 #키워드"
                value={modifyModal.tag ?? ''}
                onChange={(e) =>
                  setModifyModal({
                    ...modifyModal,
                    tag: e.target.value,
                  })
                }
              />
            </Item>
          </Menu>
        </Body>
        <BtnBox>
          <ApplyBtn
            onClick={() => {
              handleModify();
            }}
          >
            저장 및 닫기
          </ApplyBtn>
        </BtnBox>
      </ModifyBase>
    </Modal>
  );
};

export default ModifyFaq;

const ModifyBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 16px;
`;

const Menu = styled.ul``;

const Item = styled.li`
  padding: 10px 0;
  &:first-child {
    
  }
`;

const Label = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 120px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;

const TagMemo = styled(AddMemo)`
  height: 80px;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/FAQ/FaqComponent.tsx
Content:
import { NextPage } from 'next';
import React, { useState } from 'react';
import styled from 'styled-components';

import { FaqType, ModalFaqType } from '../../../type/faqType';

import { IoSearchOutline, IoTrashOutline } from 'react-icons/io5';
import { LuPencil } from 'react-icons/lu';

import RefreshBtn from '../Common/Buttons/RefreshBtn';

interface FaqComponentProps {
  faqData: FaqType[];
  emailRef: React.RefObject<HTMLInputElement>;
  handleOnkey: () => void;
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
  setDeleteModal: React.Dispatch<React.SetStateAction<Partial<ModalFaqType>>>;
  setModifyModal: React.Dispatch<React.SetStateAction<ModalFaqType>>;
}

const FaqComponent: NextPage<FaqComponentProps> = ({
  faqData,
  emailRef,
  handleOnkey,
  setAddModal,
  setDeleteModal,
  setModifyModal,
}) => {
  
  const [openListId, setOpenListId] = useState<Array<number>>([]);
  
  const uniqueFaqData = Array.from(
    new Map(faqData.map((item) => [item.question, item])).values()
  );
  
  const handleAccordion = (id: number) => {
    if (openListId.includes(id)) {
      
      setOpenListId(openListId.filter((prevId) => prevId !== id));
    } else {
      
      setOpenListId([...openListId, id]);
    }
  };

  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleOnkey();
    }
  };

  return (
    <FaqBase>
      <H1>자주 묻는 질문</H1>
      <FaqContainer>
        <InputBox>
          <FaqLabel>
            <SearchIcon />
          </FaqLabel>
          <FaqInput
            placeholder="키워드를 입력하여 검색해주세요"
            ref={emailRef}
            onKeyDown={handleOnKeyPress}
          />
          <RefreshBtn />
        </InputBox>
        <AddBtn
          onClick={() => {
            setAddModal(true);
          }}
        >
          신규추가
        </AddBtn>
      </FaqContainer>
      <FAQMenu>
        {uniqueFaqData.length === 0 && (
          <NoneItem>
            <NoneIcon>🗒️</NoneIcon>
            <NoneP>검색결과가 없습니다</NoneP>
          </NoneItem>
        )}
        {uniqueFaqData.map((data) => {
          return (
            <FAQItem key={data.id}>
              <QuestionContent isopen={openListId.includes(data.id)}>
                <Question
                  onClick={() => {
                    handleAccordion(data.id);
                  }}
                  isopen={openListId.includes(data.id)}
                >
                  <QuestionP>{data.question}</QuestionP>
                </Question>
                <IconBtns>
                  <DeleteBtn
                    onClick={() => {
                      setDeleteModal({
                        id: data.id,
                        question: data.question,
                        modal: true,
                      });
                    }}
                  >
                    <DeleteIcon />
                  </DeleteBtn>
                  <EditBtn
                    onClick={() => {
                      setModifyModal({
                        id: data.id,
                        question: data.question,
                        answer: data.answer,
                        tag: data.keyword,
                        modal: true,
                      });
                    }}
                  >
                    <EditIcon />
                  </EditBtn>
                </IconBtns>
              </QuestionContent>
              {openListId.includes(data.id) && <Answer>{data.answer}</Answer>}
            </FAQItem>
          );
        })}
      </FAQMenu>
    </FaqBase>
  );
};

export default FaqComponent;

const FaqBase = styled.div``;

const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;

const FaqContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 16px;
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  border: 1px solid #c8c8c8;
  border-radius: 5px;
`;

const FaqInput = styled.input`
  width: 230px;
  height: 100%;
  margin-left: 8px;
  border: none;
`;

const FaqLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const AddBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  border-radius: 7px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);

  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
`;


const FAQMenu = styled.ul`
  margin-top: 12px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 12px;
`;

const NoneItem = styled.li`
  width: 100%;
  min-height: 520px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  color: ${(props) => props.theme.gray_07};
`;

const NoneIcon = styled.i`
  font-size: 22px;
`;

const NoneP = styled.p`
  font-size: 16px;
  margin-top: 12px;
`;

const FAQItem = styled.li`
  line-height: 1.5;
  border-bottom: 1px solid ${(props) => props.theme.gray_03};
  &:first-child {
    border-radius: 12px 12px 0 0;
  }
  &:last-child {
    border-radius: 0 0 12px 12px;
    border-bottom: none;
  }
`;

const QuestionContent = styled.div<{ isopen: boolean }>`
  background-color: ${(props) => (props.isopen ? '#effcf3' : 'transparent')};
  display: flex;
  align-items: center;
`;

const Question = styled.div<{ isopen: boolean }>`
  position: relative;
  width: 90%;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 16px 24px;
  cursor: pointer;
  font-weight: 500;
  color: ${(props) => (props.isopen ? '#0e4f26' : '2b2d3b')};
  &:after {
    content: '';
    position: absolute;
    top: ${(props) => (props.isopen ? '24px' : '20px')};
    right: 20px;
    width: 8px;
    height: 8px;
    border: 1px solid #555;
    border-left: 0;
    border-top: 0;
    transform: ${(props) =>
      props.isopen ? 'rotate(-135deg)' : 'rotate(-315deg)'};
  }
`;

const QuestionP = styled.p`
  width: 95%;
  font-weight: 700;
`;


const IconBtns = styled.div`
  width: 10%;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 0 12px;
`;

const DeleteBtn = styled.button`
  background-color: transparent;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  color: ${(props) => props.theme.primary_01};
  font-size: 20px;
  &:hover {
    background-color: #f5faf7;
  }
`;

const EditBtn = styled(DeleteBtn)`
  margin-left: 8px;
`;

const DeleteIcon = styled(IoTrashOutline)``;

const EditIcon = styled(LuPencil)``;

const Answer = styled.div`
  
  padding: 16px 24px;
  color: #757575;
  &:last-child {
    border-radius: 0 0 12px 12px;
  }
`;

File: ./quality-admin/src/component/Institute/InstituteComponent.tsx
Content:
import { NextPage } from 'next';
import { useState, useCallback, useRef } from 'react';
import styled from 'styled-components';
import axios from 'axios';

import { useRouter } from 'next/router';

import { InstituteType, ModalInstituteType } from '../../../type/instituteType';

import { TableBody, TableRow, TableCell } from '@mui/material';

import { IoSearchOutline, IoTrashOutline } from 'react-icons/io5';
import { LuPencil } from 'react-icons/lu';


import CommonTable from '../Common/Table/CommonTable';
import AddInstitute from './AddInstitute';
import ApplyBtn from '../Common/Buttons/ApplyBtn';
import PaginationComponent from '../Common/Pagination';
import RefreshBtn from '../Common/Buttons/RefreshBtn';
import ModifyInstitute from './ModifyInstitute';
import handleExcelDwn from '@/utils/handleDwn';
import Numberdown from '../Common/Dropdown/Numberdown';
import Dropdown from '../Common/Dropdown/Dropdown';
import handleDwn from '@/utils/downloadData';

interface InstituteComponentProps {
  instituteData: InstituteType;
  setOpenUpld: React.Dispatch<React.SetStateAction<boolean>>;
}

const InstituteComponent: NextPage<InstituteComponentProps> = ({
  instituteData,
  setOpenUpld,
}) => {
  const router = useRouter();
  const inputRef = useRef<HTMLInputElement>(null);
  const { datas, currentPage, pageCount, pageSize, categories } = instituteData;
  const [isOpen, setIsOpen] = useState({
    fst: false,
    scd: false,
    trd: false,
  });
  const [fstOption, setFstOption] = useState('검사분야');
  const [scdOption, setScdOption] = useState('-- 도/시 --');
  const [trdOption, setTrdOption] = useState('-- 시/군/구 --');

  const [addModal, setAddModal] = useState<boolean>(false);
  const [modifyModal, setModifyModal] = useState<ModalInstituteType>({
    modal: false,
    data: {
      id: null,
      category: null,
      director: null,
      district: null,
      region: null,
      expiration: null,
      fax: null,
      location: null,
      name: null,
      phone: null,
      remarks: null,
    },
  });

  
  const categoryOptions = categories
    .filter((item) => item.type === 'category')
    .map((item) => item.value);
  
  const regionOptions = categories
    .filter((item) => item.type === 'region')
    .map((item) => item.value);
  
  const districtOptions = categories
    .filter((item) => item.type === 'district')
    .map((item) => item.value);

  const tableHeader: string[] = [
    '검사분야',
    '검사기관',
    '도/시',
    '시/군/구',
    '연락처',
    '팩스',
    '삭제',
    '수정',
  ];

  const handleDelete = async (id: number) => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        {
          params: {
            id: id,
          },
        }
      );
      if (res.status === 200) {
        router.replace(router.asPath);
      }
    } catch (err) {
      console.log(err);
    }
  };

  console.log(datas);
  const tableBody = datas.map((data, idx) => {
    return (
      <TableBody key={data.id}>
        <StyledTableRow iseven={idx % 2 === 0}>
          <StyledTableCell>{data.category}</StyledTableCell>
          <StyledTableCell>{data.name}</StyledTableCell>
          <StyledTableCell>{data.region}</StyledTableCell>
          <StyledTableCell>{data.district}</StyledTableCell>
          <StyledTableCell>{data.phone}</StyledTableCell>
          <StyledTableCell>{data.fax}</StyledTableCell>
          <StyledTableCell>
            <IconBtns>
              <DeleteBtn
                onClick={() => {
                  handleDelete(data.id);
                }}
              >
                <DeleteIcon />
              </DeleteBtn>
            </IconBtns>
          </StyledTableCell>
          <StyledTableCell>
            <IconBtns>
              <EditBtn
                onClick={() => {
                  setModifyModal({
                    data: data,
                    modal: true,
                  });
                }}
              >
                <EditIcon />
              </EditBtn>
            </IconBtns>
          </StyledTableCell>
        </StyledTableRow>
      </TableBody>
    );
  });

  
  const handleOnkey = useCallback(() => {
    router.push({
      pathname: router.pathname,
      query: {
        ...router.query, 
        nameCheck: inputRef.current?.value, 
      },
    });
  }, [router]);

  
  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleOnkey();
    }
  };

  
  const handleClick = async () => {
    try {
      const params = {
        ...router.query,
        page: 1,
        pageSize: pageCount,
      };

      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        {
          params,
        }
      );

      if (res.status === 200) {
        const dwnDatas = res.data.datas;
        const rows = dwnDatas.map((data: any) => {
          return {
            category: data.category,
            name: data.name,
            director: data.director,
            location: data.location,
            region: data.region,
            district: data.district,
            phone: data.phone,
            fax: data.fax,
            remarks: data.remarks,
            expiration: data.expiration,
          };
        });
        const type = '검사기관';
        handleDwn(
          [
            '검사분야',
            '검사기관',
            '대표자명',
            '상세주소',
            '도/시',
            '시/군/구',
            '연락처',
            '팩스',
            '비고',
            '유효기간',
          ],
          rows,
          type
        );
      } else {
        alert('잠시 후 다시 시도해주세요.');
      }
    } catch (error: unknown) {
      console.log(error);
      return alert('잠시 후 다시 시도해주세요.');
    }
  };
  return (
    <InstituteBase>
      <H1>검사기관</H1>
      <SearchBase>
        <FaqBox>
          <SOBox>
            <Numberdown />
            <Dropdown
              name="fst"
              title={fstOption}
              options={categoryOptions}
              selectedOption={fstOption}
              isOpen={isOpen.fst}
              toggle={() => {
                setIsOpen({
                  fst: !isOpen.fst,
                  scd: false,
                  trd: false,
                });
              }}
              onSelectedOption={setFstOption}
            />
            <Dropdown
              name="regionValue"
              title={scdOption}
              options={regionOptions}
              selectedOption={scdOption}
              isOpen={isOpen.scd}
              toggle={() => {
                setIsOpen({
                  fst: false,
                  scd: !isOpen.scd,
                  trd: false,
                });
              }}
              onSelectedOption={setScdOption}
            />
            <Dropdown
              name="districtValue"
              title={trdOption}
              options={districtOptions}
              selectedOption={trdOption}
              isOpen={isOpen.trd}
              toggle={() => {
                setIsOpen({
                  fst: false,
                  scd: false,
                  trd: !isOpen.trd,
                });
              }}
              onSelectedOption={setTrdOption}
            />
          </SOBox>
          <InputBox>
            <EntityLabel>
              <SearchIcon />
            </EntityLabel>
            <EntityInput
              ref={inputRef}
              placeholder="기관명 검색"
              onKeyDown={handleOnKeyPress}
            />
            <RefreshBtn />
          </InputBox>
        </FaqBox>

        <BtnBox>
          <ApplyBtn onClick={handleClick}>엑셀 다운로드</ApplyBtn>
          <ApplyBtn
            onClick={() => {
              setOpenUpld(true);
            }}
          >
            엑셀 등록 및 업데이트
          </ApplyBtn>
        </BtnBox>
      </SearchBase>
      <CommonTable tableHeader={tableHeader} tableBody={tableBody} />
      <PaginationComponent
        pageCount={pageCount}
        currentPage={currentPage}
        pageSize={pageSize}
      />
      {addModal && (
        <AddInstitute
          categoryOptions={categoryOptions}
          regionOptions={regionOptions}
          districtOptions={districtOptions}
          setAddModal={setAddModal}
        />
      )}
      {modifyModal.modal && (
        <ModifyInstitute
          categoryOptions={categoryOptions}
          regionOptions={regionOptions}
          districtOptions={districtOptions}
          modifyModal={modifyModal}
          setModifyModal={setModifyModal}
        />
      )}
    </InstituteBase>
  );
};

export default InstituteComponent;

const InstituteBase = styled.div``;
const H1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;


const SearchBase = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 5px;
  margin-top: 24px;
`;
const FaqBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  display: flex;
  align-items: center;
  margin-right: 12px;
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const EntityInput = styled.input`
  width: 200px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const EntityLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;


const StyledTableRow = styled(TableRow)<{ iseven: boolean }>`
  background-color: ${(props) =>
    props.iseven ? 'transparent' : 'rgba(168, 181, 209, 0.05)'};
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;



const IconBtns = styled.div`
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
`;
const DeleteBtn = styled.button`
  background-color: transparent;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  color: ${(props) => props.theme.primary_01};
  font-size: 20px;
  &:hover {
    background-color: #f5faf7;
  }
`;

const EditBtn = styled(DeleteBtn)`
  margin-left: 8px;
`;

const DeleteIcon = styled(IoTrashOutline)``;

const EditIcon = styled(LuPencil)``;

File: ./quality-admin/src/component/Institute/ModifyInstitute.tsx
Content:
import { useRouter } from 'next/router';
import { useRef, useState, useCallback } from 'react';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import { ModalInstituteType } from '../../../type/instituteType';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface DeleteInstituteProps {
  categoryOptions: string[];
  regionOptions: string[];
  districtOptions: string[];
  modifyModal: ModalInstituteType;
  setModifyModal: React.Dispatch<React.SetStateAction<ModalInstituteType>>;
}

const ModifyInstitute = ({
  categoryOptions,
  regionOptions,
  districtOptions,
  modifyModal,
  setModifyModal,
}: DeleteInstituteProps) => {
  const router = useRouter();

  const nameRef = useRef<HTMLInputElement>(null);
  const directorRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);
  const faxRef = useRef<HTMLInputElement>(null);
  const expirationRef = useRef<HTMLInputElement>(null);
  const remarkRef = useRef<HTMLTextAreaElement>(null);

  const [options, setOptions] = useState({
    category: modifyModal.data.category,
    region: modifyModal.data.region,
    district: modifyModal.data.district,
  });

  const handleSelect = useCallback(
    (key: string, value: string) => {
      setOptions({
        ...options,
        [key]: value,
      });
    },
    [options]
  );

  console.log(options);
  
  const handleModify = useCallback(async () => {
    let body = {
      id: modifyModal.data.id,
      name: nameRef.current?.value,
      director: directorRef.current?.value,
      phone: phoneRef.current?.value,
      fax: faxRef.current?.value,
      expiration: expirationRef.current?.value,
      remark: remarkRef.current?.value,
      category: options.category,
      region: options.region,
      district: options.district,
    };

    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        body
      );

      if (res.status === 200) {
        setModifyModal({
          modal: false,
          data: {
            id: null,
            category: null,
            director: null,
            district: null,
            region: null,
            expiration: null,
            fax: null,
            location: null,
            name: null,
            phone: null,
            remarks: null,
          },
        });
      }
    } catch (err) {
      console.log(err);
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  }, [
    nameRef,
    directorRef,
    phoneRef,
    faxRef,
    expirationRef,
    remarkRef,
    options,
  ]);

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사항목 및 수수료 등록</H2>
          <CloseBtn
            onClick={() => {
              setModifyModal({
                data: {
                  id: null,
                  category: null,
                  director: null,
                  district: null,
                  region: null,
                  expiration: null,
                  fax: null,
                  location: null,
                  name: null,
                  phone: null,
                  remarks: null,
                },
                modal: false,
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>검사분야</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      name="category"
                      onChange={(e) => {
                        const selectedName = e.target.name;
                        const selectedValue = e.target.value;
                        handleSelect(selectedName, selectedValue);
                      }}
                    >
                      <Option defaultValue={modifyModal.data.category ?? ''}>
                        {modifyModal.data.category}
                      </Option>
                      {categoryOptions.map((option, idx) => {
                        return <Option key={idx}>{option}</Option>;
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={nameRef}
                      defaultValue={modifyModal.data.name ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>대표자명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={directorRef}
                      defaultValue={modifyModal.data.director ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관소재지</StyledLabelCell>
                  <StyledTableCell>
                    <AddSelectBox>
                      <Select
                        name="region"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option defaultValue={modifyModal.data.region ?? ''}>
                          {modifyModal.data.region}
                        </Option>
                        {regionOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                      </Select>
                      <Select
                        name="district"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option defaultValue={modifyModal.data.district ?? ''}>
                          {modifyModal.data.district}
                        </Option>
                        {districtOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                        <Option>기타지역</Option>
                      </Select>
                    </AddSelectBox>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>전화</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={phoneRef}
                      defaultValue={modifyModal.data.phone ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>팩스</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={faxRef}
                      defaultValue={modifyModal.data.fax ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>유효기간</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={expirationRef}
                      defaultValue={modifyModal.data.expiration ?? ''}
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>비고</StyledLabelCell>
                  <StyledTableCell>
                    <AddMemo
                      defaultValue={modifyModal.data.remarks ?? ''}
                      ref={remarkRef}
                    />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleModify}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default ModifyInstitute;

const AddBase = styled.div`
  min-width: 440px;
  padding: 24px 16px;
`;


const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 28px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 80px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 8px 0;
    border: none;
  }
`;

const Select = styled.select`
  width: 48%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  color: #96a0b5;
  margin-right: 12px;
  &:last-child {
    margin: 0 0;
  }
`;

const Option = styled.option``;

const AddInput = styled.input`
  width: 100%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const AddSelectBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Institute/AddInstitute.tsx
Content:
import { useRef, useState } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';

import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';


interface AddEntityProps {
  categoryOptions: string[];
  regionOptions: string[];
  districtOptions: string[];
  setAddModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const AddInstitute = ({
  categoryOptions,
  regionOptions,
  districtOptions,
  setAddModal,
}: AddEntityProps) => {
  const router = useRouter();
  const nameRef = useRef<HTMLInputElement>(null);
  const directorRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);
  const faxRef = useRef<HTMLInputElement>(null);
  const expirationRef = useRef<HTMLInputElement>(null);
  const remarkRef = useRef<HTMLTextAreaElement>(null);

  const [options, setOptions] = useState({
    category: '',
    region: '',
    district: '',
  });

  
  const handleAdd = async () => {
    let body = {
      name: nameRef.current?.value,
      director: directorRef.current?.value,
      phone: phoneRef.current?.value,
      fax: faxRef.current?.value,
      expiration: expirationRef.current?.value,
      remark: remarkRef.current?.value,
      category: options.category,
      region: options.region,
      district: options.district,
    };

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        body
      );
      console.log(res);

      if (res.status === 200) {
        setAddModal(false);
        router.replace(router.asPath);
      }
    } catch (err) {
      console.log(err);
    }
  };

  const handleSelect = (key: string, value: string) => {
    setOptions({
      ...options,
      [key]: value,
    });
  };

  return (
    <Modal>
      <AddBase>
        <Heading>
          <H2>검사항목 및 수수료 등록</H2>
          <CloseBtn
            onClick={() => {
              setAddModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </Heading>
        <Body>
          <TableContainer>
            <Table size="small">
              <TableHead>
                <TableRow>
                  <StyledHeadCell></StyledHeadCell>
                  <StyledHeadCell></StyledHeadCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <StyledLabelCell>검사분야</StyledLabelCell>
                  <StyledTableCell>
                    <Select
                      name="category"
                      onChange={(e) => {
                        const selectedName = e.target.name;
                        const selectedValue = e.target.value;
                        handleSelect(selectedName, selectedValue);
                      }}
                    >
                      <Option disabled selected>
                        -- 검사분야 ---
                      </Option>
                      {categoryOptions.map((option, idx) => {
                        return <Option key={idx}>{option}</Option>;
                      })}
                    </Select>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={nameRef}
                      placeholder="기관명을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>대표자명</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={directorRef}
                      placeholder="대표자명을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>기관소재지</StyledLabelCell>
                  <StyledTableCell>
                    <AddSelectBox>
                      <Select
                        name="region"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option disabled selected>
                          -- 도/시 ---
                        </Option>
                        {regionOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                      </Select>
                      <Select
                        name="district"
                        onChange={(e) => {
                          const selectedName = e.target.name;
                          const selectedValue = e.target.value;
                          handleSelect(selectedName, selectedValue);
                        }}
                      >
                        <Option disabled selected>
                          -- 시/군/구 ---
                        </Option>
                        {districtOptions.map((option, idx) => {
                          return <Option key={idx}>{option}</Option>;
                        })}
                        <Option>기타지역</Option>
                      </Select>
                    </AddSelectBox>
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>전화</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={phoneRef}
                      placeholder="전화번호를 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>팩스</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={faxRef}
                      placeholder="팩스번호를 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>유효기간</StyledLabelCell>
                  <StyledTableCell>
                    <AddInput
                      ref={expirationRef}
                      placeholder="유효기간을 입력해주세요"
                    />
                  </StyledTableCell>
                </TableRow>
                <TableRow>
                  <StyledLabelCell>비고</StyledLabelCell>
                  <StyledTableCell>
                    <AddMemo ref={remarkRef} />
                  </StyledTableCell>
                </TableRow>
              </TableBody>
            </Table>
          </TableContainer>
        </Body>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </AddBase>
    </Modal>
  );
};

export default AddInstitute;

const AddBase = styled.div`
  min-width: 440px;
  padding: 24px 16px;
`;

const Heading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const H2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const Body = styled.div`
  margin-top: 28px;
`;

const AddMemo = styled.textarea`
  display: flex;
  align-items: center;
  width: 100%;
  height: 80px;
  padding: 16px 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  resize: none;
  &::placeholder {
    color: #96a0b5;
  }
`;


const StyledHeadCell = styled(TableCell)`
  && {
    padding: 0 0;
    border: none;
  }
`;

const StyledLabelCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 0 0;
    border: none;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    padding: 8px 0;
    border: none;
  }
`;

const Select = styled.select`
  width: 48%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  color: #96a0b5;
  margin-right: 12px;
  &:last-child {
    margin: 0 0;
  }
`;

const Option = styled.option``;

const AddInput = styled.input`
  width: 100%;
  height: 36px;
  padding: 0 10px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const AddSelectBox = styled.div`
  display: flex;
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Layout/Layout.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import Sidebar from './Sidebar';
import { useRouter } from 'next/router';

type LayoutProps = {
  children: React.ReactNode;
};

const Layout: NextPage<LayoutProps> = ({ children }: LayoutProps) => {
  const router = useRouter();

  if (router.pathname === '/signin') {
    return <LayoutBase>{children}</LayoutBase>;
  }
  return (
    <LayoutBase>
      <Sidebar />
      <Main>{children}</Main>
    </LayoutBase>
  );
};

export default Layout;

const LayoutBase = styled.div`
  height: calc(var(--vh, 1vh) * 100);
  display: flex;
`;

const Main = styled.main`
  width: calc(var(--vw, 1vw) * 100 - 270px);
  padding: 16px;
`;

File: ./quality-admin/src/component/Layout/Sidebar.tsx
Content:
import { NextPage } from 'next';
import { useEffect, useState } from 'react';
import styled from 'styled-components';

import { useRouter } from 'next/router';
import Link from 'next/link';

import { TbUsers, TbSettings } from 'react-icons/tb';

const Sidebar: NextPage = () => {
  const [openList, setOpenList] = useState<number>(1);
  const router = useRouter();

  useEffect(() => {
    if (router.pathname.includes('/chatbot')) {
      setOpenList(2);
    }
  }, []);

  return (
    <SideBase>
      <LogoBox>
        <Logo src="/images/logo.png" alt="파킹프렌즈 로고" />
      </LogoBox>
      <MainMenu>
        <MainList>
          <ListItem
            islocation={openList === 1}
            onClick={() => {
              window.location.href = '/users';
            }}
          >
            <UserIcon />
            <ItemLabel>이용자 관리</ItemLabel>
          </ListItem>
        </MainList>
        <MainList>
          <ListItem
            islocation={openList === 2}
            onClick={() => {
                    window.location.href = '/chatbot/faq';
		    setOpenList(2);
	    }}
	    >
            <SettingIcon />
            <ItemLabel>챗봇 데이터 설정</ItemLabel>
          </ListItem>
          <ToggleItemBox isVisible={openList === 2}>
            <ToggleMenu>
              <ToggleItem isPath={router.route === '/chatbot/faq'}>
                <StyledLink href="/chatbot/faq">자주 묻는 질문</StyledLink>
              </ToggleItem>
              <ToggleItem isPath={router.route === '/chatbot/frequency'}>
                <StyledLink href="/chatbot/frequency">
                  검사 대상 및 주기
                </StyledLink>
              </ToggleItem>
              <ToggleItem isPath={router.route === '/chatbot/fee'}>
                <StyledLink href="/chatbot/fee">검사 항목 및 수수료</StyledLink>
              </ToggleItem>
              <ToggleItem isPath={router.route === '/chatbot/institute'}>
                <StyledLink href="/chatbot/institute">검사 기관</StyledLink>
              </ToggleItem>
            </ToggleMenu>
          </ToggleItemBox>
        </MainList>
      </MainMenu>
    </SideBase>
  );
};

export default Sidebar;

const SideBase = styled.aside`
  background-color: #fff;
  position: relative;
  width: 270px;
  padding: 0 16px 16px;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
`;

const LogoBox = styled.div`
  height: 140px;
  display: flex;
  align-items: center;
`;

const Logo = styled.img`
  width: 80%;
  display: block;
  object-fit: cover;
  margin: 0 auto;
`;

const ItemLabel = styled.span`
  margin-left: 22px;
`;

const MainMenu = styled.ul``;

const MainList = styled.li``;

const ListItem = styled.div<{ islocation: boolean }>`
  background-color: ${(props) =>
    props.islocation ? '#f4fdf8' : 'transparent'};
  position: relative;
  display: flex;
  align-items: center;
  padding: 12px 16px;
  margin-bottom: 8px;
  font-weight: 500;
  line-height: 1.8;
  border-radius: 10px;
  cursor: pointer;

  ${ItemLabel} {
    color: ${(props) => (props.islocation ? '#22c55e' : '#2b2d3b')};
  }
  &:before {
    content: '';
    background-color: ${(props) => props.theme.primary_01};
    display: ${(props) => (props.islocation ? 'block' : 'none')};
    position: absolute;
    top: 0;
    bottom: 0;
    left: -12px;
    border-radius: 5px;
    border: 3px solid ${(props) => props.theme.primary_01};
  }
  &:after {
    content: '';
    position: absolute;
    right: 16px;
    width: 6px;
    height: 6px;
    border: 1px solid ${(props) => (props.islocation ? '#22c55e' : '#2b2d3b')};
    border-left: 0;
    border-top: 0;
    transform: rotate(315deg);
  }
  &:hover {
    &:before {
      display: block;
    }
    &:after {
      border: 1px solid ${(props) => props.theme.primary_01};
      border-left: 0;
      border-top: 0;
    }
    ${ItemLabel} {
      color: ${(props) => props.theme.primary_01};
      transition:
        color 0.15s ease-in-out,
        background-color 0.15s ease-in-out,
        border-color 0.15s ease-in-out;
    }
  }
`;

const ToggleItemBox = styled.div<{ isVisible: boolean }>`
  display: ${(props) => (props.isVisible ? 'block' : 'none')};
  padding: 0 12px;
`;

const ToggleMenu = styled.ul`
  font-size: 14px;
`;

const ToggleItem = styled.li<{ isPath: boolean }>`
  position: relative;
  display: flex;
  align-items: center;
  margin-bottom: 8px;
  font-weight: 500;
  color: ${(props) => (props.isPath ? '#22c55e' : '#2b2d3b')};
  cursor: pointer;
  &:before {
    content: '';
    background-color: ${(props) => (props.isPath ? '#22c55e' : '#95a0c5')};
    position: absolute;
    left: 10px;
    width: 4px;
    height: 4px;
    border-radius: 50%;
  }
  &:hover {
    color: ${(props) => props.theme.primary_01};
    &:before {
      background-color: ${(props) => props.theme.primary_01};
    }
  }
  &:first-child {
    margin-top: 12px;
  }
`;

const StyledLink = styled(Link)`
  width: 210px;
  height: 36px;
  display: flex;
  align-items: center;
  padding-left: 42px;
`;


const UserIcon = styled(TbUsers)`
  color: ${(props) => props.theme.gray_06};
  font-size: 22px;
`;

const SettingIcon = styled(TbSettings)`
  color: ${(props) => props.theme.gray_06};
  font-size: 22px;
`;

File: ./quality-admin/src/component/Common/Dropdown/StyledDropdown.tsx
Content:

import styled from 'styled-components';

import { IoIosArrowDown } from 'react-icons/io';

interface DropdownProps {
  title: string | null;
  options: string[];
  selectedOption: string;
  isOpen: boolean;
  toggle: () => void;
  onSelectedOption: React.Dispatch<React.SetStateAction<string>>;
}

const StyledDropdown = ({
  title,
  options,
  selectedOption,
  isOpen,
  toggle,
  onSelectedOption,
}: DropdownProps) => {
  return (
    <Selectbox onClick={toggle}>
      <SelectedOption>{selectedOption || title}</SelectedOption>
      <ArrowIconWrap isDropdownOpen={isOpen}>
        <ArrowIcon />
      </ArrowIconWrap>
      {isOpen && (
        <Options>
          {options.map((option, index) => (
            <Option
              key={index}
              onClick={(e) => {
                e.stopPropagation();
                toggle();
                onSelectedOption(option);
              }}
            >
              {option}
            </Option>
          ))}
        </Options>
      )}
    </Selectbox>
  );
};

export default StyledDropdown;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-width: 126px;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-right: 4px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 5px;
`;

const SelectedOption = styled.div``;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  width: 102%;
  max-height: 200px;
  padding: 6px;
  border: 1px solid #e2e7f1;
  overflow-y: scroll;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin/src/component/Common/Dropdown/Numberdown.tsx
Content:

import { useRouter } from 'next/router';
import { useCallback, useState } from 'react';
import styled from 'styled-components';


import { IoIosArrowDown } from 'react-icons/io';

const Numberdown = () => {
  const router = useRouter();
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  
  const [selectedViewOption, setSelectedViewOption] = useState(10);
  const viewOptions = [10, 50, 100];

  const handleChangeOption = useCallback(
    (option: number) => {
      setSelectedViewOption(option);
      setIsDropdownOpen(false);

      router.push({
        pathname: router.pathname,
        query: {
          ...router.query,
          pageSize: option,
        },
      });
    },
    [router]
  );

  return (
    <NoDownBase>
      <Selectbox
        onClick={() => {
          setIsDropdownOpen(!isDropdownOpen);
        }}
      >
        <SelectedOption>{selectedViewOption} 개씩 보기</SelectedOption>
        <ArrowIconWrap isDropdownOpen={isDropdownOpen}>
          <ArrowIcon />
        </ArrowIconWrap>
        {isDropdownOpen && (
          <Options>
            {viewOptions.map((option, index) => (
              <Option
                key={index}
                onClick={(e) => {
                  e.stopPropagation();
                  handleChangeOption(option);
                }}
              >
                {option}
              </Option>
            ))}
          </Options>
        )}
      </Selectbox>
    </NoDownBase>
  );
};

export default Numberdown;

const NoDownBase = styled.div`
  display: flex;
  align-items: center;
  font-size: 14px;
`;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 126px;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-right: 4px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 10px;
`;

const SelectedOption = styled.div``;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  width: 102%;
  padding: 6px;
  border: 1px solid #e2e7f1;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

const SelectSpan = styled.span`
  margin-left: 6px;
  color: #636363;
`;

File: ./quality-admin/src/component/Common/Dropdown/Dropdown.tsx
Content:

import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

import { IoIosArrowDown } from 'react-icons/io';

interface DropdownProps {
  name: string;
  title: string | null;
  options: string[];
  selectedOption: string;
  isOpen: boolean;
  toggle: () => void;
  onSelectedOption: React.Dispatch<React.SetStateAction<string>>;
}

const Dropdown = ({
  name,
  title,
  options,
  selectedOption,
  isOpen,
  toggle,
  onSelectedOption,
}: DropdownProps) => {
  const router = useRouter();

  const handleChangeOption = useCallback(
    (name: string, option: string) => {
      onSelectedOption(option);

      router.push({
        pathname: router.pathname,
        query: {
          ...router.query,
          [name]: option,
          page: 1,
        },
      });
    },
    [router]
  );

  return (
    <Selectbox onClick={toggle}>
      <SelectedOption>{selectedOption || title}</SelectedOption>
      <ArrowIconWrap isDropdownOpen={isOpen}>
        <ArrowIcon />
      </ArrowIconWrap>
      {isOpen && (
        <Options>
          {options.map((option, index) => (
            <Option
              key={index}
              onClick={(e) => {
                e.stopPropagation();
                toggle();
                handleChangeOption(name, option);
              }}
            >
              {option}
            </Option>
          ))}
        </Options>
      )}
    </Selectbox>
  );
};

export default Dropdown;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-width: 126px;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-right: 4px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 10px;
`;

const SelectedOption = styled.div``;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  
  padding: 6px;
  border: 1px solid #e2e7f1;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  margin-left: 4px;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin/src/component/Common/Pagination.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';


import { Pagination } from '@mui/material';

interface PaginationProps {
  currentPage: number;
  pageCount: number;
  pageSize: number;
}

const PaginationComponent: NextPage<PaginationProps> = (props) => {
  const { currentPage, pageCount, pageSize } = props;
  const router = useRouter();

  const pageChange = useCallback(
    (pageValue: number) => {
      router.push({
        pathname: router.pathname, 
        query: {
          ...router.query, 
          page: pageValue, 
        },
      });
    },
    [router]
  );

  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
    pageChange(value);
  };
  return (
    <PaginationBase>
      <StyledPagination
        page={currentPage}
        count={Math.ceil(pageCount / pageSize)}
        onChange={handleChange}
        variant="outlined"
        shape="rounded"
        hidePrevButton
      />
    </PaginationBase>
  );
};

export default PaginationComponent;

const PaginationBase = styled.div`
  display: flex;
  justify-content: center;
  margin-top: 20px;
`;

const StyledPagination = styled(Pagination)`
  && {
    .MuiButtonBase-root {
      font-family: 'Noto Sans KR', sans-serif;
      margin: 0 0;
    }
    .MuiPaginationItem-root {
      border: 1px solid ${(props) => props.theme.table_line02};
    }
    .Mui-selected {
      background-color: ${(props) => props.theme.primary_01} !important;
      color: #fff;
    }
  }
`;

File: ./quality-admin/src/component/Common/Card.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

type CardProps = {
  children: React.ReactNode;
};
const Card: NextPage<CardProps> = ({ children }: CardProps) => {
  return <CardBase>{children}</CardBase>;
};

export default Card;

const CardBase = styled.div`
  position: relative;
  background-color: #fff;
  width: 100%;
  height: 100%;
  padding: 16px;
  border-radius: 10px;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
  overflow-y: scroll;
`;

File: ./quality-admin/src/component/Common/Buttons/ApplyBtn.tsx
Content:
import styled from 'styled-components';

type ApplyBtnProps = {
  children: React.ReactNode;
  onClick: () => void;
};

const ApplyBtn = (props: ApplyBtnProps) => {
  const { children, onClick } = props;

  return <ApplyButton onClick={onClick}>{children}</ApplyButton>;
};

export default ApplyBtn;

const ApplyButton = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  border-radius: 6px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
  margin-right: 8px;
  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
  &:last-child {
    margin-right: 0;
  }
`;

File: ./quality-admin/src/component/Common/Buttons/RefreshBtn.tsx
Content:
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

import { IoCloseCircle } from 'react-icons/io5';

const RefreshBtn = () => {
  const router = useRouter();

  const handleClose = useCallback(() => {
    const urlWithoutQuery = window.location.origin + window.location.pathname;

    window.location.href = urlWithoutQuery;
  }, [router]);

  return (
    <RefreshButton onClick={handleClose}>
      <RefreshIcon />
    </RefreshButton>
  );
};

export default RefreshBtn;

const RefreshButton = styled.button`
  height: 100%;
  display: flex;
  align-items: center;
`;

const RefreshIcon = styled(IoCloseCircle)`
  font-size: 18px;
  color: #757575;
`;

File: ./quality-admin/src/component/Common/ExcelUpld.tsx
Content:
import { useState } from 'react';
import * as Excel from 'exceljs';
import styled from 'styled-components';

import { TableBody, TableRow, TableCell } from '@mui/material';

import { RiCloseLargeFill } from 'react-icons/ri';

import Modal from './Modal';
import CommonTable from './Table/CommonTable';
import ApplyBtn from './Buttons/ApplyBtn';

const ExcelUpld = ({
  upldResult,
  setUpldDatas,
  setOpenUpld,
  handleUpldDatas,
  mapRowData,
}: any) => {
  const [fileName, setFileName] = useState<string | null>(null);

  console.log(upldResult);
  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile: File | undefined = e.target.files?.[0];

    if (selectedFile) {
      const promise = validateExcelFile(selectedFile);

      promise.then(
        (result) => {
          if (result === 'success') {
            setFileName(selectedFile.name);
          }
        },
        (err) => {
          
          console.log(err);
        }
      );
    }
  };

  const validateExcelFile = (file: Blob) => {
    const sheetData: any[] = [];

    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsArrayBuffer(file);
      reader.onload = () => {
        const buffer = reader.result as any;
        const workbook = new Excel.Workbook();
        workbook.xlsx
          .load(buffer)
          .then(() => {
            const worksheet = workbook.getWorksheet(1);
            worksheet?.eachRow((row, rowNumber) => {
              if (rowNumber === 1) return; 

              const rowData: any[] = [];
              row.eachCell((cell, cellNumber) => {
                rowData[cellNumber - 1] = { value: cell.value };
              });

              
              if (rowData.length > 0) {
                sheetData.push(rowData);
              }
            });

            const jsonArray = sheetData.map((rowArray) => mapRowData(rowArray));
            setUpldDatas(jsonArray);

            resolve('success');
          })
          .catch((error) => {
            console.log(error);
          });
      };
    });
  };

  
  const tableHeader = ['등록 성공', '등록 실패'];
  const tableBody = (
    <TableBody>
      <TableRow>
        <StyledTableCell>{upldResult?.success}개</StyledTableCell>
        <StyledTableCell>
          <ErrorStrong>{upldResult?.failure}</ErrorStrong> 개
        </StyledTableCell>
      </TableRow>
    </TableBody>
  );

  return (
    <Modal>
      <UploadUsers>
        <CloseIconBtn
          onClick={() => {
            setUpldDatas(null);
            setOpenUpld(false);
          }}
        >
          <CloseBtnIcon />
        </CloseIconBtn>
        <UplP>파일 업로드</UplP>
        {!upldResult.status ? (
          <>
            <FileBox isUpload={fileName !== null}>
              <FileLabel isUpload={fileName !== null}>
                엑셀파일을 업로드해주세요.
              </FileLabel>

              <FileInput
                type="file"
                accept=".xlsx, .xls"
                onChange={(e) => {
                  handleFileChange(e);
                }}
              />
              <FileName>{fileName}</FileName>
            </FileBox>
            <FileAlert>
              • 엑셀양식을 미리 다운로드 하신 후 양식에 맞춰서 등록해주세요.
            </FileAlert>
            <FileAlert>• 파일은 한번에 한개씩만 처리가능합니다.</FileAlert>

            <BtnBox>
              <ApplyBtn onClick={handleUpldDatas}>등록하기</ApplyBtn>
            </BtnBox>
          </>
        ) : (
          <>
            <UpldResultBox>
              <CommonTable tableHeader={tableHeader} tableBody={tableBody} />
            </UpldResultBox>
            <FileAlert>
              • 실패한 항목은 수정하신 후 다시 업로드해주세요.
            </FileAlert>
            <BtnBox>
              <ApplyBtn
                onClick={() => {
                  setUpldDatas(null);
                  setOpenUpld(false);
                  window.location.reload();
                }}
              >
                닫기
              </ApplyBtn>
            </BtnBox>
          </>
        )}
      </UploadUsers>
    </Modal>
  );
};

export default ExcelUpld;

const UploadUsers = styled.div`
  position: relative;
  background-color: #fff;
  min-width: 460px;
  padding: 32px 24px 24px;
  border-radius: 10px;
`;

const CloseIconBtn = styled.button`
  position: absolute;
  top: 0;
  right: 0;
`;

const UplP = styled.p`
  text-align: center;
  font-size: 20px;
  font-weight: 500;
`;

const FileBox = styled.div<{ isUpload: boolean }>`
  background-color: ${(props) => (props.isUpload ? '#f6f6f6' : 'transprent')};
  position: relative;
  height: 75px;
  display: flex;
  align-ites: center;
  justify-content: center;
  flex-direction: column;
  margin: 24px 0 16px;
  border: ${(props) => (props.isUpload ? 'none' : '1px dashed #aaa')};
  border-radius: 3px;
`;

const FileLabel = styled.label<{ isUpload: boolean }>`
  display: ${(props) => (props.isUpload ? 'none' : 'show')};
  text-align: center;
  color: #575757;
`;

const FileInput = styled.input`
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  opacity: 0;
  cursor: pointer;
`;

const FileName = styled.span`
  font-size: 14px;
  text-align: center;
  color: ${(props) => props.theme.primary_dgray};
`;

const FileAlert = styled.p`
  line-height: 1.5;
  font-size: 13px;
  color: ${(props) => props.theme.gray_07};
`;

const UpldResultBox = styled.div`
  
  padding: 12px 0;
  margin: 16px 0;
  line-height: 1.8;
`;

const UpldBtn = styled.button`
  background-color: ${(props) => props.theme.primary_dgray};
  width: 100%;
  padding: 16px 0;
  margin-top: 16px;
  color: #fff;
  border-radius: 8px;
`;

const CloseBtnIcon = styled(RiCloseLargeFill)`
  position: absolute;
  top: 20px;
  right: 24px;
  cursor: pointer;
  font-size: 18px;
`;

const BtnBox = styled.div`
  display: flex;
  align-ites: center;
  justify-content: flex-end;
  margin-top: 20px;
`;


const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 40px;
    vertical-align: middle;
    text-align: center;
    border-bottom: 1px solid ${(props) => props.theme.table_line02};
    color: ${(props) => props.theme.primary_dgray};
  }
`;

const ErrorStrong = styled.strong`
  color: red;
`;

File: ./quality-admin/src/component/Common/MobileModal.tsx
Content:
import { useEffect, useRef } from 'react';
import styled from 'styled-components';

type ModalProps = {
  children: React.ReactNode;
};

const MobileModal = ({ children }: ModalProps) => {
  return (
    <ModalBase>
      <ModalInner>{children}</ModalInner>
    </ModalBase>
  );
};

export default MobileModal;

const ModalBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 16px;
  z-index: 999;
`;

const ModalInner = styled.div`
  background: #fff;
  border-radius: 5px;
`;

File: ./quality-admin/src/component/Common/Table/SortingTable.tsx
Content:
import React, { useState, useMemo } from 'react';
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TableContainer,
  Checkbox,
  TableSortLabel,
} from '@mui/material';
import styled from 'styled-components';

interface TableHeader {
  key: string;
  label: string;
  numeric: boolean;
}

interface SortingTableProps {
  headers: TableHeader[];
  data: any[];
  checkedItems: { [key: number]: boolean };
  handleChangeItem: (
    id: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  selectAll: boolean;
  handleSelectAll: (event: React.ChangeEvent<HTMLInputElement>) => void;
}

const SortingTable: React.FC<SortingTableProps> = ({
  headers,
  data,
  checkedItems,
  handleChangeItem,
  selectAll,
  handleSelectAll,
}) => {
  const [order, setOrder] = useState<'asc' | 'desc'>('asc');
  const [orderBy, setOrderBy] = useState<string>(headers[0]?.key || '');

  const handleSort = (property: string) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  };

  const sortedData = useMemo(() => {
    return [...data].sort((a, b) => {
      const aValue = a[orderBy];
      const bValue = b[orderBy];
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return order === 'asc'
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      }
      return order === 'asc' ? aValue - bValue : bValue - aValue;
    });
  }, [data, order, orderBy]);

  return (
    <TableBase>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <StyledTableCellHead padding="checkbox">
                <Checkbox
                  color="success"
                  checked={selectAll}
                  onChange={handleSelectAll}
                />
              </StyledTableCellHead>
              {headers.map((header) => (
                <StyledTableCellHead
                  key={header.key}
                  align={header.numeric ? 'right' : 'left'}
                  sortDirection={orderBy === header.key ? order : false}
                >
                  <TableSortLabel
                    active={orderBy === header.key}
                    direction={orderBy === header.key ? order : 'asc'}
                    onClick={() => handleSort(header.key)}
                  >
                    {header.label}
                  </TableSortLabel>
                </StyledTableCellHead>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {sortedData.map((row) => (
              <TableRow key={row.id} hover>
                <StyledTableCell padding="checkbox">
                  <Checkbox
                    color="success"
                    checked={checkedItems[row.id] || false}
                    onChange={handleChangeItem(row.id)}
                  />
                </StyledTableCell>
                {headers.map((header) => (
                  <StyledTableCell
                    key={header.key}
                    align={header.numeric ? 'right' : 'left'}
                  >
                    {row[header.key]}
                  </StyledTableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </TableBase>
  );
};

export default SortingTable;

const TableBase = styled.div`
  margin: 8px 0;
  height: calc(var(--vh, 1vh) * 100 - 300px);
  overflow-y: scroll;
`;

const StyledTableContainer = styled(TableContainer)``;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    background-color: #f4f6f9;
    height: 45px;
    text-align: center;
    letter-spacing: -0.5px;
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;

File: ./quality-admin/src/component/Common/Table/CheckTable.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import { CheckTableProps } from '../../../../type/commonType';

import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Checkbox,
} from '@mui/material';

const CheckTable: NextPage<CheckTableProps> = (props) => {
  const { tableHeader, tableBody, selectAll, handleSelectAll } = props;

  return (
    <TableBase>
      <StyledTableContainer>
        <Table size="small">
          <TableHead>
            <TableRow>
              <StyledTableCellHead padding="checkbox">
                <Checkbox
                  color="success"
                  checked={selectAll}
                  onChange={handleSelectAll}
                />
              </StyledTableCellHead>
              {tableHeader.map((header, idx) => {
                return (
                  <StyledTableCellHead key={idx}>{header}</StyledTableCellHead>
                );
              })}
            </TableRow>
          </TableHead>
          {tableBody}
        </Table>
      </StyledTableContainer>
    </TableBase>
  );
};

export default CheckTable;

const TableBase = styled.div`
  margin: 8px 0;
  height: calc(var(--vh, 1vh) * 100 - 300px);
  overflow-y: scroll;
`;

const StyledTableContainer = styled(TableContainer)``;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    background-color: #f4f6f9;
    height: 45px;
    text-align: center;
    letter-spacing: -0.5px;
  }
`;

File: ./quality-admin/src/component/Common/Table/CommonTable.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import { TableProps } from '../../../../type/commonType';

import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';

const CommonTable: NextPage<TableProps> = (props) => {
  const { tableHeader, tableBody } = props;
  return (
    <TableBase>
      <StyledTableContainer>
        <Table size="small">
          <TableHead>
            <TableRow>
              {tableHeader.map((header, idx) => {
                return (
                  <StyledTableCellHead key={idx}>{header}</StyledTableCellHead>
                );
              })}
            </TableRow>
          </TableHead>
          {tableBody}
        </Table>
      </StyledTableContainer>
    </TableBase>
  );
};

export default CommonTable;

const TableBase = styled.div`
  margin: 8px 0;
  padding: 0 0 16px;
  max-height: calc(var(--vh, 1vh) * 100 - 280px);
  overflow-y: scroll;
  
`;

const StyledTableContainer = styled(TableContainer)`
  border-top: 1px solid ${(props) => props.theme.table_line02};
`;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 45px;
    border-bottom: 1px solid #e2e7f1;
    font-weight: 500;
    text-align: center;
    letter-spacing: -0.5px;
    color: ${(props) => props.theme.gray_07};
  }
`;

File: ./quality-admin/src/component/Common/Modal.tsx
Content:
import { useEffect, useRef } from 'react';
import styled from 'styled-components';

type ModalProps = {
  children: React.ReactNode;
};

const Modal = ({ children }: ModalProps) => {
  return (
    <ModalBase>
      <ModalInner>{children}</ModalInner>
    </ModalBase>
  );
};

export default Modal;

const ModalBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
`;

const ModalInner = styled.div`
  background: #fff;
  border-radius: 5px;
`;

File: ./quality-admin/src/component/Common/Toast.tsx
Content:
import { useEffect, useState } from 'react';
import styled, { keyframes } from 'styled-components';


import { VscChromeClose } from 'react-icons/vsc';

type ToastProps = {
  children: React.ReactNode;
  setOpenToast: React.Dispatch<React.SetStateAction<boolean>>;
};

const Toast = ({ children, setOpenToast }: ToastProps) => {
  useEffect(() => {
    
    const timer = setTimeout(() => {
      setOpenToast(false);
    }, 1500);

    return () => {
      clearTimeout(timer);
    };
  }, []);

  return (
    <ToastBase
      onClick={() => {
        setOpenToast(false);
      }}
    >
      <ToastBox>
        <ToastClose>
          <CloseIcon />
        </ToastClose>
        {children}
      </ToastBox>
    </ToastBase>
  );
};

export default Toast;

const slideIn = keyframes`
from {
  transform: translateY(0%);
}
to {
  transform: translateY(-40%);
}
`;

const ToastBase = styled.div`
  position: absolute;
  bottom: 20px;
  width: 100%;
  animation: ${slideIn} 300ms ease-in-out 0s 1 normal forwards;
  cursor: pointer;
`;

const ToastBox = styled.div`
  background-color: #fdecee;
  width: 420px;
  display: flex;
  align-items: center;
  padding: 18px;
  margin: 0 auto;
  color: #fff;
  border-radius: 7px;
  box-shadow: 0 0.3rem 0.7rem rgb(0 0 0 / 8%);
`;

const ToastClose = styled.div`
  background-color: #ef4d56;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
`;

const CloseIcon = styled(VscChromeClose)`
  font-size: 11px;
`;

File: ./quality-admin/src/component/Common/SelectCategory.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

const SelectCategory: NextPage = () => {
  const router = useRouter();
  
  const handleQuery = useCallback(
    (target: string) => {
      router.push({
        pathname: router.route,
        query: {
          ...router.query,
          fst: target,
          scd: null,
          page: 1,
        },
      });
    },
    [router.query]
  );

  return (
    <CategoryBox>
      <CategoryMenu>
        <CategoryItem
          isQuery={
            router.query.fst === undefined || router.query.fst === '식품업'
          }
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          식품업
        </CategoryItem>
        <CategoryItem
          isQuery={router.query.fst === '축산물'}
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          축산물
        </CategoryItem>
        <CategoryItem
          isQuery={router.query.fst === '기구 및 용기'}
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          기구 및 용기
        </CategoryItem>
      </CategoryMenu>
    </CategoryBox>
  );
};

export default SelectCategory;

const CategoryBox = styled.div`
  margin-top: 16px;
`;

const CategoryMenu = styled.ul`
  display: flex;
`;

const CategoryItem = styled.li<{ isQuery: boolean }>`
  padding: 8px 36px;
  color: ${(props) => (props.isQuery ? '#22c55e' : '#555b7e')};
  border-bottom: ${(props) =>
    props.isQuery ? ' 1.5px solid #22c55e' : ' 1px solid #c1cde0'};
  font-weight: ${(props) => (props.isQuery ? '600' : '400')};
  font-size: 16px;
  cursor: pointer;
`;

File: ./quality-admin/src/component/Signin/SigninComponent.tsx
Content:
import axios from 'axios';
import React, { useCallback, useEffect, useState, useRef } from 'react';
import styled from 'styled-components';
import cookie from 'react-cookies';

export default function SigninComponent() {
  const [isAuth, setIsAuth] = useState(false);
  const [authCode, setAuthCode] = useState('');
  const [token, setToken] = useState('');
  const [timeLeft, setTimeLeft] = useState(5 * 60); 
  const [email, setEmail] = useState(''); 
  const [authInput, setAuthInput] = useState(''); 
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  const handleAuth = useCallback(async () => {
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/auth`,
        {
          user_email: email,
        }
      );
      if (res.status === 200) {
        setEmail(''); 
        setToken(res.data.jwt);
        setAuthCode(res.data.authcode);
        setIsAuth(true);
        setTimeLeft(5 * 60); 
      } else {
        alert('오류가 발생하였습니다. 다시 한번 시도해주세요.');
        window.location.reload();
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';
        alert(`${errorMessage}`);
      }
    }
  }, [email]);

  const handleReAuth = useCallback(async () => {
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/auth`,
        {
          user_email: email,
        }
      );
      if (res.status === 200) {
        setAuthCode(res.data.authcode);
        setToken(res.data.jwt);
        alert('인증번호가 재발송되었습니다.'); 
        setTimeLeft(5 * 60); 
      } else {
        alert('오류가 발생하였습니다. 다시 한번 시도해주세요.');
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';
        alert(`${errorMessage}`);
      }
    }
  }, [email]);

  const handleSignin = useCallback(async () => {
    if (authInput !== authCode) {
      return alert('인증번호가 일치하지 않습니다.');
    } else {
      cookie.save('qhrjs-access-token', token, {
        path: '/',
      });
      window.location.replace('/');
    }
  }, [authInput, authCode, token]);

  
  useEffect(() => {
    if (isAuth) {
      timerRef.current = setInterval(() => {
        setTimeLeft((prevTime) => {
          if (prevTime <= 1) {
            clearInterval(timerRef.current!);
            setIsAuth(false);
            return 0;
          }
          return prevTime - 1;
        });
      }, 1000);
    } else {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    }
    return () => {
      if (timerRef.current) clearInterval(timerRef.current);
    };
  }, [isAuth]);

  
  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
  };

  return (
    <SigninBase>
      <SigninContents>
        <LogoBox>
          <LogoImg src="/images/sign-logo.png" alt="로고" />
          <SigninP>자가품질검사 챗봇 관리자</SigninP>
        </LogoBox>
        {isAuth ? (
          <ContentsBox>
            <InputLabel>인증번호</InputLabel>
            <InputBox>
              <Input
                value={authInput}
                onChange={(e) => setAuthInput(e.target.value)}
                placeholder="인증번호를 입력해주세요"
              />
              <InputAuthTime>{formatTime(timeLeft)}</InputAuthTime>
            </InputBox>

            <InputInfo>
              <InfoP>이메일로 발송한 인증번호를 입력해 주세요.</InfoP>
              <ReAuthBtn onClick={handleReAuth}>인증번호 다시받기</ReAuthBtn>
            </InputInfo>
            <SigninBtn onClick={handleSignin}>확인</SigninBtn>
          </ContentsBox>
        ) : (
          <ContentsBox>
            <InputLabel>이메일 주소</InputLabel>
            <InputBox>
              <Input
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="이메일 주소를 입력해주세요"
              />
            </InputBox>

            <SigninBtn onClick={handleAuth}>인증번호 발송</SigninBtn>
          </ContentsBox>
        )}
      </SigninContents>
    </SigninBase>
  );
}
const SigninBase = styled.main`
  width: 100%;
  max-width: 450px;
  min-width: 280px;
  height: 100vh;
  margin: 0 auto;
`;

const SigninContents = styled.article`
  height: 100%;
  display: flex;
  flex-flow: column;
  align-items: center;
  justify-content: center;
`;

const LogoBox = styled.div`
  background-color: #272b3c;
  width: 100%;
  height: 145px;
  display: flex;
  flex-flow: column;
  align-items: center;
  justify-content: center;
  padding: 16px 0;
  border-radius: 8px 8px 0 0;
`;

const LogoImg = styled.img`
  width: 52%;
  height: 50%;
  display: block;
  object-fit: cover;
`;

const SigninP = styled.p`
  margin-top: 12px;
  color: #fff;
  font-size: 18px;
  font-weight: 500;
  letter-spacing: -0.5px;
`;

const ContentsBox = styled.div`
  background-color: #fff;
  width: 100%;
  
  padding: 30px 24px;
  border-radius: 0 0 8px 8px;
  box-shadow: rgba(0, 0, 0, 0.04) 0px 3px 5px;
`;

const InputLabel = styled.label`
  padding-left: 3px;
  font-size: 14px;
  color: ${(props) => props.theme.gray_07};
`;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 8px;
  padding: 0 16px;
  border: 1px solid ${(props) => props.theme.table_line03};
  border-radius: 8px;
`;

const Input = styled.input`
  width: 80%;
  padding: 12px 0;
  border: none;
  &::placeholder {
    color: ${(props) => props.theme.gray_06};
  }
`;

const InputAuthTime = styled.span`
  font-size: 14px;
  color: #ff8f8f;
`;

const InputInfo = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 16px;
  font-size: 14px;
`;

const InfoP = styled.p`
  color: #96a0b5;
`;

const ReAuthBtn = styled.button`
  font-weight: 500;
  font-size: 14px;
  color: #656d9a;
`;

const SigninBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  width: 100%;
  height: 45px;
  padding: 13px 0;
  margin-top: 30px;
  border-radius: 6px;
  color: #fff;
  font-size: 15px;
  &:disabled {
    background-color: #ececec;
    cursor: default;
  }
`;

File: ./quality-admin/src/component/Users/UsersCompoonent.tsx
Content:
import { NextPage } from 'next';
import { useRef, useState, useCallback } from 'react';
import styled from 'styled-components';


import { TableBody, TableCell, TableRow, Checkbox } from '@mui/material';

import CheckTable from '../Common/Table/CheckTable';
import UserDetail from './UserDetail';
import RefreshBtn from '../Common/Buttons/RefreshBtn';

import { IoSearchOutline } from 'react-icons/io5';

import { UsersType, DetailUser } from '../../../type/usersType';
import { useRouter } from 'next/router';

interface UsersComponentProps {
  usersData: UsersType;
  checkedItems: { [key: number]: boolean };
  selectAll: boolean;
  setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;
  handleChangeItem: (
    idx: number
  ) => (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleDelete: () => void;
}

const UsersComponent: NextPage<UsersComponentProps> = ({
  usersData,
  setOpenModal,
  checkedItems,
  selectAll,
  handleSelectAll,
  handleChangeItem,
  handleDelete,
}) => {
  const { data } = usersData;
  const router = useRouter();
  const inputRef = useRef<HTMLInputElement>(null);

  const [detailData, setDetailData] = useState<DetailUser>({
    modal: false,
    data: {
      id: null,
      created_at: null,
      user_name: null,
      user_role: null,
      user_email: null,
      user_phone: null,
    },
  });

  const tableHeader: string[] = [
    '이름',
    '담당직무',
    '이메일주소',
    '연락처',
    '상세보기',
  ];

  const tableBody = data.map((data, idx) => {
    return (
      <TableBody key={data.id}>
        <StyledTableRow iseven={idx % 2 === 0}>
          <StyledTableCell padding="checkbox">
            <Checkbox
              color="success"
              checked={checkedItems[data.id] || false}
              onChange={handleChangeItem(data.id)}
            />
          </StyledTableCell>
          <StyledTableCell>{data.user_name}</StyledTableCell>
          <StyledTableCell>{data.user_role}</StyledTableCell>
          <StyledTableCell>{data.user_email}</StyledTableCell>
          <StyledTableCell>{data.user_phone}</StyledTableCell>
          <StyledTableCell>
            <DetailBtn
              onClick={() => {
                setDetailData({
                  modal: true,
                  data: data,
                });
              }}
            >
              상세보기
            </DetailBtn>
          </StyledTableCell>
        </StyledTableRow>
      </TableBody>
    );
  });

  
  const [optionState, setOptionState] = useState<string>('전체보기');
  
  const getOptionValue = (
    option: string,
    name: string,
    input: string | number | undefined
  ) => {
    return option === name && inputRef.current?.value ? input : null;
  };
  
  const handleSearch = useCallback(() => {
    router.push({
      pathname: '/users',
      query: {
        user_name:
          optionState === '이름'
            ? getOptionValue(optionState, '이름', inputRef.current?.value)
            : null,
        user_role:
          optionState === '담당직무'
            ? getOptionValue(optionState, '담당직무', inputRef.current?.value)
            : null,
        user_email:
          optionState === '이메일주소'
            ? getOptionValue(optionState, '이메일주소', inputRef.current?.value)
            : null,
        user_phone:
          optionState === '연락처'
            ? getOptionValue(
                optionState,
                '연락처',
                Number(inputRef.current?.value)
              )
            : null,
      },
    });
  }, [optionState, inputRef]);

  
  const handleOnKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const handleClose = useCallback(() => {
    const urlWithoutQuery = window.location.origin + window.location.pathname;

    window.location.href = urlWithoutQuery;
  }, [router]);

  return (
    <UserBase>
      <UserH1>이용자 관리</UserH1>
      <SearchBase>
        <FaqBox>
          <SOBox>
            <Select
              onChange={(e) => {
                if (e.target.value === '전체선택') {
                  handleClose();
                }
                setOptionState(e.target.value);
              }}
            >
              <Option>전체선택</Option>
              <Option>이름</Option>
              <Option>담당직무</Option>
              <Option>이메일주소</Option>
              <Option>연락처</Option>
            </Select>
          </SOBox>
          <InputBox>
            <EntityLabel>
              <SearchIcon />
            </EntityLabel>
            <EntityInput ref={inputRef} onKeyDown={handleOnKeyPress} />
            <RefreshBtn />
          </InputBox>
        </FaqBox>
        <UserBtnBox>
          <DeleteBtn onClick={handleDelete}>삭제</DeleteBtn>
          <AddBtn
            onClick={() => {
              setOpenModal(true);
            }}
          >
            신규추가
          </AddBtn>
        </UserBtnBox>
      </SearchBase>

      <CheckTable
        tableHeader={tableHeader}
        tableBody={tableBody}
        selectAll={selectAll}
        handleSelectAll={handleSelectAll}
      />
      {detailData.modal && (
        <UserDetail detailData={detailData} setDetailData={setDetailData} />
      )}
    </UserBase>
  );
};

export default UsersComponent;

const UserBase = styled.div``;
const UserH1 = styled.h1`
  padding: 8px;
  font-size: 20px;
  font-weight: 600;
`;



const SearchBase = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 24px;
`;
const FaqBox = styled.div`
  display: flex;
`;


const SOBox = styled.div`
  margin-right: 12px;
`;

const Select = styled.select`
  height: 42px;
  padding: 0 16px;
  margin-right: 8px;
  border: 1px solid #ddd;
  border-radius: 5px;
  color: #757575;
  font-size: 14px;
`;

const Option = styled.option``;

const InputBox = styled.div`
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  
  border: 1px solid #ddd;
  border-radius: 5px;
`;

const EntityInput = styled.input`
  width: 210px;
  height: 100%;
  margin-left: 8px;
  border: none;
  font-size: 14px;
`;

const EntityLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  color: #757575;
`;

const UserBtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin: 12px 0;
`;

const DeleteBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  border-radius: 7px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);

  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
`;

const AddBtn = styled(DeleteBtn)`
  margin-left: 12px;
`;

const StyledTableRow = styled(TableRow)<{ iseven: boolean }>`
  background-color: ${(props) =>
    props.iseven ? 'transparent' : 'rgba(168, 181, 209, 0.05)'};
  &:hover {
    
    
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;

const DetailBtn = styled.button`
  background-color: rgba(34, 197, 94, 0.1);
  color: ${(props) => props.theme.primary_01};
  padding: 12px 16px;
  border-radius: 6px;
`;

File: ./quality-admin/src/component/Users/UserDetail.tsx
Content:
import { NextPage } from 'next';
import { useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


import { DetailUser } from '../../../type/usersType';


interface UserDetailProps {
  detailData: DetailUser;
  setDetailData: React.Dispatch<React.SetStateAction<DetailUser>>;
}

const UserDetail: NextPage<UserDetailProps> = ({
  detailData,
  setDetailData,
}) => {
  const router = useRouter();

  const nameRef = useRef<HTMLInputElement>(null);
  const emailRef = useRef<HTMLInputElement>(null);
  const roleRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);

  
  const handleModify = useCallback(async () => {
    let body = {
      id: detailData.data.id,
      user_name: nameRef.current?.value,
      user_email: emailRef.current?.value,
      user_role: roleRef.current?.value,
      user_phone: String(phoneRef.current?.value),
    };

    try {
      const res = await axios.patch(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
        body
      );

      if (res.status === 200) {
        setDetailData({
          modal: false,
          data: {
            id: null,
            created_at: null,
            user_name: null,
            user_role: null,
            user_email: null,
            user_phone: null,
          },
        });
      }
    } catch (err) {
      console.log(err);
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  }, [nameRef, emailRef, roleRef, phoneRef]);
  return (
    <Modal>
      <SignupBase>
        <SignupHeading>
          <SignupH2>이용자 상세</SignupH2>
          <CloseBtn
            onClick={() => {
              setDetailData({
                modal: false,
                data: {
                  id: null,
                  created_at: null,
                  user_name: null,
                  user_role: null,
                  user_email: null,
                  user_phone: null,
                },
              });
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </SignupHeading>
        <SignupBody>
          <SignupMenu>
            <SignupItem>
              <SignupLabel>이름</SignupLabel>
              <SignupInput
                ref={nameRef}
                defaultValue={detailData?.data?.user_name ?? ''}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>Email</SignupLabel>
              <SignupInput
                ref={emailRef}
                defaultValue={detailData.data.user_email ?? ''}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>담당직무</SignupLabel>
              <SignupInput
                ref={roleRef}
                defaultValue={detailData.data.user_role ?? ''}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>핸드폰번호</SignupLabel>
              <SignupInput
                type="tel"
                ref={phoneRef}
                defaultValue={detailData.data.user_phone ?? ''}
              />
            </SignupItem>
          </SignupMenu>
        </SignupBody>
        <BtnBox>
          <ApplyBtn onClick={handleModify}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </SignupBase>
    </Modal>
  );
};

export default UserDetail;

const SignupBase = styled.div`
  min-width: 440px;
  padding: 20px 16px 28px;
`;

const SignupHeading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const SignupH2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const SignupBody = styled.div`
  margin-top: 18px;
`;

const SignupMenu = styled.ul``;

const SignupItem = styled.li`
  padding: 12px 0;
  &:first-child {
    padding: 0 0 12px;
  }
`;

const SignupLabel = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const SignupInput = styled.input`
  display: flex;
  align-items: center;
  width: 100%;
  height: 34px;
  padding: 0 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: #96a0b5;
  }
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/component/Users/UserSignup.tsx
Content:
import { useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import axios from 'axios';

import { TfiClose } from 'react-icons/tfi';

import Modal from '../Common/Modal';
import ApplyBtn from '../Common/Buttons/ApplyBtn';


interface UserSignupProps {
  setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;
}

const UserSignup = ({ setOpenModal }: UserSignupProps) => {
  const router = useRouter();
  const nameRef = useRef<HTMLInputElement>(null);
  const emailRef = useRef<HTMLInputElement>(null);
  const roleRef = useRef<HTMLInputElement>(null);
  const phoneRef = useRef<HTMLInputElement>(null);

  
  const handleAdd = useCallback(async () => {
    let body = {
      name: nameRef.current?.value,
      email: emailRef.current?.value,
      role: roleRef.current?.value,
      phoneNo: String(phoneRef.current?.value),
    };

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
        body
      );

      if (res.status === 200) {
        setOpenModal(false);
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    } finally {
      router.replace(router.asPath);
    }
  }, [nameRef, emailRef, roleRef, phoneRef]);

  return (
    <Modal>
      <SignupBase>
        <SignupHeading>
          <SignupH2>이용자 신규등록</SignupH2>
          <CloseBtn
            onClick={() => {
              setOpenModal(false);
            }}
          >
            <CloseIcon />
          </CloseBtn>
        </SignupHeading>
        <SignupBody>
          <SignupMenu>
            <SignupItem>
              <SignupLabel>이름</SignupLabel>
              <SignupInput ref={nameRef} placeholder="홍길동" />
            </SignupItem>
            <SignupItem>
              <SignupLabel>Email</SignupLabel>
              <SignupInput ref={emailRef} placeholder="email" />
            </SignupItem>
            <SignupItem>
              <SignupLabel>담당직무</SignupLabel>
              <SignupInput ref={roleRef} placeholder="데이터관리" />
            </SignupItem>
            <SignupItem>
              <SignupLabel>핸드폰번호</SignupLabel>
              <SignupInput
                type="number"
                ref={phoneRef}
                placeholder="하이픈(-)기호 없이 입력해주세요"
              />
            </SignupItem>
          </SignupMenu>
        </SignupBody>
        <BtnBox>
          <ApplyBtn onClick={handleAdd}>저장 및 닫기</ApplyBtn>
        </BtnBox>
      </SignupBase>
    </Modal>
  );
};

export default UserSignup;

const SignupBase = styled.div`
  min-width: 440px;
  padding: 20px 16px;
`;

const SignupHeading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const SignupH2 = styled.h2`
  font-size: 17px;
  font-weight: 400;
`;

const CloseBtn = styled.button`
  padding: 2px 7px;
  color: #999;
  &:hover {
    color: ${(props) => props.theme.font_color};
  }
`;

const CloseIcon = styled(TfiClose)`
  font-size: 16px;
`;


const SignupBody = styled.div`
  margin-top: 18px;
`;

const SignupMenu = styled.ul``;

const SignupItem = styled.li`
  padding: 12px 0;
  &:first-child {
    padding: 0 0 12px;
  }
`;

const SignupLabel = styled.label`
  margin-left: 5px;
  font-size: 13px;
`;

const SignupInput = styled.input`
  display: flex;
  align-items: center;
  width: 100%;
  height: 34px;
  padding: 0 10px;
  margin-top: 8px;
  border: 1px solid ${(props) => props.theme.gray_03};
  border-radius: 5px;
  &::placeholder {
    color: #96a0b5;
  }
`;

const BtnBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  margin-top: 12px;
`;

File: ./quality-admin/src/utils/handleSearch.ts
Content:
import { Router, useRouter } from 'next/router';
import { useCallback } from 'react';

const handleSearch = () => {
  const router = useRouter();

  const handleMoveRoute = useCallback(
    (key: string, value: string | undefined) => {
      router.push({
        pathname: router.pathname,
        query: {
          ...router.query, 
          [key]: value,
        },
      });
    },
    [router]
  );

  return { handleMoveRoute };
};

export default handleSearch;

File: ./quality-admin/src/utils/handleDwn.ts
Content:
import dayjs from 'dayjs';

import * as Excel from 'exceljs';
import { saveAs } from 'file-saver';

const handleExcelDwn = async (headers: string[], rows: any[], type: string) => {
  try {
    
    const wb = new Excel.Workbook();
    const sheet = wb.addWorksheet('Sheet1');

    
    const headerRow = sheet.addRow(headers);
    
    
    headerRow.eachCell((cell: any, colNumber: any) => {
      styleHeaderCell(cell);
      sheet.getColumn(colNumber).width = 15;
    });

    
    rows
      .sort((a, b) => a.id - b.id)
      .forEach((item) => {
        const rowDatas = Object.values(item);
        const row = sheet.addRow(rowDatas);

        
        row.getCell(6).numFmt = '@';
      });

    
    const fileData = await wb.xlsx.writeBuffer(); 
    const blob = new Blob([fileData], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    });
    saveAs(blob, `${type}_${dayjs(new Date()).format('YYYYMMDD')}`);
  } catch (err) {
    console.log(err);
  }
};

const styleHeaderCell = (cell: any) => {
  
  cell.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'ffe699' },
  };
  
  cell.alignment = {
    vertical: 'middle',
    horizontal: 'center',
    wrapText: true,
  };
};

export default handleExcelDwn;

File: ./quality-admin/src/utils/downloadData.ts
Content:
import dayjs from 'dayjs';

import * as Excel from 'exceljs';
import { saveAs } from 'file-saver';

import { DownloadType } from '../../type/commonType';

const handleDwn = async (
  headers: string[],
  rows: DownloadType[],
  type: string
) => {
  try {
    
    const wb = new Excel.Workbook();
    const sheet = wb.addWorksheet('Sheet1');

    
    const headerRow = sheet.addRow(headers);
    
    
    headerRow.eachCell((cell) => {
      styleHeaderCell(cell);
    });

    
    rows
      .sort((a, b) => a.id - b.id)
      .forEach((item) => {
        const rowDatas = Object.values(item); 
        sheet.addRow(rowDatas); 
      });

    
    const fileData = await wb.xlsx.writeBuffer();
    const blob = new Blob([fileData], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    });
    saveAs(blob, `${type}_${dayjs(new Date()).format('YYYYMMDD')}`);
  } catch (err) {
    console.log(err);
  }
};

const styleHeaderCell = (cell: Excel.Cell) => {
  
  cell.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'ffe699' },
  };
  
  cell.alignment = {
    vertical: 'middle',
    horizontal: 'center',
    wrapText: true,
  };
};

export default handleDwn;

File: ./quality-admin/src/utils/checkAuth.ts
Content:
import { GetServerSidePropsContext } from 'next';
import cookie from 'cookie';

const checkAuth = (context: GetServerSidePropsContext) => {
  
  const parsedCookie = context.req?.headers.cookie
    ? cookie.parse(context.req.headers.cookie)
    : {};

  if (!parsedCookie['qhrjs-access-token']) {
    
    return {
      redirect: {
        permanent: false,
        destination: '/signin',
      },
    };
  }
};

export default checkAuth;

File: ./quality-admin/src/container/FeeContainer.tsx
Content:
import { NextPage } from 'next';
import { useRef, useState, useCallback, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import { FeeProps } from '../../type/feeType';

import useCheckbox from '@/hooks/useCheckbox';


import Card from '@/component/Common/Card';
import FeeComponent from '@/component/Fee/FeeComponent';
import AddFee from '@/component/Fee/AddFee';
import EditFee from '@/component/Fee/EditFee';
import Toast from '@/component/Common/Toast';

const FeeContainer: NextPage<FeeProps> = ({ feeData }) => {
  const router = useRouter();
  const [addModal, setAddModal] = useState(false);
  const [editModal, setEditModal] = useState(false);
  const [openToast, setOpenToast] = useState(false);

  
  const { checkedItems, selectAll, handleChangeItem, handleSelectAll } =
    useCheckbox(feeData.datas);

  const inputRef = useRef<HTMLInputElement>(null);
  
  const [optionState, setOptionState] = useState<string>('제품명');

  
  const getOptionValue = (
    option: string,
    name: string,
    input: string | number | undefined
  ) => {
    return option === name && inputRef.current?.value ? input : null;
  };

  
  const handleSearch = useCallback(() => {
    router.push({
      pathname: '/chatbot/fee',
      query: {
        productName:
          optionState === '제품명'
            ? getOptionValue(optionState, '제품명', inputRef.current?.value)
            : null,
        nameCheck:
          optionState === '검사항목'
            ? getOptionValue(optionState, '검사항목', inputRef.current?.value)
            : null,
        feeValue:
          optionState === '수수료'
            ? getOptionValue(
                optionState,
                '수수료',
                Number(inputRef.current?.value)
              )
            : null,
      },
    });
  }, [optionState, inputRef]);

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/fee');
    }
  }, []);

  
  const handleDelete = async () => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`,
        {
          params: {
            check: checkedItems,
          },
        }
      );

      if (res.status === 200) {
        
        router.replace(router.asPath);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else if (statusCode === 501) {
          setEditModal(false);
          setOpenToast(true);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };

  return (
    <Card>
      <FeeComponent
        feeData={feeData}
        inputRef={inputRef}
        setAddModal={setAddModal}
        setEditModal={setEditModal}
        optionState={optionState}
        setOptionState={setOptionState}
        handleSearch={handleSearch}
        checkedItems={checkedItems}
        selectAll={selectAll}
        handleChangeItem={handleChangeItem}
        handleSelectAll={handleSelectAll}
        handleDelete={handleDelete}
      />
      {addModal && <AddFee setAddModal={setAddModal} />}
      {editModal && (
        <EditFee
          checkedItems={checkedItems}
          setOpenToast={setOpenToast}
          setEditModal={setEditModal}
        />
      )}
      {openToast && (
        <Toast setOpenToast={setOpenToast}>
          <ToastBox>
            <ToastP>
              수수료를 변경하려면 동일한 검사 항목만 선택해야 합니다.
            </ToastP>
            <LightP>
              여러 항목을 선택할 경우, 수수료 변경이 적용되지 않습니다.
            </LightP>
          </ToastBox>
        </Toast>
      )}
    </Card>
  );
};

export default FeeContainer;


const ToastBox = styled.div`
  margin-left: 16px;
  line-height: 1.4;
`;
const ToastP = styled.p`
  color: #601f22;
  font-weight: 600;
`;

const LightP = styled(ToastP)`
  font-weight: 300;
  font-size: 14px;
`;

File: ./quality-admin/src/container/FaqContainer.tsx
Content:
import { NextPage } from 'next';
import { useCallback, useEffect, useRef, useState } from 'react';


import { useRouter } from 'next/router';

import { FaqProps, ModalFaqType } from '../../type/faqType';


import Card from '@/component/Common/Card';
import FaqComponent from '@/component/FAQ/FaqComponent';
import AddFaq from '@/component/FAQ/AddFaq';
import DeleteFaq from '@/component/FAQ/DeleteFaq';
import ModifyFaq from '@/component/FAQ/ModifyFaq';

const FaqContainer: NextPage<FaqProps> = ({ faqData }) => {
  const router = useRouter();
  const emailRef = useRef<HTMLInputElement>(null);
  
  const [addModal, setAddModal] = useState<boolean>(false);
  const [deleteModal, setDeleteModal] = useState<Partial<ModalFaqType>>({
    id: null,
    question: null,
    modal: false,
  });
  const [modifyModal, setModifyModal] = useState<ModalFaqType>({
    id: null,
    question: null,
    answer: null,
    tag: '',
    modal: false,
  });

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/faq');
    }
  }, []);

  
  const handleOnkey = useCallback(() => {
    router.push({
      pathname: '/chatbot/faq',
      query: {
        filter: emailRef?.current?.value,
      },
    });
  }, [emailRef]);

  return (
    <Card>
      <FaqComponent
        faqData={faqData}
        emailRef={emailRef}
        handleOnkey={handleOnkey}
        setAddModal={setAddModal}
        setDeleteModal={setDeleteModal}
        setModifyModal={setModifyModal}
      />
      {addModal && <AddFaq setAddModal={setAddModal} />}
      {deleteModal.modal && (
        <DeleteFaq deleteModal={deleteModal} setDeleteModal={setDeleteModal} />
      )}
      {modifyModal.modal && (
        <ModifyFaq modifyModal={modifyModal} setModifyModal={setModifyModal} />
      )}
    </Card>
  );
};

export default FaqContainer;

File: ./quality-admin/src/container/UsersContainer.tsx
Content:
import { NextPage } from 'next';
import { useState } from 'react';
import axios from 'axios';

import useCheckbox from '@/hooks/useCheckbox';

import Card from '@/component/Common/Card';
import UsersComponent from '@/component/Users/UsersCompoonent';
import UserSignup from '@/component/Users/UserSignup';

import { UsersProps } from '../../type/usersType';
import { useRouter } from 'next/router';

const UsersContainer: NextPage<UsersProps> = ({ usersData }) => {
  const { data } = usersData;
  const router = useRouter();
  
  const { checkedItems, selectAll, handleChangeItem, handleSelectAll } =
    useCheckbox(data);
  const [oepnModal, setOpenModal] = useState<boolean>(false);

  
  const handleDelete = async () => {
    try {
      const res = await axios.request({
        method: 'delete',
        url: `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
        data: {
          check: checkedItems, 
        },
      });
      if (res.status === 200) {
        router.replace(router.asPath);
      }
    } catch (err: unknown) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };
  return (
    <Card>
      <UsersComponent
        checkedItems={checkedItems}
        selectAll={selectAll}
        handleChangeItem={handleChangeItem}
        handleSelectAll={handleSelectAll}
        usersData={usersData}
        setOpenModal={setOpenModal}
        handleDelete={handleDelete}
      />
      {oepnModal && <UserSignup setOpenModal={setOpenModal} />}
    </Card>
  );
};

export default UsersContainer;

File: ./quality-admin/src/container/FrequencyContainer.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useEffect, useState, useCallback } from 'react';
import axios from 'axios';

import { FrequencyProps } from '../../type/frequencyType';

import FrequencyComponent from '@/component/Frequency/FrequencyComponent';
import Card from '@/component/Common/Card';
import useCheckbox from '@/hooks/useCheckbox';
import ModifyFrequency from '@/component/Frequency/ModifyFrequency';
import ExcelUpld from '@/component/Common/ExcelUpld';

const FrequencyContainer: NextPage<FrequencyProps> = ({ frequencyData }) => {
  const { categories, datas } = frequencyData;
  const router = useRouter();
  
  const [openUpld, setOpenUpld] = useState(false);
  const [upldDatas, setUpldDatas] = useState(null);
  const [upldResult, setUpldResult] = useState({
    status: false,
    success: 0,
    failure: 0,
    msg: null,
  });
  
  const { checkedItems, selectAll, handleChangeItem, handleSelectAll } =
    useCheckbox(datas);

  
  const [modifyModal, setModifyModal] = useState<boolean>(false);

  
  const [scdOptions, setScdOptions] = useState<string[]>([]);

  
  const getCategories = useCallback(
    (query: string | string[]) => {
      const scdSet = new Set<string>();

      
      categories.forEach((category) => {
        if (category.fst_category === query) {
          scdSet.add(category.scd_category);
        }
      });

      setScdOptions(Array.from(scdSet));
    },
    [router.query]
  );

  useEffect(() => {
    if (router.query.fst) {
      getCategories(router.query.fst);
    } else {
      getCategories('식품업');
    }
  }, [router.query]);

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/frequency');
    }
  }, []);

  const handleDelete = async () => {
    try {
      const res = await axios.delete(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        {
          params: {
            check: checkedItems,
          },
        }
      );
      console.log(res);

      if (res.status === 200) {
        
        router.replace(router.asPath);
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 500) {
          alert(`${errorMessage}`);
        } else {
          alert(`${errorMessage}`);
        }
      } else {
        
        alert('서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요.');
      }
    }
  };

  
  const mapRowData = (rowArray: any[]) => {
    return {
      fst_category: rowArray[0]?.value,
      scd_category: rowArray[1]?.value,
      product: rowArray[2]?.value,
      name: rowArray[3]?.value,
      fee: String(rowArray[4]?.value),
      frequency: rowArray[5]?.value,
      remarks: rowArray[6]?.value,
      test_code: rowArray[7]?.value,
    };
  };
  
  const handleUpldDatas = useCallback(async () => {
    const body = {
      datas: upldDatas,
    };
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
        body
      );
      if (res.status === 200) {
        console.log(res.data);

        setUpldResult({
          status: true,
          success:
            res.data.successCount === undefined ? 0 : res.data.successCount,
          failure:
            res.data.duplicateCount === undefined ? 0 : res.data.duplicateCount,
          msg: null,
        });
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 400) {
          return alert(`${errorMessage}`);
        } else {
          return alert(`${errorMessage}`);
        }
      }
    }
  }, [upldDatas]);
  return (
    <Card>
      <FrequencyComponent
        handleDelete={handleDelete}
        checkedItems={checkedItems}
        setModifyModal={setModifyModal}
        setOpenUpld={setOpenUpld}
        scdOptions={scdOptions}
        frequencyData={frequencyData}
        selectAll={selectAll}
        handleChangeItem={handleChangeItem}
        handleSelectAll={handleSelectAll}
      />
      {openUpld && (
        <ExcelUpld
          upldResult={upldResult}
          setUpldDatas={setUpldDatas}
          setOpenUpld={setOpenUpld}
          mapRowData={mapRowData}
          handleUpldDatas={handleUpldDatas}
        />
      )}
      {modifyModal && (
        <ModifyFrequency
          checkedItems={checkedItems}
          setModifyModal={setModifyModal}
        />
      )}
    </Card>
  );
};

export default FrequencyContainer;

File: ./quality-admin/src/container/SigninContainer.tsx
Content:
import React, { useCallback } from 'react';

import SigninComponent from '@/component/Signin/SigninComponent';

const SigninContainer: React.FC = () => {
  return <SigninComponent />;
};

export default SigninContainer;

File: ./quality-admin/src/container/InstituteContainer.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import dayjs from 'dayjs';

import { InstituteProps } from '../../type/instituteType';

import Card from '@/component/Common/Card';
import InstituteComponent from '@/component/Institute/InstituteComponent';
import ExcelUpld from '@/component/Common/ExcelUpld';

const InstituteContainer: NextPage<InstituteProps> = ({ instituteData }) => {
  const router = useRouter();

  
  const [openUpld, setOpenUpld] = useState(false);
  const [upldDatas, setUpldDatas] = useState(null);
  const [upldResult, setUpldResult] = useState({
    status: false,
    success: null,
    failure: [],
    msg: null,
  });

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/chatbot/institute');
    }
  }, []);

  
  const mapRowData = (rowArray: any[]) => {
    return {
      category: rowArray[0]?.value,
      name: rowArray[1]?.value,
      director: rowArray[2]?.value,
      location: rowArray[3]?.value,
      region: rowArray[4]?.value,
      district: rowArray[5]?.value,
      phone: rowArray[6]?.value,
      fax: rowArray[7]?.value,
      remarks: rowArray[8]?.value,
      expiration: dayjs(rowArray[9]?.value).format('YYYY.MM.DD'),
    };
  };
  
  const handleUpldDatas = useCallback(async () => {
    const body = {
      institutes: upldDatas,
    };
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
        body
      );
      console.log(res);
      if (res.status === 200) {
        setUpldResult({
          status: true,
          success: upldDatas,
          failure: [],
          msg: null,
        });
      }
    } catch (err) {
      if (axios.isAxiosError(err)) {
        const data = err.response?.data;
        const statusCode = err.response?.status;
        const errorMessage = err.response?.data?.msg || '알 수 없는 오류';

        if (statusCode === 400) {
          alert(`${errorMessage}`);
        } else if (statusCode === 500) {
          setUpldResult({
            status: true,
            success: null,
            failure: data.failedRows,
            msg: data.message,
          });
        } else {
          alert(`${errorMessage}`);
        }
      }
    }
  }, [upldDatas]);

  return (
    <Card>
      <InstituteComponent
        instituteData={instituteData}
        setOpenUpld={setOpenUpld}
      />
      {openUpld && (
        <ExcelUpld
          upldResult={upldResult}
          setUpldDatas={setUpldDatas}
          setOpenUpld={setOpenUpld}
          mapRowData={mapRowData}
          handleUpldDatas={handleUpldDatas}
        />
      )}
    </Card>
  );
};

export default InstituteContainer;

File: ./quality-admin/src/styles/globalstyles.ts
Content:
import { createGlobalStyle } from 'styled-components';
import Reset from 'styled-reset';

const GlobalStyles = createGlobalStyle`
${Reset}

  @font-face {
    font-family: 'Noto Sans KR', sans-serif;
    src: 
    url('https:
    font-style: normal;
  }

:root {
}

* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  line-height: inherit;
}

body {
  background: #f7f9fB;
  font-family: 'Noto Sans KR', sans-serif;
  font-weight: 400;
  font-size: 15px;
  height: calc(var(--vh, 1vh) * 100);
  color: ${(props) => props.theme.font_color};
  box-sizing: border-box;
  ::-webkit-scrollbar {
    display: none;
  }
}
a {
  text-decoration: none;
  color: inherit;
}
button {
  font-family: 'Noto Sans KR', sans-serif;
  background: transparent;
  font-weight: 400;
  font-size: 14px;
  color: ${(props) => props.theme.font_color};
  border: 0 none;
  outline:none;
  cursor: pointer;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
}
ol, ul, li {
  list-style: none;
}
select, option {
  background: transparent;
  font-family: 'Noto Sans KR', sans-serif;
  font-size: 14px;
  
  
  
  color: ${(props) => props.theme.font_color};
}
a, button, input {
  font-family: 'Noto Sans KR', sans-serif;
  appearance: none;
  -webkit-appearance: none;
  -webkit-border-radius: 0;
  -webkit-tap-highlight-color: transparent;
  outline:none;
}

`;

export default GlobalStyles;

File: ./quality-admin/src/styles/theme.ts
Content:
const theme = {
  
  primary_01: '#22c55e',
  primary_02: '#20bb59', 

  
  gray_01: '#f4f6f9',
  gray_02: '#eaeff5',
  gray_03: '#d9e1ec',
  gray_04: '#c1cde0',
  gray_05: '#a8b5d1',
  gray_06: '#95a0c5',
  gray_07: '#656D9A',
  gray_08: '#555b7e',
  gray_09: '#2b2d3b',
  
  table_line01: '#d4d9e1',
  table_line02: '#dfe3e9',
  table_line03: '#E2E7F1',
  table_line04: '#f5f5f5',
  table_bg01: '#effcf3', 
  table_bg02: '#fcfcfc', 

  
  ui_red01: '#FF8F8F',
  ui_red02: '#ee4d5a',
  ui_red03: '#f65745',

  font_color: '#2b2d3b',
};

export default theme;

File: ./quality-admin/src/hooks/useCheckbox.ts
Content:
import { useState, useEffect } from 'react';

const useCheckbox = (datas: { id: number }[]) => {
  const [checkedItems, setCheckedItems] = useState<{ [key: number]: boolean }>(
    {}
  );
  const [selectAll, setSelectAll] = useState<boolean>(false);

  
  const handleChangeItem =
    (id: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
      setCheckedItems((prevState) => ({
        ...prevState,
        [id]: e.target.checked,
      }));
    };

  
  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    const isChecked = e.target.checked;
    setSelectAll(isChecked);

    const updatedCheckedItems = datas.reduce(
      (acc, data) => {
        acc[data.id] = isChecked;
        return acc;
      },
      {} as { [key: number]: boolean }
    );

    setCheckedItems(updatedCheckedItems);
  };

  
  useEffect(() => {
    const initialCheckedItems = datas.reduce(
      (acc, data) => {
        acc[data.id] = false;
        return acc;
      },
      {} as { [key: number]: boolean }
    );
    setCheckedItems(initialCheckedItems);
    setSelectAll(false); 
  }, [datas]); 

  return {
    checkedItems,
    selectAll,
    handleChangeItem,
    handleSelectAll,
  };
};

export default useCheckbox;

File: ./quality-admin/src/pages/index.tsx
Content:
import checkAuth from '@/utils/checkAuth';
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';

const Home: NextPage = () => {
  return <div></div>;
};

export default Home;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);

  
  if (authResult?.redirect) {
    return authResult;
  }
  return {
    redirect: {
      permanent: false,
      destination: '/users',
    },
  };
};

File: ./quality-admin/src/pages/chatbot/institute.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { InstituteProps } from '../../../type/instituteType';

import InstituteContainer from '@/container/InstituteContainer';
import checkAuth from '@/utils/checkAuth';

const institute: NextPage<InstituteProps> = ({ instituteData }) => {
  return <InstituteContainer instituteData={instituteData} />;
};

export default institute;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = [
    'fst',
    'nameCheck',
    'regionValue',
    'districtValue',
    'page',
    'pageSize',
  ];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/institute`,
    {
      params,
    }
  );

  const instituteData = res.data;
  console.log(instituteData);
  return {
    props: { instituteData },
  };
};

File: ./quality-admin/src/pages/chatbot/fee.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { FeeProps } from '../../../type/feeType';

import FeeContainer from '@/container/FeeContainer';
import checkAuth from '@/utils/checkAuth';
const fee: NextPage<FeeProps> = ({ feeData }) => {
  return <FeeContainer feeData={feeData} />;
};

export default fee;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = [
    'fst',
    'productName',
    'nameCheck',
    'feeValue',
    'page',
    'pageSize',
  ];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(`${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/fee`, {
    params,
  });

  const feeData = res.data;

  return {
    props: { feeData },
  };
};

File: ./quality-admin/src/pages/chatbot/frequency.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { FrequencyProps } from '../../../type/frequencyType';

import FrequencyContainer from '@/container/FrequencyContainer';
import checkAuth from '@/utils/checkAuth';

const frequency: NextPage<FrequencyProps> = ({ frequencyData }) => {
  return <FrequencyContainer frequencyData={frequencyData} />;
};

export default frequency;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = ['fst', 'scd', 'productName', 'page', 'pageSize'];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/frequency`,
    {
      params,
    }
  );

  const frequencyData = res.data;
  return {
    props: { frequencyData },
  };
};

File: ./quality-admin/src/pages/chatbot/faq.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { FaqProps } from '../../../type/faqType';

import FaqContainer from '@/container/FaqContainer';
import checkAuth from '@/utils/checkAuth';

const faq: NextPage<FaqProps> = ({ faqData }) => {
  return <FaqContainer faqData={faqData} />;
};

export default faq;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const filter = context.query.filter
    ? (context.query.filter as unknown as string)
    : null;

  const res = await axios.get(`${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/faq`, {
    params: {
      filter: filter,
    },
  });

  const faqData = res.data.data;

  return {
    props: { faqData },
  };
};

File: ./quality-admin/src/pages/_document.tsx
Content:
import Document, {
  Html,
  Head,
  Main,
  NextScript,
  DocumentContext,
} from 'next/document';
import { ServerStyleSheet } from 'styled-components';

class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;
    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App) => (props) =>
            sheet.collectStyles(<App {...props} />),
        });

      const initialProps = await Document.getInitialProps(ctx);
      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }

  render() {
    return (
      <Html lang="ko">
        <Head>
          <meta charSet="utf-8" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

File: ./quality-admin/src/pages/users/index.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import UsersContainer from '@/container/UsersContainer';

import { UsersProps } from '../../../type/usersType';
import checkAuth from '@/utils/checkAuth';

const users: NextPage<UsersProps> = ({ usersData }) => {
  return <UsersContainer usersData={usersData} />;
};

export default users;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const authResult = await checkAuth(context);
  
  if (authResult?.redirect) {
    return authResult;
  }

  const queryParams = ['user_name', 'user_role', 'user_email', 'user_phone'];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );
  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/v1/users`,
    {
      params,
    }
  );

  const usersData = res.data;

  return {
    props: { usersData },
  };
};

File: ./quality-admin/src/pages/_app.tsx
Content:
import type { AppProps } from 'next/app';
import { NextPage } from 'next';

import { ThemeProvider } from 'styled-components';
import GlobalStyles from '@/styles/globalstyles';
import theme from '../styles/theme';


import Layout from '../component/Layout/Layout';

const App: NextPage<AppProps> = ({ Component, pageProps }: AppProps) => {
  return (
    <ThemeProvider theme={theme}>
      <GlobalStyles />
      <Layout>
        <Component {...pageProps} />
      </Layout>
    </ThemeProvider>
  );
};

export default App;

File: ./quality-admin/src/pages/signin.tsx
Content:
import { NextPage } from 'next';
import SigninContainer from '@/container/SigninContainer';

const signin: NextPage = () => {
  return <SigninContainer />;
};

export default signin;

File: ./quality-admin-web/@types/redux.d.ts
Content:
import 'redux';
import { Task } from 'redux-saga';
import { Persistor } from 'redux-persist';

declare module 'redux' {
  export interface Store {
    sagaTask?: Task;
    __persistor?: Persistor | undefined;
  }
}

File: ./quality-admin-web/bin/next-sever.js
Content:
const http = require('http');
const next = require('next');

const dev = process.env.NODE_ENV !== 'production';
const nextApp = next({ dev });
const handle = nextApp.getRequestHandler();
const nextPort = '1880';

nextApp
  .prepare()
  .then(() => {
    http.createServer((req, res) => handle(req, res)).listen(nextPort);
  })
  .catch((e) => {
    console.log('cannot prepare next', e);
  });

File: ./quality-admin-web/config/db.js
Content:
const mysql = require('mysql2');

const db_info = {
  host: '13.209.138.233',
  port: '3306',
  user: 'root',
  password: 'chatbot',
  database: 'qcbot',
};

module.exports = {
  init() {
    return mysql.createPool(db_info);  
  },
  connect(pool) {
    pool.getConnection((err, conn) => {
      if (err) {
        console.error(`mysql connection error : ${err}`);
      } else {
        console.log('mysql is connected successfully!');
        conn.release();  
      }
    });
  }
};

File: ./quality-admin-web/config/jwtMiddleware.js
Content:
const jwt = require('jsonwebtoken');

const jwtMiddleware = (req, res, next) => {
  const token = req.headers['authorization']
    ? req.headers['authorization'].split(' ')[1]
    : null;

  if (!token) {
    return res.status(403).send({
      success: false,
      msg: '로그인이 되어있지 않습니다.',
      error: err,
    });
  }

  try {
    const verifiedToken = jwt.verify(token, process.env.JWT_KEY);
    req.verifiedToken = verifiedToken;

    next();
  } catch (err) {
    return res.status(403).send({
      success: false,
      msg: '등록된 사용자가 아닙니다.',
      error: err,
    });
  }
};

module.exports = jwtMiddleware;

File: ./quality-admin-web/next.config.js
Content:
const nextConfig = {
  reactStrictMode: true,
  compiler: {
    
    styledComponents: true, 
  },
  distDir: '.next',
};

module.exports = nextConfig;

File: ./quality-admin-web/next-env.d.ts
Content:






File: ./quality-admin-web/type/frequencyType.ts
Content:
export interface FrequencyProps {
  frequencyData: FrequencyType;
}

export type FrequencyType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
    name: string;
    fee: number;
    frequency: string;
  }[];
  categories: {
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
  }[];
};

export type AddFrequencyType = {
  fst: string | null;
  scd: string | null;
  trd: string | null;
  product: string | null;
  frequency: string | null;
};

File: ./quality-admin-web/type/faqType.ts
Content:
export interface FaqProps {
  faqData: FaqType[];
}

export type FaqType = {
  id: number;
  created_at: Date;
  modified_at: Date;
  business: string;
  category: string;
  supplement: string;
  question: string;
  answer: string;
  keyword: string;
};

export type ModalFaqType = {
  id: number | null;
  question: string | null;
  answer: string | null;
  tag: string;
  modal: boolean;
};

File: ./quality-admin-web/type/usersType.ts
Content:
export interface UsersProps {
  usersData: UsersType;
}

export type UsersType = {
  data: {
    id: number;
    created_at: Date;
    user_name: string;
    user_role: string;
    user_email: string;
    user_phone: string;
  }[];
  success: boolean;
};

export type DetailUser = {
  modal: boolean;
  data: {
    id: number | null;
    created_at: Date | null;
    user_name: string | null;
    user_role: string | null;
    user_email: string | null;
    user_phone: string | null;
  };
};

File: ./quality-admin-web/type/commonType.ts
Content:

export interface TableProps {
  tableHeader: string[];
  tableBody: React.ReactNode;
}

export interface CheckTableProps {
  tableHeader: string[];
  tableBody: React.ReactNode;
  selectAll: boolean;
  handleSelectAll: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

export type ModalType = {
  add: boolean;
  edit: boolean;
};

File: ./quality-admin-web/type/react-dropdown.d.ts
Content:
import { ReactNode } from 'react';

export interface DropdownOption {
  value: string;
  label?: string;
}

export interface DropdownProps {
  options: DropdownOption[] | string[];
  onChange?: (option: DropdownOption) => void;
  value?: string | DropdownOption;
  placeholder?: string;
  disabled?: boolean;
  className?: string;
  controlClassName?: string;
  placeholderClassName?: string;
  menuClassName?: string;
  arrowClassName?: string;
  arrowClosed?: ReactNode;
  arrowOpen?: ReactNode;
}

declare module 'react-dropdown' {
  const Dropdown: React.FC<DropdownProps>;
  export default Dropdown;
}

File: ./quality-admin-web/type/feeType.ts
Content:
export interface FeeProps {
  feeData: FeeType;
}

export type FeeType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    fst_category: string;
    product: string;
    name: string;
    fee: number;
  }[];
  categories: {
    fst_category: string;
    scd_category: string;
    trd_category: string;
    product: string;
  }[];
};

export type FeeModalType = {
  add: boolean;
  edit: boolean;
};

export type FeeDropdownType = {
  fst: boolean;
  scd: boolean;
  trd: boolean;
};

File: ./quality-admin-web/type/instituteType.ts
Content:
export interface InstituteProps {
  instituteData: InstituteType;
}

export type InstituteType = {
  pageCount: number;
  pageSize: number;
  currentPage: number;
  datas: {
    id: number;
    category: string;
    district: string;
    region: string;
    expiration: string;
    fax: string;
    location: string;
    director: string;
    name: string;
    phone: string;
    remarks: string;
  }[];
  categories: {
    value: string;
    type: string;
  }[];
};

export type ModalInstituteType = {
  modal: boolean;
  data: {
    id: number | null;
    category: string | null;
    district: string | null;
    director: string | null;
    region: string | null;
    expiration: string | null;
    fax: string | null;
    location: string | null;
    name: string | null;
    phone: string | null;
    remarks: string | null;
  };
};

export type DetailInstitute = {
  id: number | null;
  category: string | null;
  district: string | null;
  region: string | null;
  expiration: string | null;
  fax: string | null;
  location: string | null;
  name: string | null;
  phone: string | null;
  remarks: string | null;
};

File: ./quality-admin-web/schedule.js
Content:
const db = require('./config/db');
const axios = require('axios');
const cron = require('node-cron');


const pool = db.init();


async function getAuthToken() {
  const tokenUrl = 'https:

  const headers = {
    'X-IB-Client-Id': 'qhrj_om_6rk1fcim', 
    'X-IB-Client-Passwd': '02B83553LUKO53FJZ2HL', 
    Accept: 'application/json',
  };

  try {
    const response = await axios.post(tokenUrl, {}, { headers });
    return response.data.data.token; 
  } catch (error) {
    console.error('토큰 발급 실패:', error);
    throw new Error('토큰 발급에 실패했습니다.');
  }
}


async function sendAlimTalk(token, recipientInfo) {
  const apiUrl = 'https:

  const headers = {
    'Content-Type': 'application/json',
    Accept: 'application/json',
    Authorization: `Bearer ${token}`,
  };

  const data = {
    button: [
      {
        name: '🔗 검사기관 확인하기',
        type: 'WL',
        urlMobile: 'http:
      },
    ],
    senderKey: '3fbaf1ee4144c3aed88d1921a41f7fcef5becf0b',
    msgType: 'AT',
    to: recipientInfo.phoneNo, 
    templateCode: 'A002', 
    text: `
안녕하세요, 대전시보건환경연구원 자가품질검사 서비스 챗봇입니다.

제품 분류: ${recipientInfo.productName}
🗓️ 검사 예정일: ${recipientInfo.expiryDate}
⏳ 남은 기간: ${recipientInfo.remainingDays}일

검사 날짜가 얼마 남지 않았어요! 

사업장 근처에서 검사받을 수 있는 곳을 미리 확인하시고, 필요한 준비를 해주세요. 

아래 링크를 클릭하시면 근처 검사기관을 확인하실 수 있습니다.
    `,
    ref: 'ORDER12345',
  };

  try {
    const response = await axios.post(apiUrl, data, { headers });
    console.log('알림톡 발송 성공:', response.data);
  } catch (error) {
    console.error('알림톡 발송 실패:', error);
  }
}


async function getNotificationsForToday() {
  const today = new Date();
  const dateStr = today.toISOString().split('T')[0]; 

  return new Promise((resolve, reject) => {
    pool.getConnection((err, conn) => {
      if (err) {
        console.error('데이터베이스 연결 오류:', err);
        return reject(new Error('DB 연결 오류'));
      }

      const promiseConn = conn.promise(); 
      const query = `
        SELECT u.phone_no AS phoneNo, 
               p.product_name AS productName, 
               p.expiry_date AS expiryDate, 
               DATEDIFF(p.expiry_date, NOW()) AS remainingDays 
        FROM tbl_notifications n 
        JOIN tbl_notification_users u ON n.noti_user_id = u.id
        JOIN tbl_notification_products p ON n.noti_product_id = p.id
        WHERE DATE(n.noti_date) = ?;`;

      promiseConn
        .query(query, [dateStr])
        .then(([rows]) => {
          resolve(rows); 
        })
        .catch((error) => {
          console.error('알림 정보 조회 중 오류:', error);
          reject(error); 
        })
        .finally(() => {
          conn.release(); 
        });
    });
  });
}


async function processAlimTalk() {
  console.log('토큰 발급 및 알림톡 발송 시작...');

  try {
    const token = await getAuthToken(); 
    const notifications = await getNotificationsForToday(); 

    if (!Array.isArray(notifications)) {
      console.error('알림 정보가 배열이 아닙니다:', notifications);
      return;
    }

    for (const recipient of notifications) {
      await sendAlimTalk(token, recipient); 
    }
  } catch (error) {
    console.error('알림톡 발송 중 오류:', error);
  }
}


cron.schedule(
  '20 10 * * *',
  async () => {
    await processAlimTalk(); 
  },
  {
    scheduled: true,
    timezone: 'Asia/Seoul', 
  }
);



File: ./quality-admin-web/.env
Content:
# NEXT_PUBLIC_APP_API_KEY = "http:
# NEXT_PUBLIC_APP_API_KEY = "http:
NEXT_PUBLIC_APP_API_KEY = "http:
File: ./quality-admin-web/ecosystem.config.js
Content:
module.exports = {
  apps: [
    {
      name: 'mobile-back',
      script: './bin/www',
      env: {
        NODE_ENV: 'production',
        PORT: 3001,
      },
    },
    {
      name: 'mobile-next',
      script: 'npm',
      args: 'run next-start',
      env: {
        NODE_ENV: 'production',
        PORT: 1880,
      },
    },
  ],
};

File: ./quality-admin-web/routes/webapp/fee/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);



const product = require('./product')
router.use('/product', product)

const common = require('./common')
router.use('/common', common)


router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'fee unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/fee/product/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'fee_product unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/fee/product/dao.js
Content:
const db = require('../../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { productName } = req.query;

  
  const escapedProductName = `%${escapeSpecialChars(decodeURIComponent(productName))}%`;

  const sql = `
    SELECT * FROM qcbot.tbl_fee WHERE product LIKE ?;
  `;

  conn.query(sql, [escapedProductName], (err, rows) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
        error: err
      });
    }

    return res.status(200).send({
      success: true,
      datas: rows,
    });
  });
};

const escapeSpecialChars = (str) => {
  return str.replace(/[\\%_()]/g, '\\$&'); 
};
File: ./quality-admin-web/routes/webapp/fee/common/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'fee_common unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/fee/common/dao.js
Content:
const db = require('../../../../config/db');
const conn = db.init();

exports.list = (req, res) => {

  const sql = `
    SELECT * FROM qcbot.tbl_standards;
  `;

  conn.query(sql, (err, rows) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
        error: err
      });
    }

    return res.status(200).send({
      success: true,
      datas: rows,
    });
  });
};
File: ./quality-admin-web/routes/webapp/fee/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { fst, productName, nameCheck, feeValue, page, pageSize } = req.query;

  let fst_category = fst ? `%${fst}%` : '식품업';
  let product = productName ? `%${decodeURIComponent(productName)}%` : null;
  let name = nameCheck ? `%${nameCheck}%` : null;
  let fee = feeValue ? feeValue : null;

  
  const pageValue = page ? parseInt(page, 10) : 1;
  const pageSizeValue = pageSize ? parseInt(pageSize, 10) : 8;
  const offset = (pageValue - 1) * pageSizeValue;

  
  let sql = `SELECT * FROM qcbot.tbl_fee WHERE 1=1 `;
  const queryParams = [];

  if (fst_category) {
    sql += ` AND fst_category LIKE ?`;
    queryParams.push(fst_category);
  }

  if (product) {
    sql += ` AND product LIKE ?`;
    queryParams.push(product);
  }

  if (name) {
    sql += ` AND name LIKE ?`;
    queryParams.push(name);
  }

  if (fee) {
    sql += ` AND fee = ?`;
    queryParams.push(fee);
  }

  sql += ` ORDER BY id DESC LIMIT ? OFFSET ?`;
  queryParams.push(pageSizeValue, offset);

  
  const sqlCategories = `
    SELECT DISTINCT fst_category, scd_category, product 
    FROM qcbot.tbl_frequency
  `;

  
  conn.query(sqlCategories, [], (err, categoryResults) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '카테고리를 가져오는 데 실패했습니다.',
        error: err,
      });
    }

    
    const sqlCount =
      `
      SELECT COUNT(*) AS totalCount 
      FROM qcbot.tbl_fee
      WHERE 1=1
      ` + sql.slice(sql.indexOf('AND'), sql.indexOf('ORDER BY'));

    conn.query(sqlCount, queryParams.slice(0, -2), (err, countResult) => {
      if (err) {
        return res.status(403).send({
          success: false,
          msg: '데이터 수를 가져오는 데 실패했습니다. 다시 시도해주세요.',
          error: err,
        });
      }

      const totalCount = countResult[0].totalCount;

      
      conn.query(sql, queryParams, (err, rows) => {
        if (err) {
          return res.status(500).send({
            success: false,
            msg: '데이터를 가져오는 데 실패했습니다.',
            error: err,
          });
        }

        return res.status(200).send({
          success: true,
          datas: rows,
          pageCount: totalCount,
          pageSize: pageSizeValue,
          currentPage: pageValue,
          categories: categoryResults,
        });
      });
    });
  });
};

File: ./quality-admin-web/routes/webapp/submit/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.post('/', dao.add);

router.all('*', (req, res) => {
  res
    .status(404)
    .send({ success: false, msg: 'submit unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/submit/dao.js
Content:
const db = require('../../../config/db');
const axios = require('axios');
const pool = db.init(); 


async function getAuthToken() {
  const tokenUrl = 'https:

  const headers = {
    'X-IB-Client-Id': 'qhrj_om_6rk1fcim', 
    'X-IB-Client-Passwd': '02B83553LUKO53FJZ2HL', 
    Accept: 'application/json',
  };

  try {
    const response = await axios.post(tokenUrl, {}, { headers });
    console.log('토큰 발급 성공:', response.data.data.token); 
    return response.data.data.token; 
  } catch (error) {
    console.error(
      '토큰 발급 실패:',
      error.response ? error.response.data : error.message
    );
    throw new Error('토큰 발급에 실패했습니다.');
  }
}


async function sendAlimTalk(token, recipientInfo) {
  const apiUrl = 'https:

  const headers = {
    'Content-Type': 'application/json',
    Accept: 'application/json',
    Authorization: `Bearer ${token}`,
  };

  const data = {
    senderKey: '3fbaf1ee4144c3aed88d1921a41f7fcef5becf0b',
    msgType: 'AT',
    to: recipientInfo.phoneNo, 
    templateCode: 'A003', 
    text: `
[대전시보건환경연구원 자가품질검사 챗봇 서비스]

알림톡 신청이 완료되었습니다.

신청 내용: ${recipientInfo.productNames}

등록하신 정보에 맞춰 알림서비스를 3주 전, 일주일 전, 3일 전에 알림서비스를 제공해드리겠습니다.
    `,
    ref: 'ORDER12345',
  };

  console.log('알림톡 발송 데이터:', data); 

  try {
    const response = await axios.post(apiUrl, data, { headers });
    console.log('알림톡 발송 성공:', response.data); 
  } catch (error) {
    console.error(
      '알림톡 발송 실패:',
      error.response ? error.response.data : error.message
    ); 
  }
}


exports.add = async (req, res) => {
  const { businessNo, companyName, repName, businessType, phoneNo, products } =
    req.body;

  pool.getConnection(async (err, conn) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터베이스 연결 오류가 발생했습니다.',
      });
    }

    try {
      const promiseConn = conn.promise();
      await promiseConn.beginTransaction();

      
      const userInsertQuery = `
        INSERT INTO tbl_notification_users (business_no, company_name, rep_name, business_type, phone_no) 
        VALUES (?, ?, ?, ?, ?)`;
      const [userInsertResult] = await promiseConn.query(userInsertQuery, [
        businessNo,
        companyName,
        repName,
        businessType,
        phoneNo,
      ]);
      const userId = userInsertResult.insertId;

      const productNames = []; 

      for (const product of products) {
        const { productName, expiryDate } = product;
        productNames.push(productName); 

        
        const productInsertQuery = `
          INSERT INTO tbl_notification_products (noti_user_id, product_name, expiry_date) 
          VALUES (?, ?, ?)`;
        const [productInsertResult] = await promiseConn.query(
          productInsertQuery,
          [userId, productName, expiryDate]
        );

        const productId = productInsertResult.insertId;

        if (expiryDate) {
          const threeWeeksBefore = new Date(expiryDate);
          threeWeeksBefore.setDate(threeWeeksBefore.getDate() - 21);
          const oneWeekBefore = new Date(expiryDate);
          oneWeekBefore.setDate(oneWeekBefore.getDate() - 7);
          const oneDayBefore = new Date(expiryDate);
          oneDayBefore.setDate(oneDayBefore.getDate() - 3);

          await scheduleNotification(
            promiseConn,
            userId,
            productId,
            threeWeeksBefore
          );
          await scheduleNotification(
            promiseConn,
            userId,
            productId,
            oneWeekBefore
          );
          await scheduleNotification(
            promiseConn,
            userId,
            productId,
            oneDayBefore
          );
        }
      }

      await promiseConn.commit();

      
      const token = await getAuthToken();
      const recipientInfo = {
        phoneNo,
        productNames: productNames.join(', '), 
      };
      await sendAlimTalk(token, recipientInfo);

      
      return res
        .status(201)
        .json({ message: 'User and products inserted successfully!' });
    } catch (error) {
      console.error('데이터 삽입 중 오류 발생:', error);
      await promiseConn.rollback();
      res.status(500).json({ message: 'Error inserting data.' });
    } finally {
      conn.release();
    }
  });
};


const scheduleNotification = async (
  promiseConn,
  userId,
  productId,
  notificationDate
) => {
  const notificationInsertQuery = `
    INSERT INTO tbl_notifications (noti_user_id, noti_product_id, noti_date) 
    VALUES (?, ?, ?)`;
  await promiseConn.query(notificationInsertQuery, [
    userId,
    productId,
    notificationDate,
  ]);
};

File: ./quality-admin-web/routes/webapp/frequency/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);

router.all('*', (req, res) => {
  res
    .status(404)
    .send({ success: false, msg: 'frequency unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/frequency/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { productName } = req.query;

  const queryValues = Array.isArray(productName) ? productName : [productName];

  const placeholders = queryValues.map(() => '?').join(', ');
  const sql = `SELECT product, frequency FROM qcbot.tbl_frequency WHERE product IN (${placeholders});`;

  conn.query(sql, queryValues, (err, rows) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      datas: rows,
    });
  });
};

File: ./quality-admin-web/routes/webapp/institute/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');

router.get('/', dao.list);
router.get('/:name', dao.view);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'day unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/institute/dao.js
Content:
const db = require('../../../config/db');
const conn = db.init();

exports.list = (req, res) => {
  const { fst, nameCheck, regionValue, districtValue } =
    req.query;

  let category = fst ? `%${fst}%` : null;
  let name = nameCheck ? `%${nameCheck}%` : null;
  let region = regionValue ? `%${regionValue}%` : null;
  let district = districtValue ? `%${districtValue}%` : null;


  
  const sql = `
  SELECT t1.id, t1.category, t1.name, t1.director, t1.location, t1.region, 
         t1.district, t1.phone, t1.fax, t1.remarks, t1.expiration
  FROM qcbot.tbl_institute t1
  INNER JOIN (
    SELECT MAX(id) as max_id
    FROM qcbot.tbl_institute
    WHERE
      (category like ifnull(?, category)) and
      (region like ifnull(?, region)) and
      (district like ifnull(?, district)) and
      (name like ifnull(?, name))
    GROUP BY name
  ) t2 ON t1.id = t2.max_id
  ORDER BY t1.id DESC
`;

  
  const sqlCategories = `
  select distinct cast(category as char) as value, 'category' as type from qcbot.tbl_institute
  union
  select distinct cast(region as char) as value, 'region' as type from qcbot.tbl_institute
  union
  select distinct cast(district as char) as value, 'district' as type from qcbot.tbl_institute;
  `;

  
  const queryValues = [category, region, district, name];

  conn.query(sqlCategories, (err, categoryResults) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '카테고리를 가져오는 데 실패했습니다.',
      });
    }
    conn.query(sql, queryValues, (err, rows) => {
      if (err) {
        return res.status(500).send({
          success: false,
          msg: '데이터를 가져오는 데 실패했습니다.',
        });
      }
      return res.status(200).send({
        success: true,
        datas: rows,
        categories: categoryResults,
      });
    });
  });
};

exports.view = (req, res) => {
  const { name } = req.params;

  if (!name) {
    return res.status(400).send({
      success: false,
      msg: 'name 값이 필요합니다.',
    });
  }

  sql = 'select * from qcbot.tbl_institute where name = ? ';

  conn.query(sql, [name], (err, rows) => {
    if (err) {
      return res.status(500).send({
        success: false,
        msg: '데이터를 가져오는 데 실패했습니다.',
      });
    }
    return res.status(200).send({
      success: true,
      datas: rows,
      categories: rows.map((row) => row.category), 
    });
  });
};

File: ./quality-admin-web/routes/webapp/index.js
Content:
const router = require('express').Router();

const institute = require('./institute');
const fee = require('./fee');
const upload = require('./upload');
const frequency = require('./frequency');
const submit = require('./submit');

router.use('/institute', institute);
router.use('/fee', fee);
router.use('/upload', upload);
router.use('/frequency', frequency);
router.use('/submit', submit);

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: `api unknown uri ${req.path}` });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/upload/index.js
Content:
const router = require('express').Router();
const dao = require('./dao');
const multer = require('multer');

const upload = multer({
  storage: multer.memoryStorage(),
});

router.post('/', upload.single('image'), dao.add);

router.all('*', (req, res) => {
  res
    .status(404)
    .send({ success: false, msg: 'upload unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-admin-web/routes/webapp/upload/dao.js
Content:
const axios = require('axios');
const FormData = require('form-data');


const OCR_SECRET_KEY = 'TU10WVFXSWdnSE1Rb1llT01LaVhybG9Mb3Z6bWxraUs=';
const OCR_URL =
  'https:

exports.add = async (req, res) => {
  console.log(req.file);
  try {
    const imageBuffer = req.file.buffer;

    
    const formData = new FormData();
    formData.append('file', imageBuffer, {
      filename: req.file.originalname, 
      contentType: req.file.mimetype, 
    });

    const message = {
      images: [
        {
          format: req.file.mimetype.split('/')[1], 
          name: req.file.originalname, 
        },
      ],
      requestId: 'unique-id', 
      timestamp: Date.now(),
      version: 'V2',
    };

    formData.append('message', JSON.stringify(message));

    const ocrResponse = await axios.post(OCR_URL, formData, {
      headers: {
        'X-OCR-SECRET': OCR_SECRET_KEY, 
        ...formData.getHeaders(),
      },
    });

    
    res.json(ocrResponse.data);
    console.log(ocrResponse.data);
  } catch (error) {
    console.error('OCR 처리 중 오류 발생:', error);
    res.status(500).json({
      success: false,
      message: 'OCR 처리 중 오류 발생',
      error: error.message,
    });
  }
};

File: ./quality-admin-web/routes/users.js
Content:
var express = require('express');
var router = express.Router();

router.get('/', function (req, res, next) {
  res.send('respond with a resource');
});

module.exports = router;

File: ./quality-admin-web/routes/index.js
Content:
var express = require('express');
var router = express.Router();
const webapp = require('./webapp');

router.get('/', function (req, res, next) {
  res.render('index', { title: 'Express' });
  next();
});

router.use('/webapp', webapp);

module.exports = router;

File: ./quality-admin-web/app.js
Content:
var express = require('express');
require('./schedule');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

const db = require('./config/db');

var app = express();
const cors = require('cors');

const conn = db.init();
db.connect(conn);

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(cors());
app.use('/', indexRouter);
app.use('/users', usersRouter);

module.exports = app;

File: ./quality-admin-web/src/component/Layout/Layout.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import styled from 'styled-components';

type LayoutProps = {
  children: React.ReactNode;
};

const Layout: NextPage<LayoutProps> = ({ children }: LayoutProps) => {
  return <LayoutBase>{children}</LayoutBase>;
};

export default Layout;

const LayoutBase = styled.main`
  background-color: #fff;
  max-width: 720px;
  min-width: 280px;
  width: 100%;
  height: calc(var(--vh, 1vh) * 100);
  margin: 0 auto;
`;

File: ./quality-admin-web/src/component/webapp/ResultComponent.tsx
Content:
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';
import { RootState } from '@/redux/modules/reducer';
import styled from 'styled-components';

const ResultComponent = () => {
  const ResultState = useSelector((state: RootState) => state.common);
  const options = useSelector((state: RootState) => state.common.setOptions);
  
  const router = useRouter();
  return (
    <ResultBase>
      <ResultH1>신청완료</ResultH1>

      <ResultH4>아래의 정보로 자가품질 알림톡이 신청되었습니다.</ResultH4>

      <ResultMenu>
        <ResultList>
          <ResultSubject>상호명:</ResultSubject>
          <ResultContent>{ResultState?.companyName}</ResultContent>
        </ResultList>
        <ResultList>
          <ResultSubject>사업자등록번호:</ResultSubject>
          <ResultContent>{ResultState?.businessNo}</ResultContent>
        </ResultList>
        <ResultList>
          <ResultSubject>업종:</ResultSubject>
          <ResultContent>{ResultState?.businessType}</ResultContent>
        </ResultList>
        <ResultList>
          <ResultSubject>핸드폰번호:</ResultSubject>
          <ResultContent>{ResultState?.phoneNo}</ResultContent>
        </ResultList>
        <ResultList>
          <ContentMenu>
            <ContentH4>[취급품목]</ContentH4>
            {options.map((option: any) => {
              return <ContentItem>- {option}</ContentItem>;
            })}
          </ContentMenu>
        </ResultList>
      </ResultMenu>

      <BtnBox>
        <CloseBtn
          onClick={() => {
            window.close();
          }}
        >
          닫기
        </CloseBtn>
        <ApplyBtn
          onClick={() => {
            router.push('/webapp/appform');
          }}
        >
          수정하기
        </ApplyBtn>
      </BtnBox>
    </ResultBase>
  );
};

export default ResultComponent;

const ResultBase = styled.section`
  padding: 32px 12px;
`;

const ResultH1 = styled.h1`
  text-align: center;
  font-size: 22px;
  font-weight: 500;
  line-height: 1.3;
`;

const ResultH4 = styled.h4`
  text-align: center;
  font-size: 16px;
  font-weight: 500;
  line-height: 1.3;
  margin: 16px 0;
`;

const ResultMenu = styled.ul`
  background-color: #e7f8f4;
  padding: 16px;
  line-height: 1.6;
  border-radius: 8px;
`;

const ResultList = styled.li`
  display: flex;
  align-items: center;
  margin-top: 6px;
`;

const ResultSubject = styled.h4`
  width: 30%;
`;

const ResultContent = styled.span`
  width: 70%;
`;

const ContentMenu = styled.ul`
  margin-top: 12px;
`;

const ContentH4 = styled.h4`
  font-weight: 600;
`;

const ContentItem = styled.li``;

const BtnBox = styled.div`
  display: flex;
  margin-top: 24px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 48%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
`;

const CloseBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  margin-right: 7px;
  border-radius: 8px;
  color: #373737;
`;

File: ./quality-admin-web/src/component/webapp/Fee/Fee.jsx
Content:
import { useState, useCallback, useEffect } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';
import Select from 'react-select';
import axios from 'axios';

const Fee = ({ feeData }) => {
  const { categories } = feeData;
  const [currentStep, setCurrentStep] = useState(1);
  const [industry, setIndustry] = useState('');
  const [category, setCategory] = useState('');
  const [foodType, setFoodType] = useState('');
  const [inspectionItems, setInspectionItems] = useState([]);
  const [excludedItems, setExcludedItems] = useState([]);
  const [commonCriteria, setCommonCriteria] = useState([]);
  const [selectedCommonCriteria, setSelectedCommonCriteria] = useState([]);
  const [totalFee, setTotalFee] = useState(0);
  const [calculatedItems, setCalculatedItems] = useState([]);

  const fstOptions = [
    { value: '식품업', label: '식품업' },
    { value: '축산물', label: '축산물' },
    { value: '기구 및 용기', label: '기구 및 용기' },
  ];
  const [scdOptions, setScdOptions] = useState([]);
  const [trdOptions, setTrdOptions] = useState([]);

  
  const getCategories = useCallback(
    (fstCategory, scdCategory = null) => {
      const scdSet = new Set();
      const trdSet = new Set();

      categories.forEach((category) => {
        if (category.fst_category === fstCategory) {
          scdSet.add(category.scd_category);
          if (!scdCategory || category.scd_category === scdCategory) {
            trdSet.add(category.product);
          }
        }
      });

      setScdOptions(
        Array.from(scdSet).map((scd) => ({ value: scd, label: scd }))
      );
      setTrdOptions(
        Array.from(trdSet).map((trd) => ({ value: trd, label: trd }))
      );
    },
    [categories]
  );
  useEffect(() => {
    if (industry) {
      getCategories(industry);
      setCategory(''); 
      setTrdOptions([]); 
    }
  }, [industry, getCategories]);

  useEffect(() => {
    if (category) {
      getCategories(industry, category);
    }
  }, [category, industry, getCategories]);

  const handleNextStep = () => {
    if (currentStep < 4) {
      if (currentStep === 3) {
        calculateFee();
      }
      setCurrentStep(currentStep + 1);
    }
  };
  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const getProduct = async () => {
    try {
      const params = { productName: encodeURIComponent(foodType) };
      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/fee/product`,
        {
          params,
        }
      );
      setInspectionItems(res.data.datas);
      handleNextStep();
    } catch (error) {
      console.error(`Error fetching fee data for ${foodType}:`, error);
      return null;
    }
  };

  const getStandard = async () => {
    try {
      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/fee/common`
      );

      console.log(res.data);
      setCommonCriteria(res.data.datas);
      handleNextStep();
    } catch (error) {
      console.error(`Error fetching fee data for ${foodType}:`, error);
      return null;
    }
  };

  
  const commonQuestions = [
    {
      id: 1,
      question: '식품을 금속재질의 분쇄기로 분쇄를 하였나?',
      relatedIds: [1],
    },
    {
      id: 2,
      question: '통,병조림 식품 인가요?',
      relatedIds: [2, 3],
    },
    {
      id: 3,
      question: '레토르트식품 인가요?',
      relatedIds: [4, 5],
    },
    {
      id: 4,
      question: '냉동식품 인가요?',
      relatedIds: [6, 7, 8, 9],
    },
  ];

  const handleReset = () => {
    setIndustry('');
    setCategory('');
    setFoodType('');
    setExcludedItems([]);
    setSelectedCommonCriteria([]);
    setCalculatedItems([]);
    setTotalFee(0);
    setCurrentStep(1);
  };

  useEffect(() => {
    if (calculatedItems.length > 0 && totalFee > 0) {
      handleNextStep();
    }
  }, [calculatedItems, totalFee]);

  const calculateFee = () => {
    const basicItems = inspectionItems.filter((item) => {
      if (item.remarks) {
        return !excludedItems.includes(item.id);
      }
      return true;
    });

    const selectedCommonItems = commonCriteria.filter(
      (item) =>
        selectedCommonCriteria.includes(item.id) &&
        !excludedItems.includes(item.id)
    );

    const uniqueItemsMap = new Map();

    basicItems.forEach((item) => {
      uniqueItemsMap.set(item.test_code, item);
    });

    selectedCommonItems.forEach((item) => {
      if (!uniqueItemsMap.has(item.test_code)) {
        uniqueItemsMap.set(item.test_code, item);
      }
    });

    const finalItems = Array.from(uniqueItemsMap.values());
    setCalculatedItems(finalItems);

    const total = finalItems.reduce((sum, item) => sum + Number(item.fee), 0);
    setTotalFee(total);
  };
  console.log(calculatedItems);

  return (
    <FeeBase>
      <FeeHeader>
        <H1>검사 항목 및 수수료 안내</H1>
      </FeeHeader>
      <StepIndicator currentStep={currentStep} />
      {currentStep === 1 && (
        <FormSection>
          <SectionTitle>수수료 계산기</SectionTitle>
          <Label>업종:</Label>
          <Select
            options={fstOptions}
            value={fstOptions.find((option) => option.value === industry)}
            onChange={(selectedOption) =>
              setIndustry(selectedOption?.value || '')
            }
            placeholder="업종을 선택하세요"
            isSearchable={false}
          />
          <Label>구분:</Label>
          <Select
            options={scdOptions}
            value={scdOptions.find((option) => option.value === category)}
            onChange={(selectedOption) =>
              setCategory(selectedOption?.value || '')
            }
            isDisabled={!industry}
            placeholder="구분을 선택하세요"
            isSearchable={false}
          />
          <Label>식품 유형:</Label>
          <SelectContainer>
            <SelectWrapper>
              <Select
                options={trdOptions}
                value={trdOptions.find((option) => option.value === foodType)}
                onChange={(selectedOption) =>
                  setFoodType(selectedOption?.value || '')
                }
                isDisabled={!category}
                placeholder="유형을 선택하세요"
                isSearchable={false}
              />
            </SelectWrapper>
          </SelectContainer>
          <ButtonContainer>
            <StyledButton onClick={() => window.close()}>계산종료</StyledButton>
            <StyledButton primary onClick={getProduct}>
              다음
            </StyledButton>
          </ButtonContainer>
        </FormSection>
      )}
      {currentStep === 2 && (
        <FormSection>
          <SectionTitle>검사항목 확인</SectionTitle>
          {inspectionItems.map((item) => (
            <ChecklistItem key={item.id}>
              <InspectionContent>
                <InspectionHeader>
                  <Label>{item.name}</Label>
                  {excludedItems.includes(item.id) && (
                    <ExclusionLabel>검사 제외</ExclusionLabel>
                  )}
                </InspectionHeader>
                {item.remarks && (
                  <ConditionClause>
                    <RemarksInput
                      type="checkbox"
                      checked={excludedItems.includes(item.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setExcludedItems([...excludedItems, item.id]);
                        } else {
                          setExcludedItems(
                            excludedItems.filter((id) => id !== item.id)
                          );
                        }
                      }}
                    />
                    <RemarksSpan>{item.remarks}</RemarksSpan>
                  </ConditionClause>
                )}
              </InspectionContent>
            </ChecklistItem>
          ))}
          <ButtonContainer>
            <StyledButton onClick={handlePrevStep}>이전</StyledButton>
            <StyledButton primary onClick={getStandard}>
              다음
            </StyledButton>
          </ButtonContainer>
        </FormSection>
      )}
      {currentStep === 3 && (
        <FormSection>
          <SectionTitle>검사 관련 추가 확인 사항</SectionTitle>
          {commonQuestions.map((question) => {
            
            const relatedItems = commonCriteria.filter((item) =>
              question.relatedIds.includes(item.id)
            );

            
            const isChecked = question.relatedIds.some((id) =>
              selectedCommonCriteria.includes(id)
            );

            return (
              <Content key={question.id}>
                <ChecklistItem>
                  <RemarksInput
                    type="checkbox"
                    checked={isChecked}
                    onChange={(e) => {
                      
                      const updatedCriteria = new Set(selectedCommonCriteria);

                      if (e.target.checked) {
                        
                        question.relatedIds.forEach((id) =>
                          updatedCriteria.add(id)
                        );
                      } else {
                        
                        question.relatedIds.forEach((id) =>
                          updatedCriteria.delete(id)
                        );
                      }

                      
                      setSelectedCommonCriteria(Array.from(updatedCriteria));
                    }}
                  />
                  <RemarksSpan>{question.question}</RemarksSpan>
                </ChecklistItem>

                {isChecked &&
                  relatedItems.map(
                    (item) =>
                      item.remarks && (
                        <SubCheckbox key={item.id}>
                          <RemarksInput
                            type="checkbox"
                            checked={excludedItems.includes(item.id)}
                            onChange={(e) => {
                              
                              const updatedExcludedItems = new Set(
                                excludedItems
                              );

                              if (e.target.checked) {
                                updatedExcludedItems.add(item.id);
                              } else {
                                updatedExcludedItems.delete(item.id);
                              }

                              
                              setExcludedItems(
                                Array.from(updatedExcludedItems)
                              );
                            }}
                          />
                          <RemarksSpan>{item.remarks}</RemarksSpan>
                        </SubCheckbox>
                      )
                  )}
              </Content>
            );
          })}
          <ButtonContainer>
            <StyledButton onClick={() => window.close()}>계산종료</StyledButton>
            <StyledButton primary onClick={calculateFee}>
              다음
            </StyledButton>
          </ButtonContainer>
        </FormSection>
      )}
      {currentStep === 4 && (
        <FormSection>
          <ReceiptContainer>
            <ReceiptHeader>
              <H3>수수료 계산 결과</H3>
            </ReceiptHeader>
            {calculatedItems.length > 0 ? (
              <>
                {calculatedItems.map((item) => (
                  <ReceiptRow key={item.id}>
                    <RemarksSpan>{item.name}</RemarksSpan>
                    <RemarksSpan>
                      {Number(item.fee).toLocaleString()}원
                    </RemarksSpan>
                  </ReceiptRow>
                ))}
                <ReceiptRow className="total">
                  <RemarksSpan>총계</RemarksSpan>
                  <RemarksSpan>{totalFee.toLocaleString()}원</RemarksSpan>
                </ReceiptRow>
              </>
            ) : (
              <Notice>선택 검사 항목이 없습니다.</Notice>
            )}
            <ReceiptFooter>
              ※ 해당 수수료는 식약처 고시 금액 기준으로 산정되었으며, 인건비와
              일반관리비는 제외되므로 실 검사 비용과 다를 수 있습니다.
            </ReceiptFooter>
          </ReceiptContainer>
          <ButtonContainer>
            <StyledButton onClick={handleReset}>처음으로</StyledButton>
            <StyledButton primary onClick={() => window.close()}>
              계산종료
            </StyledButton>
          </ButtonContainer>
        </FormSection>
      )}
    </FeeBase>
  );
};

export default Fee;

const FeeBase = styled.section`
  padding: 32px 12px;
`;

const FeeHeader = styled.div`
  background-color: #27ae60;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 16px;
`;

const H1 = styled.h1`
  font-size: 20px;
  font-weight: 600;
  color: #fff;
`;

const H3 = styled.h3`
  font-size: 22px;
  font-weight: 600;
  color: #fff;
  margin: 16px 0;
`;

const Content = styled.div``;

const StepIndicatorWrapper = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 0.5rem;
  background-color: #fff;
  border-bottom: 1px solid #eee;
`;

const StepCircle = styled.div`
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: ${(props) => (props.active ? '#27ae60' : '#f5f5f5')};
  color: ${(props) => (props.active ? 'white' : '#666')};
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: ${(props) =>
    props.active ? '0 2px 8px rgba(30,136,229,0.3)' : 'none'};
  font-size: 14px;
`;

const RemarksInput = styled.input.attrs({ type: 'checkbox' })`
  appearance: auto;
  cursor: pointer;
  cursor: pointer;
`;

const RemarksSpan = styled.span`
  
`;

const ButtonContainer = styled.div`
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
  padding: 0 1rem;
`;

const StyledButton = styled.button`
  flex: 1;
  background-color: ${(props) => (props.primary ? '#2ecc71' : '#fff')};
  color: ${(props) => (props.primary ? '#fff' : '#2ecc71')};
  border: 1px solid #2ecc71;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 15px;
  font-weight: 600;
  transition: all 0.3s ease;

  &:hover {
    background-color: ${(props) => (props.primary ? '#27ae60' : '#f0f9f0')};
  }
`;

const SectionTitle = styled.h2`
  padding: 16px 0;
  color: #28a745;
  text-align: center;
  font-size: 23px;
  font-weight: 600;
`;

const Label = styled.label`
  display: block;
  margin-bottom: 0.3rem;
  margin-top: 0.3rem;
  font-weight: bold;
`;

const FormSection = styled.div`
  padding: 0.8rem;
  margin: 0 auto;
`;

const ChecklistItem = styled.div`
  display: flex;
  align-items: center;
  padding: 0.7rem;
  border-radius: 8px;
  background: #f8f9fa;
  margin-bottom: 0.7rem;
  font-size: 0.9rem;
`;

const InspectionContent = styled.div`
  display: flex;
  flex-direction: column;
  gap: 0.2rem;
`;

const InspectionHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const ConditionClause = styled.div`
  display: flex;
  align-items: center;
  margin-top: 0.3rem;
  color: #666;
`;

const SubCheckbox = styled.div`
  margin-top: 0.5rem;
  margin-left: 1.5rem;
  margin-bottom: 0.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
`;

const ExclusionLabel = styled.span`
  color: red;
  margin-left: 1rem;
  font-weight: bold;
`;

const LoadingMessage = styled.div`
  text-align: center;
  font-size: 1.2rem;
  color: #999;
  margin-top: 2rem;
`;

const Notice = styled.div`
  background-color: #fff3cd;
  color: #856404;
  border: 1px solid #ffeeba;
  padding: 1rem;
  margin: 1rem 0;
  border-radius: 4px;
`;

const ResultRow = styled.div`
  display: flex;
  justify-content: space-between;
  padding: 0.5rem 0;

  &.total {
    border-top: 1px solid #ddd;
    margin-top: 1rem;
    padding-top: 1rem;
    font-weight: bold;
  }
`;

const ReceiptContainer = styled.div`
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  position: relative;

  &::before {
    content: '';
    position: absolute;
    top: -8px;
    left: 0;
    right: 0;
    height: 8px;
    background: linear-gradient(
      45deg,
      white 25%,
      transparent 25%,
      transparent 75%,
      white 75%
    );
    background-size: 16px 16px;
  }

  &::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    right: 0;
    height: 8px;
    background: linear-gradient(
      45deg,
      white 25%,
      transparent 25%,
      transparent 75%,
      white 75%
    );
    background-size: 16px 16px;
  }
`;

const ReceiptHeader = styled.div`
  text-align: center;
  margin-bottom: 1.5rem;
  border-bottom: 2px dashed #eee;

  h3 {
    font-size: 22px;
    color: #333;
  }
`;

const ReceiptRow = styled(ResultRow)`
  color: #444;
  font-size: 0.95rem;
  padding-bottom: 0.7rem;

  span:first-child {
    flex: 0.6;
  }

  span:last-child {
    flex: 0.4;
    text-align: right;
  }

  &.total {
    border-top: 2px dashed #eee;
    margin-top: 0.8rem;
    padding-top: 0.8rem;
    font-weight: bold;
    font-size: 1.1rem;

    span {
      flex: 1;
      text-align: right;
    }
  }
`;

const ReceiptFooter = styled.div`
  text-align: center;
  border-top: 2px dashed #eee;
  color: #666;
  font-size: 0.85rem;
  padding-top: 1rem;
`;

const StepIndicator = ({ currentStep }) => (
  <StepIndicatorWrapper>
    {[1, 2, 3, 4].map((step) => (
      <StepCircle key={step} active={currentStep === step}>
        {step}
      </StepCircle>
    ))}
  </StepIndicatorWrapper>
);

const SelectContainer = styled.div`
  display: flex;
  gap: 0.5rem;
  align-items: flex-start;
`;

const SelectWrapper = styled.div`
  flex: 1;
`;

const SearchButton = styled.button`
  padding: 8px 16px;
  height: 38px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  white-space: nowrap;

  &:hover {
    background-color: #0056b3;
  }
`;

File: ./quality-admin-web/src/component/webapp/Fee/FeeDetail.tsx
Content:
import { useState, useEffect } from 'react';
import axios from 'axios';
import styled from 'styled-components';
import BottomSheet from '@/component/Common/BottomSheet';

interface FeeDetailProps {
  trdOptions: string[]; 
  openBottom: boolean;
  setOpenBottom: React.Dispatch<React.SetStateAction<boolean>>;
}

const FeeDetail: React.FC<FeeDetailProps> = ({
  trdOptions,
  openBottom,
  setOpenBottom,
}) => {
  const [feeResults, setFeeResults] = useState<any[]>([]); 

  
  const fetchFeeData = async (trdOption: string) => {
    try {
      const params = { productName: encodeURIComponent(trdOption) }; 
      const res = await axios.get(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/fee/product`,
        {
          params,
        }
      );
      console.log(res.data);
      return res.data.datas; 
    } catch (error) {
      console.error(`Error fetching fee data for ${trdOption}:`, error);
      return null;
    }
  };

  
  const fetchAllFeeData = async () => {
    const results: any[] = [];

    for (const option of trdOptions) {
      const datas = await fetchFeeData(option); 
      if (datas) {
        results.push({ trdOption: option, datas }); 
      }
    }

    setFeeResults(results); 
  };

  useEffect(() => {
    if (trdOptions.length === 0) {
      setFeeResults([]);
    }
    fetchAllFeeData();
  }, [trdOptions]);

  return (
    <BottomSheet
      height={500}
      isOpen={openBottom}
      onClose={() => {
        setOpenBottom(false);
      }}
    >
      <DetailBase>
        <DetailMenu>
          {feeResults.length === 0 ? (
            <ResultNone>검색결과가 없습니다</ResultNone>
          ) : (
            feeResults.map((result) => {
              
              const totalFee = result.datas.reduce(
                (acc: number, curr: any) => acc + curr.fee,
                0
              );

              return (
                <DetailItem key={result.trdOption}>
                  <DetailH4>{result.trdOption}</DetailH4>
                  <SubMenu>
                    {result.datas.map((data: any, idx: number) => (
                      <SubItem key={idx}>
                        <SubSubject>{data.name}</SubSubject>
                        <SubContents>{data.fee}원</SubContents>
                      </SubItem>
                    ))}

                    <Total>
                      <TotalP>합계</TotalP>
                      <TotalSpan>{totalFee.toLocaleString()} 원</TotalSpan>
                    </Total>
                  </SubMenu>
                </DetailItem>
              );
            })
          )}
        </DetailMenu>
        <BtnBox>
          <ResetBtn
            onClick={() => {
              setOpenBottom(false);
            }}
          >
            재계산
          </ResetBtn>
          <ApplyBtn
            onClick={() => {
              setOpenBottom(false);
            }}
          >
            닫기
          </ApplyBtn>
        </BtnBox>
      </DetailBase>
    </BottomSheet>
  );
};

export default FeeDetail;

const DetailBase = styled.section`
  padding: 24px 16px 32px;
`;

const DetailMenu = styled.ul`
  margin-top: 12px;
  max-height: calc(var(--vh, 1vh) * 100 - 200px);
  overflow-y: scroll;
`;

const DetailItem = styled.li`
  margin-top: 24px;
  &:first-child {
    margin-top: 0;
  }
`;

const DetailH4 = styled.h4`
  font-size: 17px;
  font-weight: 500;
`;

const SubMenu = styled.ul`
  background-color: #f7f9fb;
  padding: 8px 5px;
  margin-top: 6px;
  border-radius: 6px;
`;

const SubItem = styled.li`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 0;
`;

const SubSubject = styled.p`
  color: #2b2d3b;
`;

const SubContents = styled.p`
  color: #6f7787;
`;

const Total = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 12px 0;
  border-top: 1px solid #50649c;
`;

const TotalP = styled.p`
  color: #2b2d3b;
`;

const TotalSpan = styled.span`
  color: #6f7787;
`;

const ResultNone = styled.div`
  height: 250px;
  font-size: 16px;
  font-weight: 500;
  text-align: center;
`;


const BtnBox = styled.div`
  margin-top: 12px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  width: 48%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
`;

const ResetBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  margin-right: 12px;
  color: #373737;
`;

File: ./quality-admin-web/src/component/webapp/Institute/Institute.tsx
Content:
import { NextPage } from 'next';
import { useState, useEffect, useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';

import { InstituteProps } from '../../../../type/instituteType';

import { IoSearchOutline } from 'react-icons/io5';

import BottomSheet from '@/component/Common/BottomSheet';
import InstituteDetail from './InstituteDetail';
import Dropdown from '@/component/Common/Dropdown/Dropdown';

const Institute: NextPage<InstituteProps> = ({ instituteData }) => {
  const { datas, categories } = instituteData;

  const router = useRouter();
  const inputRef = useRef<HTMLInputElement>(null);

  const [openBottom, setOpenBottom] = useState<boolean>(false);
  const [dataName, setDataName] = useState<string | null>(null);
  const [visibleCount, setVisibleCount] = useState(8);
  
  const [fstCategory, setFstCategory] = useState('');
  const [scdCategory, setScdCategory] = useState('');
  const [dropOpen, setDropOpen] = useState({
    fst: false,
    scd: false,
  });
  
  const categoryOptions = categories
    .filter((item) => item.type === 'category')
    .map((item) => item.value);
  
  const regionOptions = categories
    .filter((item) => item.type === 'region')
    .map((item) => item.value);

  useEffect(() => {
    if (performance.navigation.type === 1) {
      router.push('/webapp/institute');
    }
  }, []);

  const handleOnkey = useCallback(() => {
    router.push({
      pathname: router.pathname,
      query: {
        ...router.query, 
        nameCheck: inputRef.current?.value,
      },
    });
    setVisibleCount(8);
  }, [router]);

  const handleReset = useCallback(() => {
    const urlWithoutQuery = window.location.origin + window.location.pathname;

    window.location.href = urlWithoutQuery;
  }, [router]);

  const handleAddPage = useCallback(() => {
    setVisibleCount((prevCount) => prevCount + 8);
  }, [visibleCount]);

  return (
    <InstituteBase>
      <InstituteInner>
        <InstituteH1>검사 기관 안내</InstituteH1>
        <FilterBox>
          <Dropdown
            name="fst"
            title={'검사분야'}
            options={categoryOptions}
            selectedOption={fstCategory}
            isOpen={dropOpen.fst}
            toggle={() => {
              setDropOpen({
                fst: !dropOpen.fst,
                scd: false,
              });
            }}
            onSelectedOption={setFstCategory}
          />
          <Dropdown
            name="regionValue"
            title={'도/시 지역'}
            options={regionOptions}
            selectedOption={scdCategory}
            isOpen={dropOpen.scd}
            toggle={() => {
              setDropOpen({
                fst: false,
                scd: !dropOpen.scd,
              });
            }}
            onSelectedOption={setScdCategory}
          />
        </FilterBox>
        <InputBtnContainer>
          <InputBox>
            <InputLabel>
              <SearchIcon />
            </InputLabel>
            <Input placeholder="검색" ref={inputRef} />
          </InputBox>
          <BtnBox>
            <SearchBtn onClick={handleOnkey}>검색</SearchBtn>
            <ResetBtn onClick={handleReset}>초기화</ResetBtn>
          </BtnBox>
        </InputBtnContainer>

        <InstituteBody>
          <InstituteMenu>
            {datas.slice(0, visibleCount).map((data) => {
              return (
                <InstituteItem
                  key={data.id}
                  onClick={() => {
                    setDataName(data.name);
                    setOpenBottom(true);
                  }}
                >
                  <InstituteName>{data.name}</InstituteName>

                  <InsttituteInfo>
                    <Addr> {data.location}</Addr>
                    <PhoneNo>{data.phone}</PhoneNo>
                  </InsttituteInfo>
                </InstituteItem>
              );
            })}
          </InstituteMenu>
        </InstituteBody>
        {instituteData.datas.length > 7 && (
          <AddBtn onClick={handleAddPage}>
            <BtnSpan>더보기</BtnSpan>
          </AddBtn>
        )}
      </InstituteInner>
      <InstituteDetail
        dataName={dataName}
        openBottom={openBottom}
        setOpenBottom={setOpenBottom}
      />
    </InstituteBase>
  );
};

export default Institute;

const InstituteBase = styled.section`
  position: relative;
  height: 100%;
`;

const InstituteInner = styled.div`
  padding: 32px 16px;
`;

const InstituteH1 = styled.h1`
  padding-left: 3px;
  font-size: 22px;
  font-weight: 600;
`;

const FilterBox = styled.div`
  display: flex;
  margin: 20px 0;
`;
{
}

const InputBtnContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const InputBox = styled.div`
  width: calc(100% - 155px);
  background-color: #f3f4f6;
  display: flex;
  align-items: center;
  height: 42px;
  padding: 0 10px;
  border-radius: 5px;
`;

const Input = styled.input`
  background-color: #f3f4f6;
  height: 100%;
  margin-left: 8px;
  font-size: 15px;
  border: none;
`;

const InputLabel = styled.label`
  display: flex;
  align-items: center;
  height: 100%;
`;

const SearchIcon = styled(IoSearchOutline)`
  font-size: 15px;
`;

const BtnBox = styled.div`
  margin-left: 8px;
`;

const SearchBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  height: 42px;
  padding: 0 18px;
  border-radius: 8px;
  color: #fff;
`;
const ResetBtn = styled(SearchBtn)`
  background-color: #ebeff6;
  color: #252525;
  margin-left: 10px;
`;

{
}

const InstituteBody = styled.div`
  
  height: calc(var(--vh, 1vh) * 100 - 270px);
  overflow-y: scroll;
  margin-top: 20px;
`;

const InstituteMenu = styled.ul``;

const InstituteItem = styled.li`
  background-color: #f7f9fb;
  position: relative;
  margin-top: 16px;
  padding: 20px 40px 16px 16px;
  border-radius: 8px;
  line-height: 1.4;
  &:first-child {
    margin-top: 0;
  }
  &:after {
    content: '';
    position: absolute;
    top: calc(95px / 2);
    right: 14px;
    width: 10px;
    height: 10px;
    border: 2px solid #6f7787;
    border-left: 0;
    border-top: 0;
    transform: rotate(315deg);
  }
`;

const InstituteName = styled.h4`
  font-weight: 600;
  color: #323743;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  word-break: break-all;
`;

const InsttituteInfo = styled.div`
  margin: 8px 0;
  font-size: 12px;
  font-weight: 300;
  color: #6f7787;
  line-height: 1.4;
`;

const Addr = styled.p`
  overflow: hidden;
  white-space: normal;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  word-break: keep-all;
  margin-bottom: 3px;
`;

const PhoneNo = styled.p``;

{
}
const AddBtn = styled.button`
  background-color: #ebeff6;
  width: 100%;
  height: 42px;
  margin-top: 12px;
  border-radius: 8px;
  font-size: 15px;
  font-weight: 500;
`;

const BtnSpan = styled.span`
  position: relative;
  
  
  &:after {
    content: '';
    position: absolute;
    right: -16px;
    width: 7px;
    height: 7px;
    border: 2px solid #6f7787;
    border-left: 0;
    border-top: 0;
    transform: rotate(-315deg);
  }
`;

File: ./quality-admin-web/src/component/webapp/Institute/InstituteDetail.tsx
Content:
import { NextPage } from 'next';
import { useEffect, useState } from 'react';
import styled from 'styled-components';

import { DetailInstitute } from '../../../../type/instituteType';
import axios from 'axios';
import BottomSheet from '@/component/Common/BottomSheet';

interface InstituteDetailProps {
  dataName: string | null;
  openBottom: boolean;
  setOpenBottom: React.Dispatch<React.SetStateAction<boolean>>;
}

const InstituteDetail: NextPage<InstituteDetailProps> = ({
  dataName,
  openBottom,
  setOpenBottom,
}) => {
  const [detailData, setDetailData] = useState<DetailInstitute>({
    id: null,
    category: null,
    district: null,
    region: null,
    expiration: null,
    fax: null,
    location: null,
    name: null,
    phone: null,
    remarks: null,
  });
  const [categories, setCategories] = useState<string[]>([]);
  useEffect(() => {
    if (dataName === null) {
      return;
    }
    getData();
  }, [dataName]);

  const getData = async () => {
    const res = await axios.get(
      `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/institute/${dataName}` 
    );

    if (res.status === 200) {
      setDetailData(res.data.datas[0]);
      setCategories(res.data.categories);
    } else {
      alert('다시 시도해주세요.');
    }
    console.log(res);
  };

  
  return (
    <BottomSheet
      height={800}
      isOpen={openBottom}
      onClose={() => {
        setOpenBottom(false);
      }}
    >
      <DetailBase>
        <DetailH2>{detailData.name}</DetailH2>

        <DetailMenu>
          <DetailItem>
            <ItemLabel>주소</ItemLabel>
            <Item>{detailData.location}</Item>
          </DetailItem>
          <DetailItem>
            <ItemLabel>연락처</ItemLabel>
            <Item>{detailData.phone}</Item>
          </DetailItem>
          <DetailItem>
            <ItemLabel>자가품질검사분야</ItemLabel>
            <Item>{categories.join(', ')}</Item>
          </DetailItem>
          <DetailItem>
            <ItemLabel>비고</ItemLabel>
            <Item>{detailData.remarks}</Item>
          </DetailItem>
        </DetailMenu>

        <BtnBox>
          <ApplyBtn
            onClick={() => {
              setOpenBottom(false);
            }}
          >
            닫기
          </ApplyBtn>
        </BtnBox>
      </DetailBase>
    </BottomSheet>
  );
};

export default InstituteDetail;

const DetailBase = styled.section`
  padding: 32px 24px 16px;
`;

const DetailH2 = styled.h2`
  font-size: 20px;
  font-weight: 500;
`;

const DetailMenu = styled.ul`
  margin-top: 24px;
`;

const DetailItem = styled.li`
  margin-top: 16px;
  &:first-child {
    margin-top: 0;
  }
`;

const ItemLabel = styled.span`
  margin-left: 4px;
  font-size: 16px;
  font-weight: 500;
  color: #424856;
`;

const Item = styled.div`
  background-color: #f7f9fb;
  margin: 12px 0;
  padding: 16px 12px;
  border-radius: 8px;
  color: #6f7787;
  line-height: 1.4;
`;

const BtnBox = styled.div`
  margin-top: 16px;
  display: flex;
  justify-content: flex-end;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  width: 128px;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
`;

File: ./quality-admin-web/src/component/webapp/OCR/ShootingPhoto.tsx
Content:
import { useRef, useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import styled from 'styled-components';

import { useDispatch } from 'react-redux';
import { setCommonState } from '@/redux/modules/common';


import { LiaExclamationCircleSolid } from 'react-icons/lia';

import Loading from '@/component/Common/Loading';

const ShootingPhoto = () => {
  const dispatch = useDispatch();
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const [capturedImage, setCapturedImage] = useState<string | null>(null);
  const [extractedData, setExtractedData] = useState<any>({
    businessNo: '',
    companyName: '',
    repName: '',
    businessType: '',
  });
  const [isProcessing, setIsProcessing] = useState<boolean>(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setExtractedData((prev: any) => ({
      ...prev,
      [name]: value,
    }));
  };

  const extractFields = (fields: any[]) => {
    let data = {
      businessNo: '',
      companyName: '',
      repName: '',
      businessType: '',
    };

    fields.forEach((field: any, index: number) => {
      const text = field.inferText;

      
      if (text.includes('법인명(단체명)') && fields[index - 1]) {
        data.businessNo = fields[index - 1].inferText;
      }

      
      if (text.includes('법인명(단체명)') && fields[index + 2]) {
        data.companyName = fields[index + 2].inferText;
      }

      
      if (
        text.includes('대') &&
        fields[index + 1] &&
        fields[index + 2] &&
        fields[index + 3]
      ) {
        if (
          fields[index + 1].inferText.includes('표') &&
          fields[index + 2].inferText.includes('자')
        ) {
          data.repName = fields[index + 4].inferText;
        }
      }

      
      if (text.includes('종목') && fields[index + 1]) {
        data.businessType = fields[index + 1].inferText;
      }
    });

    return data;
  };

  
  const handleSubmit = async (e: React.ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();

    if (!e.target.files) {
      alert('파일을 선택해주세요.');
      return;
    }
    setIsProcessing(true);

    const file = e.target.files[0];
    const imageUrl = URL.createObjectURL(file);
    setCapturedImage(imageUrl);

    let formData = new FormData();
    formData.append('image', file);

    try {
      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/upload`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );

      
      const extractedFields = extractFields(response.data.images[0].fields);
      setExtractedData(extractedFields);

      console.log('추출된 데이터:', extractedFields);
      setIsProcessing(false);
    } catch (err) {
      console.error('파일 전송 중 오류 발생:', err);
      setIsProcessing(false);
    }
  };

  const handleApply = () => {
    dispatch(
      setCommonState({
        ...extractedData,
      })
    );

    router.push('/webapp/appform');
  };

  return (
    <PhotoBase>
      <PhotoContents>
        {capturedImage ? (
          <>
            <H2>
              사업자등록증 정보를<br></br>
              확인해주세요
            </H2>
            <SelectedPhoto src={capturedImage} alt="selecte-photo" />
            <ReUpld>
              <ReUpldLabel>재업로드</ReUpldLabel>
              <PhotoInput
                ref={fileInputRef}
                type="file"

File: ./quality-admin-web/src/component/webapp/OCR/InputPhoto.tsx
Content:
import { useRef, useState } from 'react';
import { useRouter } from 'next/router';
import { useDispatch } from 'react-redux';
import { setCommonState } from '@/redux/modules/common';
import axios from 'axios';
import styled from 'styled-components';

import { LiaExclamationCircleSolid } from 'react-icons/lia';

import Loading from '@/component/Common/Loading';

const InputPhoto = () => {
  const dispatch = useDispatch();
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [extractedData, setExtractedData] = useState<any>({
    businessNo: '',
    companyName: '',
    repName: '',
    businessType: '',
  });
  const [isProcessing, setIsProcessing] = useState<boolean>(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;

    setExtractedData((prev: any) => ({
      ...prev,
      [name]: value,
    }));
  };

  const extractFields = (fields: any[]) => {
    let data = {
      businessNo: '',
      companyName: '',
      repName: '',
      businessType: '',
    };

    fields.forEach((field: any, index: number) => {
      const text = field.inferText;

      
      if (text.includes('법인명(단체명)') && fields[index - 1]) {
        data.businessNo = fields[index - 1].inferText;
      }

      
      if (text.includes('법인명(단체명)') && fields[index + 2]) {
        data.companyName = fields[index + 2].inferText;
      }

      
      if (
        text.includes('대') &&
        fields[index + 1] &&
        fields[index + 2] &&
        fields[index + 3]
      ) {
        if (
          fields[index + 1].inferText.includes('표') &&
          fields[index + 2].inferText.includes('자')
        ) {
          data.repName = fields[index + 4].inferText;
        }
      }

      
      if (text.includes('종목') && fields[index + 1]) {
        data.businessType = fields[index + 1].inferText;
      }
    });

    return data;
  };

  
  const handleSubmit = async (e: React.ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();

    if (!e.target.files) {
      alert('파일을 선택해주세요.');
      return;
    }
    setIsProcessing(true);

    const file = e.target.files[0];
    const imageUrl = URL.createObjectURL(file);
    setSelectedImage(imageUrl);

    let formData = new FormData();
    formData.append('image', file);

    try {
      const response = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/upload`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );

      
      const extractedFields = extractFields(response.data.images[0].fields);
      setExtractedData(extractedFields);

      console.log('추출된 데이터:', extractedFields);
      setIsProcessing(false);
    } catch (err) {
      console.error('파일 전송 중 오류 발생:', err);
      setIsProcessing(false);
    }
  };

  const handleApply = () => {
    dispatch(
      setCommonState({
        ...extractedData,
      })
    );

    router.push('/webapp/appform');
  };

  return (
    <PhotoBase>
      <PhotoContents>
        {selectedImage ? (
          <>
            <H2>
              사업자등록증 정보를<br></br>
              확인해주세요
            </H2>
            <SelectedPhoto src={selectedImage} alt="selecte-photo" />
            <ReUpld>
              <ReUpldLabel>재업로드</ReUpldLabel>
              <PhotoInput
                ref={fileInputRef}
                type="file"

File: ./quality-admin-web/src/component/webapp/Application/Guide/ApplicationGuide.tsx
Content:
import React, { ChangeEvent, useState } from 'react';
import styled from 'styled-components';

import { IoMdCheckmarkCircleOutline } from 'react-icons/io';

import MobileModal from '@/component/Common/MobileModal';


interface GuideProps {
  agreements: {
    guidanceAgreed: boolean;
    personalInfoAgreed: boolean;
  };
  setAgreements: React.Dispatch<
    React.SetStateAction<{
      guidanceAgreed: boolean;
      personalInfoAgreed: boolean;
    }>
  >;
}

const ApplicationGuide: React.FC<GuideProps> = ({
  agreements,
  setAgreements,
}) => {
  
  const [openModal, setOpenModal] = useState({
    fst: false,
    scd: false,
  });

  
  const handleAgreementChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;

    setAgreements((prev) => ({ ...prev, [name]: checked }));
  };

  return (
    <GuideSection>
      <AgreeContainer>
        <AgreeMenu>
          <AgreeItem>
            <AgreeBox>
              <AgreeCheckInput
                type="checkbox"
                id="agree_check_used"
                name="guidanceAgreed"
                checked={agreements.guidanceAgreed}
                onChange={handleAgreementChange}
              />
              <AgreeLabel htmlFor="agree_check_used">
                <AgreeStrong>(필수) </AgreeStrong>개인정보 수집 및 이용동의
              </AgreeLabel>
            </AgreeBox>
            <DetailBtn
              onClick={() => {
                setOpenModal({
                  fst: true,
                  scd: false,
                });
              }}
            >
              [자세히보기]
            </DetailBtn>
          </AgreeItem>
          <AgreeItem>
            <AgreeBox>
              <AgreeCheckInput
                type="checkbox"
                id="agree_check_info"
                name="personalInfoAgreed"
                checked={agreements.personalInfoAgreed}
                onChange={handleAgreementChange}
              />
              <AgreeLabel htmlFor="agree_check_info">
                <AgreeStrong>(필수) </AgreeStrong>제 3자 정보 제공 동의
              </AgreeLabel>
            </AgreeBox>
            <DetailBtn
              onClick={() => {
                setOpenModal({
                  fst: false,
                  scd: true,
                });
              }}
            >
              [자세히보기]
            </DetailBtn>
          </AgreeItem>
        </AgreeMenu>
      </AgreeContainer>
      {openModal.fst && (
        <MobileModal>
          <ModalBase>
            <ModalH2>
              <ModalIcon /> 개인정보 수집 및 이용동의 (필수)
            </ModalH2>
            <ModalContent>
              {
                '<개인정보 수집 및 이용에 대한 안내 - 개인정보 보호법 제 15조 2항>'
              }
            </ModalContent>

            <PolicyH1>개인정보동의 수집 및 이용</PolicyH1>
            <PolicyMenu>
              <PolicyList>
                <PolicyH2>1. 개인정보의 수집·이용 목적</PolicyH2>
                <PolicyP>
                  • 대전보건연구원 자가품질검사 챗봇에서 자가품질검사를 위한
                  본인 확인 및 알림 서비스 제공
                </PolicyP>
              </PolicyList>
              <PolicyList>
                <PolicyH2>2. 수집하려는 개인정보</PolicyH2>
                <PolicyP>
                  • 필수항목 : 상호명, 사업자등록번호, 대표자명, 핸드폰번호,
                  사업장의 취급 품목 및 최초 자가품질검사 시작일 또는 마지막
                  자가품질검사 기일
                </PolicyP>
              </PolicyList>
              <PolicyList>
                <PolicyH2>3. 개인정보의 보유·이용 기간</PolicyH2>
                <PolicyP>
                  • 개인정보는 개인정보의 수집목적 또는 제공받은 목적이 소면되면
                  파기 됩니다.
                </PolicyP>
              </PolicyList>
              <PolicyList>
                <PolicyH2>
                  4. 동의를 거부할 권리 및 동의 거부에 따른 불이익 내용
                </PolicyH2>
                <PolicyP>
                  • 개인정보 수집 · 이용에 동의를 거부할 권리가 있으며, 동의
                  후에도 언제든지 철회 가능합니다. 다만, 동의를 거부할 경우
                  자가품질검사 알림 서비스를 이용할 수 없습니다.
                </PolicyP>
              </PolicyList>
            </PolicyMenu>
            <ModalBtn
              onClick={() => {
                setOpenModal({
                  fst: false,
                  scd: false,
                });
              }}
            >
              닫기
            </ModalBtn>
          </ModalBase>
        </MobileModal>
      )}
      {openModal.scd && (
        <MobileModal>
          <ModalBase>
            <ModalH2>
              <ModalIcon /> 제3자 정보제공 동의 (필수)
            </ModalH2>
            <ModalContent>
              대전보건연구원은 정보주체의 동의, 법률에 특별한 규정이 있는 경우
              등 개인정보보호법 제 17조 및 제 18조에 해당하는 경우에만 개인
              정보를 제 3자에게 제공합니다.
            </ModalContent>

            <PolicyMenu>
              <PolicyList>
                <PolicyH2>1. 용어의 정의</PolicyH2>
                <PolicyP>
                  • 인증사업자 : 카카오 및 알림톡 서비스를 제공하는 사업자
                </PolicyP>
              </PolicyList>
              <PolicyList>
                <PolicyH2>2. 제 3차 제공에 관한 사항</PolicyH2>
                <PolicyP>• 개인정보를 제공받는 자 : 인증사업자</PolicyP>
                <PolicyP>
                  • 제공받는 자의 개인정보 이용목적 : 알림톡 서비스를 통한
                  메시지 발송
                </PolicyP>
                <PolicyP>• 제공하는 개인정보 항목 : 휴대폰 번호</PolicyP>
                <PolicyP>
                  • 제공받는 자의 보유 및 이용기간 : 관련 법률 및 내부 방침에
                  따라 서비스 제공 기간 또는 동의 철회 시까지
                </PolicyP>
              </PolicyList>
            </PolicyMenu>
            <ModalBtn
              onClick={() => {
                setOpenModal({
                  fst: false,
                  scd: false,
                });
              }}
            >
              닫기
            </ModalBtn>
          </ModalBase>
        </MobileModal>
      )}
    </GuideSection>
  );
};

export default ApplicationGuide;

const GuideSection = styled.div`
  background-color: #fff;
  margin-top: 24px;
`;


const AgreeContainer = styled.div``;

const AgreeMenu = styled.ul`
  margin-top: 12px;
  border-radius: 8px;
`;

const AgreeItem = styled.li`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 15px;
  font-size: 14px;
  &:first-child {
    margin: 0 0;
  }
`;

const AgreeBox = styled.div`
  display: flex;
  align-items: center;
`;

const AgreeCheckInput = styled.input`
  appearance: none;
  width: 20px;
  height: 20px;
  border: 1px solid ${(props) => props.theme.gray_04};
  border-radius: 2px;
  margin-right: 10px;
  cursor: pointer;
  &:checked {
    background-color: ${(props) => props.theme.primary_01};
    border-color: transparent;
    background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http:
    background-size: 120% 120%;
    background-position: 50%;
    background-repeat: no-repeat;
  }
`;

const AgreeLabel = styled.label`
  cursor: pointer;
`;

const AgreeStrong = styled.strong`
  color: #ef4d56;
`;

const DetailBtn = styled.button`
  color: #aaa;
  font-size: 14px;
`;


const ModalBase = styled.div`
  padding: 24px 16px;
`;

const ModalH2 = styled.h2`
  display: flex;
  align-items: center;
`;

const ModalIcon = styled(IoMdCheckmarkCircleOutline)`
  font-size: 20px;
  margin-right: 7px;
`;

const IconDiv = styled.div`
  text-align: center;
`;

const ModalContent = styled.div`
  background-color: #e7f8f4;
  padding: 12px;
  margin-top: 16px;
  line-height: 1.3;
  font-size: 14px;
  color: #434343;
  border-radius: 8px;
  word-break: break-all;
`;

const PolicyMenu = styled.ul``;

const PolicyList = styled.li``;

const PolicyH1 = styled.h1`
  font-size: 18px;
  font-weight: 500;
  margin-top: 24px;
`;

const PolicyH2 = styled.h2`
  font-weight: 600;
  font-size: 15px;
  margin-top: 16px;
`;

const PolicyP = styled.p`
  margin: 8px 0;
  font-size: 14px;
`;

const ModalBtn = styled.button`
  background-color: #e2e7f1;
  width: 100%;
  height: 45px;
  margin-top: 24px;
  border-radius: 8px;
`;

File: ./quality-admin-web/src/component/webapp/Application/Application.tsx
Content:
import { useState } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';


import Shooting from './Modal/Shooting';
import Picture from './Modal/Picture';

const Application = () => {
  const router = useRouter();
  const [openShoot, setOpenShoot] = useState(false);
  const [openPicture, setOpenPicture] = useState(false);

  return (
    <ApplicationBase>
      <ContentWrapper>
        <BackButton onClick={() => router.back()}>
          <img src="/images/Vector.svg" alt="Back" />
        </BackButton>
        <H1>자가품질검사 안내</H1>
        <H1>알림톡 신청</H1>
        <Subtitle>원하는 방법을 선택해 사업자 정보를 입력하세요</Subtitle>
        <ButtonContainer>
          <Button
            onClick={() => {
              router.push('/webapp/form');
            }}
          >
            <IconWrapper>
              <img src="/images/Icon.svg" alt="직접입력" />
            </IconWrapper>
            <ButtonText>직접입력</ButtonText>
          </Button>
          <Button
            onClick={() => {
              setOpenShoot(true);
            }}
          >
            <IconWrapper>
              <img src="/images/Icon1.svg" alt="사업자 등록증 카메라 촬영" />
            </IconWrapper>
            <ButtonText>사업자 등록증 카메라 촬영</ButtonText>
          </Button>
          <Button
            onClick={() => {
              setOpenPicture(true);
            }}
          >
            <IconWrapper>
              <img src="/images/Icon2.svg" alt="사업자등록증 갤러리 첨부" />
            </IconWrapper>
            <ButtonText>사업자등록증 갤러리 첨부</ButtonText>
          </Button>
        </ButtonContainer>

      </ContentWrapper>

      {openShoot && <Shooting setOpenShoot={setOpenShoot} />}
      {openPicture && <Picture setOpenPicture={setOpenPicture} />}
    </ApplicationBase>
  );
};

export default Application;

const ApplicationBase = styled.section`
  background-color: #22c55d;
  position: relative;
  height: calc(var(--vh, 1vh) * 100);
`;

const ContentWrapper = styled.div`
  padding: 32px 16px;
  width: 100%;
`;

const BackButton = styled.button`
  margin-bottom: 60px;
  filter: brightness(0) invert(1); 
`;

const H1 = styled.h1`
  font-family: 'Pretendard', sans-serif;
  font-weight: 700;
  font-size: 36px;
  line-height: 1.3;
  color: #ffffff;
`;

const Subtitle = styled.p`
  font-family: 'Pretendard', sans-serif;
  font-weight: 500;
  font-size: 16px;
  margin-top: 12px;
  color: #ffffff;
`;

const ButtonContainer = styled.div`
  position: absolute;
  bottom: 32px;
  left: 0;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
`;

const Button = styled.button`
  display: flex;
  align-items: center;
  width: 353px;
  height: 80px;
  background: #fbfbfb;
  border-radius: 12px;
  padding: 12px;
  border: none;
  cursor: pointer;
`;

const IconWrapper = styled.div`
  width: 56px;
  height: 56px;
  background: #f4f4f4;
  border-radius: 999px;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: 16px;
`;

const ButtonText = styled.span`
  font-family: 'Pretendard', sans-serif;
  font-size: 18px;
  font-weight: 500;
  text-align: left;
  color: #3c3c3c;
`;


const ApplicationBody = styled.div`
  height: calc(100% - 100px);
  display: flex;
  align-items: center;
  padding: 24px 36px;
  justify-content: space-evenly;
  flex-direction: column;
`;


const BtnBox = styled.div`
  margin-top: 12px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 100%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
`;

const CloseBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  width: 100%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #373737;
`;

File: ./quality-admin-web/src/component/webapp/Application/SubmitDetail.tsx
Content:
import { useRouter } from 'next/router';
import styled from 'styled-components';

import MobileModal from '../../Common/MobileModal';

interface SubmitProps {
  submitData: {
    companyName: string;
    businessNo: string;
    businessType: string;
    phoneNo: string;
  };
  options: [];
  setOpenDetail: React.Dispatch<React.SetStateAction<boolean>>;
  handleSubmit: () => void;
}

const SubmitDetail = ({
  submitData,
  options,
  setOpenDetail,
  handleSubmit,
}: SubmitProps) => {
  
  const router = useRouter();
  return (
    <MobileModal>
      <ResultBase>
        <ResultH4>신청정보를 다시 한번 확인해 주세요.</ResultH4>

        <ResultMenu>
          <ResultList>
            <ResultSubject>상호명:</ResultSubject>
            <ResultContent>{submitData?.companyName}</ResultContent>
          </ResultList>
          <ResultList>
            <ResultSubject>사업자등록번호:</ResultSubject>
            <ResultContent>{submitData?.businessNo}</ResultContent>
          </ResultList>
          <ResultList>
            <ResultSubject>업종:</ResultSubject>
            <ResultContent>{submitData?.businessType}</ResultContent>
          </ResultList>
          <ResultList>
            <ResultSubject>핸드폰번호:</ResultSubject>
            <ResultContent>{submitData?.phoneNo}</ResultContent>
          </ResultList>
          <ResultList>
            <ContentMenu>
              <ContentH4>[취급품목]</ContentH4>
              {options.map((option: any) => {
                return <ContentItem>- {option.productName}</ContentItem>;
              })}
            </ContentMenu>
          </ResultList>
        </ResultMenu>

        <BtnBox>
          <CloseBtn
            onClick={() => {
              setOpenDetail(false);
              router.push('/webapp/appform');
            }}
          >
            수정하기
          </CloseBtn>
          <ApplyBtn onClick={handleSubmit}>신청하기</ApplyBtn>
        </BtnBox>
      </ResultBase>
    </MobileModal>
  );
};

export default SubmitDetail;

const ResultBase = styled.div`
  padding: 24px 12px;
  min-width: 320px;
`;

const ResultH4 = styled.h4`
  text-align: center;
  font-size: 18px;
  font-weight: 500;
  line-height: 1.3;
  margin: 16px 0;
`;

const ResultMenu = styled.ul`
  background-color: #e7f8f4;
  padding: 16px;
  line-height: 1.6;
  border-radius: 8px;
`;

const ResultList = styled.li`
  display: flex;
  align-items: center;
  margin-top: 6px;
`;

const ResultSubject = styled.h4`
  width: 30%;
`;

const ResultContent = styled.span`
  width: 70%;
`;

const ContentMenu = styled.ul`
  margin-top: 12px;
`;

const ContentH4 = styled.h4`
  font-weight: 600;
`;

const ContentItem = styled.li``;

const BtnBox = styled.div`
  display: flex;
  margin-top: 24px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 48%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
`;

const CloseBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  margin-right: 7px;
  border-radius: 8px;
  color: #373737;
`;

File: ./quality-admin-web/src/component/webapp/Application/Info.tsx
Content:
import { useRouter } from 'next/router';
import styled from 'styled-components';

const Info = () => {
  const router = useRouter();

  return (
    <ContentWrapper>
      <Title>
        복잡한 자가품질검사 일정,
        <br />
        이제 자동으로 챙겨드려요.
      </Title>
      <StepContainer>
        <Step>
          <StepNumber>1</StepNumber>
          <StepText>아래 버튼을 눌러</StepText>
        </Step>
        <Step>
          <StepNumber>2</StepNumber>
          <StepText>사업자 정보를 입력해두면</StepText>
        </Step>
        <Step>
          <StepNumber>3</StepNumber>
          <StepText>맞춤 검사 알림을 보내드려요</StepText>
        </Step>
      </StepContainer>
      <Spacer>
        <FreeText>평생 수수료 무료</FreeText>
        <RegisterButton onClick={() => router.push('/webapp/application')}>
          지금 알림 등록하기
        </RegisterButton>
      </Spacer>
    </ContentWrapper>
  );
};

export default Info;

const ContentWrapper = styled.div`
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
  padding: 42px 24px;
  box-sizing: border-box;
`;

const Title = styled.h1`
  font-family: 'Pretendard', sans-serif;
  font-weight: 600;
  font-size: 23px;
  text-align: left;
  color: #3c3c3c;
  margin-bottom: 40px;
`;

const StepContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
`;

const Step = styled.div`
  display: flex;
  align-items: center;
  margin-bottom: 37px;
`;

const StepNumber = styled.div`
  width: 38px;
  height: 38px;
  background-color: #e9f9ef;
  color: #1ebb58;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: 'Pretendard', sans-serif;
  font-weight: 600;
  font-size: 23px;
  margin-right: 15px;
`;

const StepText = styled.p`
  font-family: 'Pretendard', sans-serif;
  font-weight: 600;
  font-size: 22px;
  color: #3a424a;
`;

const Spacer = styled.div`
  position: absolute;
  bottom: 36px;
  transform: translateX(-50%);
  left: 50%;
`;

const FreeText = styled.p`
  font-family: 'Pretendard', sans-serif;
  font-weight: 500;
  font-size: 16px;
  text-align: center;
  color: rgba(58, 66, 74, 0.5);
  margin-bottom: 20px;
`;

const RegisterButton = styled.button`
  width: 352px;
  height: 59px;
  background-color: #1ebb58;
  color: #ffffff;
  font-family: 'Pretendard', sans-serif;
  font-weight: 700;
  font-size: 18px;
  border: none;
  border-radius: 12px;
  cursor: pointer;
`;

File: ./quality-admin-web/src/component/webapp/Application/AppForm.tsx
Content:
import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/router';
import { setCommonState } from '@/redux/modules/common';
import styled from 'styled-components';

import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '@/redux/modules/reducer';

import { LiaExclamationCircleSolid } from 'react-icons/lia';

import StyledDropdown from '@/component/Common/Dropdown/StyledDropdown';
import Toast from '@/component/Common/Toast';
import ApplicationGuide from './Guide/ApplicationGuide';

const AppForm = () => {
  const dispatch = useDispatch();
  const router = useRouter();
  const selectedOptions = useSelector((state: RootState) => state.common);
  const [openEdit, setOpenEdit] = useState(false);
  const [isDropdownOpen, setIsDropDownOpen] = useState(false);
  const [openToast, setOpenToast] = useState(false);
  
  const [agreements, setAgreements] = useState({
    guidanceAgreed: false,
    personalInfoAgreed: false,
  });

  
  const [editInfo, setEditInfo] = useState(selectedOptions);
  const [optionItem, setOptionItem] = useState(selectedOptions.businessType);
  const options = [
    '식품 제조 가공업',
    '즉석 판매 제조 가공업',
    '식품첨가물 제조업',
    'OEM식품 수입/판매업',
    '식품 용기/포장류 제조업',
    '축산물가공업(식육,유가 알가공업 등)',
    '식육포장처리업',
    '식육즉석판매가공업',
    '식용란수입판매업',
    '그 외',
  ];

  
  useEffect(() => {
    if (optionItem === '그 외') {
      setOpenToast(true);
      setOptionItem(selectedOptions.businessType);
    }
    setEditInfo((prev: any) => ({
      ...prev,
      businessType: optionItem,
    }));
  }, [optionItem]);

  const formatBusinessNo = (value: string) => {
    const cleaned = value.replace(/\D/g, '');
    const match = cleaned.match(/^(\d{3})(\d{2})(\d{5})$/);

    if (match) {
      return `${match[1]}-${match[2]}-${match[3]}`;
    }

    return value;
  };

  const handleInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;

    setEditInfo((prev: any) => ({
      ...prev,
      [name]: name === 'businessNo' ? formatBusinessNo(value) : value,
    }));
  }, []);
  console.log(editInfo);

  const handleApply = () => {
    dispatch(
      setCommonState({
        ...editInfo,
      })
    );

    router.push('/webapp/select');
  };

  return (
    <FormBase>
      <H1>검사 안내 알림톡 신청</H1>
      <H4>
        <StrongH4>Step 1.</StrongH4>
        입력정보확인
      </H4>

      {!openEdit ? (
        <SignupBody>
          <SignupMenu>
            <SignupItem>
              <SignupLabel>상호명</SignupLabel>
              <SignupContent>{editInfo.companyName}</SignupContent>
            </SignupItem>
            <SignupItem>
              <SignupLabel>사업자등록번호</SignupLabel>
              <SignupContent>{editInfo.businessNo}</SignupContent>
            </SignupItem>
            <SignupItem>
              <SignupLabel>대표자명</SignupLabel>
              <SignupContent>{editInfo.repName}</SignupContent>
            </SignupItem>
            <SignupItem>
              <SignupLabel>업종</SignupLabel>
              <SignupContent>{editInfo.businessType}</SignupContent>
            </SignupItem>
          </SignupMenu>
          <SignupInfoBox>
            <Alert>
              <InfoIcon />
            </Alert>
            <SignupInfo>
              사업자등록증의 정보와 다를 경우, '수정하기'버튼을 클릭하여 정보를
              수정해 주세요.
            </SignupInfo>
          </SignupInfoBox>

          <ModifyBtn
            onClick={() => {
              setOpenEdit(true);
            }}
          >
            수정하기
          </ModifyBtn>
        </SignupBody>
      ) : (
        <SignupBody>
          <SignupMenu>
            <SignupItem>
              <SignupLabel>상호명</SignupLabel>
              <SignupInput
                name="companyName"
                placeholder="상호명"
                value={editInfo.companyName}
                onChange={(e) => {
                  handleInput(e);
                }}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>사업자등록번호</SignupLabel>
              <SignupInput
                name="businessNo"
                placeholder="000-00-00000"
                maxLength={10}
                value={editInfo.businessNo}
                onChange={(e) => {
                  handleInput(e);
                }}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>대표자명</SignupLabel>
              <SignupInput
                name="repName"
                placeholder="대표자명"
                value={editInfo.repName}
                onChange={(e) => {
                  handleInput(e);
                }}
              />
            </SignupItem>
            <SignupItem>
              <SignupLabel>업종</SignupLabel>
              <SignupDropdown>
                <StyledDropdown
                  title="업종 선택"
                  options={options}
                  selectedOption={optionItem}
                  isOpen={isDropdownOpen}
                  toggle={() => {
                    setIsDropDownOpen(!isDropdownOpen);
                  }}
                  onSelectedOption={setOptionItem}
                />
              </SignupDropdown>
            </SignupItem>
          </SignupMenu>
          <SaveBtn
            onClick={() => {
              setOpenEdit(false);
            }}
          >
            저장하기
          </SaveBtn>
        </SignupBody>
      )}

      <SignupBody>
        <H4>
          <StrongH4>Step 2.</StrongH4>
          핸드폰 번호 입력
        </H4>
        <SignupLabel>핸드폰 번호</SignupLabel>
        <PhoneNoInput
          name="phoneNo"
          value={editInfo.phoneNo}
          onChange={(e) => {
            handleInput(e);
          }}
        />
        <InputInfo>* 입력한 핸드폰 번호로 알림톡이 수신됩니다.</InputInfo>
      </SignupBody>

      <ApplicationGuide agreements={agreements} setAgreements={setAgreements} />
      <BtnBox>
        <CloseBtn
          onClick={() => {
            router.back();
          }}
        >
          이전
        </CloseBtn>
        <ApplyBtn
          disabled={
            editInfo.phoneNo === '' ||
            !agreements.guidanceAgreed ||
            !agreements.personalInfoAgreed
          }
          onClick={handleApply}
        >
          다음
        </ApplyBtn>
      </BtnBox>
      {openToast && (
        <Toast setOpenToast={setOpenToast}>
          <ToastP>
            해당 업종이 목록에 없다면 자가 품질 검사 대상이 아닙니다.
          </ToastP>
        </Toast>
      )}
    </FormBase>
  );
};

export default AppForm;

const FormBase = styled.section`
  padding: 32px 12px;
`;
const H1 = styled.h1`
  font-size: 22px;
  font-weight: 600;
`;

const H4 = styled.h4`
  margin: 24px 0 16px;
  font-size: 17px;
  font-weight: 500;
`;

const StrongH4 = styled.strong`
  color: ${(props) => props.theme.primary_02};
  margin-right: 7px;
`;


const SignupBody = styled.div`
  
  margin-top: 18px;
  padding-bottom: 24px;
  border-bottom: 1px solid #e0f0f0;
`;

const SignupMenu = styled.ul``;

const SignupItem = styled.li`
  display: flex;
  align-items: center;
  padding: 12px 0;
  &:first-child {
    padding: 0 0 12px;
  }
`;

const SignupLabel = styled.span`
  width: 30%;
  margin-left: 5px;
  font-size: 14px;
`;

const SignupInput = styled.input`
  display: flex;
  align-items: center;
  width: 70%;
  height: 37px;
  padding: 0 10px;
  margin-top: 8px;
  border: 1px solid #d2d5da;
  border-radius: 5px;
  &::placeholder {
    color: #9ca3af;
  }
`;

const PhoneNoInput = styled(SignupInput)`
  width: 100%;
  padding: 0 12px;
  font-size: 15px;
`;

const SignupContent = styled.div`
  background-color: #f7f9fb;
  display: flex;
  align-items: center;
  width: 80%;
  height: 37px;
  padding: 0 16px;
  margin-top: 8px;
  border-radius: 5px;
  letter-spacing: -0.5px;
`;

const SignupInfoBox = styled.div`
  display: flex;
  margin: 16px 0 12px;
  font-size: 14px;
  color: ${(props) => props.theme.primary_02};
`;

const SignupInfo = styled.p`
  margin-left: 8px;
  line-height: 1.4;
`;

const SignupDropdown = styled.div`
  margin-top: 8px;
`;

const Alert = styled.div``;

const InfoIcon = styled(LiaExclamationCircleSolid)`
  color: ${(props) => props.theme.primary_02};
  font-size: 20px;
  padding: 0 0;
`;

const ModifyBtn = styled.button`
  background-color: #20bb591a;
  width: 100%;
  height: 45px;
  border: 1px solid ${(props) => props.theme.primary_02};
  border-radius: 5px;
  color: ${(props) => props.theme.primary_02};
`;

const SaveBtn = styled(ModifyBtn)`
  background-color: ${(props) => props.theme.primary_02};
  color: #fff;
`;

const InputInfo = styled.p`
  margin-top: 8px;
  color: #aaa;
  font-size: 13px;
`;


const BtnBox = styled.div`
  margin-top: 50px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 48%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
`;

const CloseBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  margin-right: 7px;
  border-radius: 8px;
  color: #373737;
`;


const ToastP = styled.p`
  color: #601f22;
`;

File: ./quality-admin-web/src/component/webapp/Application/SubmitForm.jsx
Content:
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import dayjs from 'dayjs';
import axios from 'axios';
import { useSelector } from 'react-redux';


import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableBody,
  TableRow,
  Checkbox,
} from '@mui/material';
import styled from 'styled-components';

import { FaRegCalendarAlt } from 'react-icons/fa';
import { RxExclamationTriangle } from 'react-icons/rx';
import { TbCheckbox } from 'react-icons/tb';

import SearchCalendar from '@/component/Common/Calendar';
import MobileModal from '@/component/Common/MobileModal';
import SubmitDetail from '@/component/webapp/Application/SubmitDetail';

const SubmitForm = ({ frequencyData }) => {
  const { datas } = frequencyData;
  const submitData = useSelector((state) => state.common);
  const router = useRouter();
  
  const [openDetail, setOpenDetail] = useState(false);
  
  const [notiProducts, setNotiProducts] = useState([]);

  
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [checkedItems, setCheckedItems] = useState({});
  const [selectedDates, setSelectedDates] = useState({});
  const [expiredProducts, setExpiredProducts] = useState([]);
  const [openModal, setOpenModal] = useState(false);

  const handleCheckboxChange = (product) => {
    setCheckedItems((prev) => ({
      ...prev,
      [product]: !prev[product],
    }));
  };

  const applySelectedDate = () => {
    const updatedSelectedDates = {};
    Object.keys(checkedItems).forEach((key) => {
      if (checkedItems[key]) {
        updatedSelectedDates[key] = selectedDate;
      }
    });

    setSelectedDates((prevDates) => ({
      ...prevDates,
      ...updatedSelectedDates,
    }));

    setCheckedItems({});
    setSelectedDate(new Date());

    
    const nonExpiredList = Object.keys(updatedSelectedDates)
      .map((product) => {
        const data = datas.find((item) => item.product === product);
        const frequencyMatch = data.frequency.match(/(\d+)개월/);
        const monthsToAdd = frequencyMatch
          ? parseInt(frequencyMatch[1], 10)
          : 0;

        const notificationDate = dayjs(updatedSelectedDates[product])
          .add(monthsToAdd, 'month')
          .format('YYYY-MM-DD');

        if (dayjs(notificationDate).isAfter(dayjs())) {
          return {
            productName: product,
            expiryDate: notificationDate,
          };
        }
        return null;
      })
      .filter((item) => item !== null); 

    setNotiProducts((prevNotiProducts) => [
      ...prevNotiProducts,
      ...nonExpiredList,
    ]);
  };

  
  useEffect(() => {
    const expiredProductsList = datas
      .filter((data) => selectedDates[data.product])
      .map((data) => {
        const frequencyMatch = data.frequency.match(/(\d+)개월/);
        const monthsToAdd = frequencyMatch
          ? parseInt(frequencyMatch[1], 10)
          : 0;

        
        const notificationDate = dayjs(selectedDates[data.product])
          .add(monthsToAdd, 'month')
          .format('YYYY-MM-DD');

        return {
          product: data.product,
          notificationDate,
        };
      })
      .filter((item) => dayjs(item.notificationDate).isBefore(dayjs())); 

    
    setExpiredProducts(expiredProductsList);
    if (expiredProductsList.length !== 0) {
      setOpenModal(true);
    }
  }, [selectedDates, datas]);

  const handleSubmit = async () => {
    let body = {
      businessNo: submitData.businessNo,
      companyName: submitData.companyName,
      repName: submitData.repName,
      businessType: submitData.businessType,
      phoneNo: submitData.phoneNo,
      products: notiProducts,
    };

    if (notiProducts.length === 0) {
      return alert('알림톡을 신청하실 제품을 선택해주세요');
    }

    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/submit`,
        body
      );
      if (res.status === 201) {
        alert('신청이 완료되었습니다.');
        router.push('/webapp/application');

        return setOpenDetail(false);
      } else {
        return alert('신청 중 오류가 발생하였습니다. 다시 시도해주세요.');
      }
    } catch (err) {
      return alert('신청 중 오류가 발생하였습니다. 다시 시도해주세요.');
    }
  };
  console.log(notiProducts);

  return (
    <SubmitBase>
      <SubmitH1>검사 안내 알림톡 신청</SubmitH1>
      <SubmitH4>
        <CheckboxIcon />
        자가품질검사 적용시점을 확인하세요.
      </SubmitH4>

      <SubmitInfo>
        제품의 자체 품질 검사는{' '}
        <SubmitStrong>제품을 만든 날짜를 기준</SubmitStrong>으로 합니다. 하지만,
        해외에서 만들어져 들어오는 제품(이를테면 OEM 제품)이나, 제품을 만들기
        위해{' '}
        <SubmitStrong>
          수입한 반가공 원료와 포장재는 수입 신고가 완료된 날을 기준
        </SubmitStrong>
        으로 검사 시기를 계산합니다.
      </SubmitInfo>

      <SubmitH4>제품을 선택하여 제품 생산일을 지정해 주세요</SubmitH4>
      <CalendarBox>
        <SearchCalendar
          selectedDate={selectedDate}
          setSelectedDate={setSelectedDate}
        />
        <ApplyBtn onClick={applySelectedDate}>선택적용</ApplyBtn>
      </CalendarBox>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <StyledTableCell></StyledTableCell>
              <StyledTableCell></StyledTableCell>
              <StyledTableCell></StyledTableCell>
            </TableRow>
          </TableHead>
        </Table>
        {datas.map((data) => {
          return (
            <TableBody key={data.product}>
              <TableRow>
                <StyledTableCell
                  padding="none"
                  sx={{
                    width: '5%',
                  }}
                >
                  <Checkbox
                    color="success"
                    checked={checkedItems[data.product] || false}
                    onChange={() => handleCheckboxChange(data.product)}
                  />
                </StyledTableCell>
                <StyledTableCell
                  sx={{
                    width: '45%',
                  }}
                >
                  {data.product}
                </StyledTableCell>
                <StyledTableCell
                  sx={{
                    width: '50%',
                  }}
                >
                  <SelectedDate>
                    <CalendarIcon />
                    {selectedDates[data.product]
                      ? selectedDates[data.product].toLocaleDateString()
                      : ''}
                  </SelectedDate>
                </StyledTableCell>
              </TableRow>
            </TableBody>
          );
        })}
      </TableContainer>

      <BtnBox>
        <ResetBtn
          onClick={() => {
            router.back();
          }}
        >
          이전
        </ResetBtn>
        <CompleteBtn
          onClick={() => {
            setOpenDetail(true);
          }}
        >
          신청하기
        </CompleteBtn>
      </BtnBox>
      {openModal && (
        <MobileModal>
          <ModalBase>
            <IconDiv>
              <ModalIcon />
            </IconDiv>
            <ModalContent>
              <ModalP>
                입력하신
                <ModalStrong>
                  {expiredProducts.map((product) => product.product).join(', ')}
                </ModalStrong>
                의 검사기한이 지났습니다.
              </ModalP>
              <ModalP>입력된 날짜를 다시 한번 확인해 주세요.</ModalP>

              <ModalSpan>[유효기간]</ModalSpan>
              {expiredProducts.map((product) => (
                <ModalP key={product.product}>
                  • {product.product}: {product.notificationDate}
                </ModalP>
              ))}
            </ModalContent>
            <ModalBtn
              onClick={() => {
                setOpenModal(false);
                setExpiredProducts([]);
              }}
            >
              닫기
            </ModalBtn>
          </ModalBase>
        </MobileModal>
      )}
      {openDetail && (
        <SubmitDetail
          submitData={submitData}
          options={notiProducts}
          setOpenDetail={setOpenDetail}
          handleSubmit={handleSubmit}
        />
      )}
    </SubmitBase>
  );
};

export default SubmitForm;

const SubmitBase = styled.section`
  padding: 32px 12px;
`;

const SubmitH1 = styled.h1`
  padding-left: 3px;
  margin-bottom: 16px;
  font-size: 22px;
  font-weight: 600;
`;

const SubmitH4 = styled.h4`
  display: flex;
  align-items: center;
  padding-left: 3px;
  font-size: 16px;
  line-height: 1.2;
`;

const CheckboxIcon = styled(TbCheckbox)`
  margin-right: 7px;
  font-size: 24px;
  color: ${(props) => props.theme.primary_01};
`;

const SubmitInfo = styled.div`
  background-color: #f7f9fb;
  margin: 12px 0;
  padding: 16px 12px;
  color: #6f7787;
  line-height: 1.6;
`;

const SubmitStrong = styled.strong`
  color: ${(props) => props.theme.primary_01};
`;

const CalendarBox = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 16px;
`;

const ApplyBtn = styled.button`
  background-color: #2b2d3b;
  height: 37px;
  padding: 0 24px;
  border-radius: 5px;
  color: #fff;
`;

const SelectedDate = styled.div`
  background-color: #f4f6f9;
  display: flex;
  align-items: center;
  padding: 12px;
  border-radius: 10px;
  color: #252525;
`;

const CalendarIcon = styled(FaRegCalendarAlt)`
  margin-right: 8px;
`;


const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    border: none;
    color: #6f7787;
  }
`;


const BtnBox = styled.div`
  display: flex;
  margin-top: 12px;
`;

const CompleteBtn = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  width: 48%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
`;

const ResetBtn = styled(CompleteBtn)`
  background-color: #ebeff6;
  margin-right: 12px;
  color: #373737;
`;


const ModalBase = styled.div`
  min-width: 320px;
  padding: 24px 16px;
`;

const ModalIcon = styled(RxExclamationTriangle)`
  font-size: 24px;
`;

const IconDiv = styled.div`
  text-align: center;
`;

const ModalContent = styled.div`
  background-color: #e7f8f4;
  padding: 20px 12px;
  margin: 16px 0;
  line-height: 1.3;
  font-size: 14px;
  text-align: center;
  color: #434343;
  border-radius: 8px;
  word-break: break-all;
`;

const ModalP = styled.p`
  margin-top: 4px;
`;

const ModalSpan = styled.span`
  display: inline-block;
  margin-top: 12px;
  font-weight: 600;
`;

const ModalStrong = styled.strong`
  font-weight: 500;
  margin: 0 3px;
`;

const ModalBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 100%;
  height: 45px;
  border-radius: 8px;
  color: #fff;
`;

File: ./quality-admin-web/src/component/webapp/Application/Modal/Shooting.tsx
Content:
import { useState } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';

import MobileModal from '@/component/Common/MobileModal';


import { FiCamera } from 'react-icons/fi';

interface ShootingProps {
  setOpenShoot: React.Dispatch<React.SetStateAction<boolean>>;
}

const Shooting = ({ setOpenShoot }: ShootingProps) => {
  const router = useRouter();
  const [agree, setAgree] = useState(true);
  return (
    <MobileModal>
      {agree ? (
        <ShootingBase>
          <IconDiv>
            <CameraIcon />
          </IconDiv>
          <ShootingP>
            "자가품질검사 챗봇"에서 사진을 촬영하고 동영상을 녹화하도록
            허용하시겠습니까?
          </ShootingP>
          <BtnBox>
            <ApplyBtn
              onClick={() => {
                router.push('/ocr/shoot');
              }}
            >
              허용
            </ApplyBtn>
            <CloseBtn
              onClick={() => {
                setAgree(false);
              }}
            >
              거부
            </CloseBtn>
          </BtnBox>
        </ShootingBase>
      ) : (
        <ShootingBase>
          <IconDiv>
            <CameraIcon />
          </IconDiv>
          <ShootingP>
            사업자등록증 카메라 촬영이 거부 되었습니다. 알림톡 신청을 위해
            정보를 직접 입력하실 수 있습니다. <br></br> <br></br>정보를 직접
            입력하시겠습니까?
          </ShootingP>
          <BtnBox>
            <ApplyBtn
              onClick={() => {
                router.push('/webapp/form');
              }}
            >
              직접 입력하기
            </ApplyBtn>
            <CloseBtn
              onClick={() => {
                setOpenShoot(false);
              }}
            >
              알림신청 취소 및 닫기
            </CloseBtn>
          </BtnBox>
        </ShootingBase>
      )}
    </MobileModal>
  );
};

export default Shooting;

const ShootingBase = styled.div`
  padding: 24px 16px;
`;

const IconDiv = styled.div`
  text-align: center;
`;

const CameraIcon = styled(FiCamera)`
  font-size: 24px;
`;

const ShootingP = styled.p`
  background-color: #e7f8f4;
  padding: 20px 12px;
  margin: 16px 0;
  line-height: 1.3;
  font-size: 14px;
  color: #434343;
  border-radius: 8px;
`;


const BtnBox = styled.div`
  margin-top: 12px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 100%;
  height: 45px;
  border-radius: 8px;
  color: #fff;
`;

const CloseBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  margin-top: 12px;
  color: #373737;
`;

File: ./quality-admin-web/src/component/webapp/Application/Modal/Picture.tsx
Content:
import { useState } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';

import MobileModal from '@/component/Common/MobileModal';


import { SlPicture } from 'react-icons/sl';

interface PictureProps {
  setOpenPicture: React.Dispatch<React.SetStateAction<boolean>>;
}

const Picture = ({ setOpenPicture }: PictureProps) => {
  const router = useRouter();
  const [agree, setAgree] = useState(true);
  return (
    <MobileModal>
      {agree ? (
        <PictureBase>
          <IconDiv>
            <CameraIcon />
          </IconDiv>
          <PictureP>
            "자가품질검사 챗봇"에서 사용자의 사진에 접근하려고합니다.
          </PictureP>
          <BtnBox>
            <ApplyBtn
              onClick={() => {
                router.push('/ocr/photo');
              }}
            >
              사진선택
            </ApplyBtn>
            <CloseBtn
              onClick={() => {
                setAgree(false);
              }}
            >
              거부
            </CloseBtn>
          </BtnBox>
        </PictureBase>
      ) : (
        <PictureBase>
          <IconDiv>
            <CameraIcon />
          </IconDiv>
          <PictureP>
            사업자등록증 사진 첨부가 거부 되었습니다. 알림톡 신청을 위해 정보를
            직접 입력하실 수 있습니다. <br></br> <br></br>정보를 직접
            입력하시겠습니까?
          </PictureP>
          <BtnBox>
            <ApplyBtn
              onClick={() => {
                router.push('/webapp/form');
              }}
            >
              직접 입력하기
            </ApplyBtn>
            <CloseBtn
              onClick={() => {
                setOpenPicture(false);
              }}
            >
              알림신청 취소 및 닫기
            </CloseBtn>
          </BtnBox>
        </PictureBase>
      )}
    </MobileModal>
  );
};

export default Picture;

const PictureBase = styled.div`
  padding: 24px 16px;
`;

const IconDiv = styled.div`
  text-align: center;
`;

const CameraIcon = styled(SlPicture)`
  font-size: 24px;
`;

const PictureP = styled.p`
  background-color: #e7f8f4;
  padding: 20px 12px;
  margin: 16px 0;
  line-height: 1.3;
  font-size: 14px;
  color: #434343;
  border-radius: 8px;
`;


const BtnBox = styled.div`
  margin-top: 12px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 100%;
  height: 45px;
  border-radius: 8px;
  color: #fff;
`;

const CloseBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  margin-top: 12px;
  color: #373737;
`;

File: ./quality-admin-web/src/component/webapp/Application/SelectForm.jsx
Content:
import { NextPage } from 'next';
import { useState, useCallback, useEffect } from 'react';
import { useRouter } from 'next/router';

import { useDispatch } from 'react-redux';
import { setOptions } from '@/redux/modules/common';
import styled from 'styled-components';

import { FeeProps } from '../../../../type/feeType';

import { IoCloseOutline } from 'react-icons/io5';
import { TbCheckbox } from 'react-icons/tb';

import StyledDropdown from '@/component/Common/Dropdown/StyledDropdown';
import InputDropdown from '@/component/Common/Dropdown/InputDropdown';

const SelectForm = ({ feeData }) => {
  const { categories } = feeData;
  const router = useRouter();
  const dispatch = useDispatch();
  
  const [scdOptions, setScdOptions] = useState([]);
  const [trdOptions, setTrdOptions] = useState([]);
  
  const [dropOpen, setDropOpen] = useState({
    fst: false,
    scd: false,
    trd: false,
  });
  const [fstOption, setFstOption] = useState('업종 선택');
  const fstOptions = ['식품업', '축산물', '기구 및 용기'];
  const [scdOption, setScdOption] = useState('제품 카테고리');
  const [trdOption, setTrdOption] = useState('제품 선택');
  
  const [selectedRows, setSelectedRows] = useState([]);

  
  const getCategories = useCallback(
    (fstCategory, scdCategory = null) => {
      const scdSet = new Set();
      const trdSet = new Set();

      categories.forEach((category) => {
        if (category.fst_category === fstCategory) {
          scdSet.add(category.scd_category);
          if (!scdCategory || category.scd_category === scdCategory) {
            trdSet.add(category.product);
          }
        }
      });

      setScdOptions(Array.from(scdSet));
      setTrdOptions(Array.from(trdSet));
    },
    [categories]
  );
  useEffect(() => {
    if (fstOption !== '업종 선택') {
      getCategories(fstOption);
      setScdOption('제품 카테고리'); 
      setTrdOptions([]); 
    }
  }, [fstOption, getCategories]);

  useEffect(() => {
    if (scdOption) {
      getCategories(fstOption, scdOption);
    }
  }, [scdOption, fstOption, getCategories]);

  const addSelectedRow = useCallback(() => {
    if (
      fstOption !== '업종 선택' &&
      scdOption !== '제품 카테고리' &&
      trdOption !== '제품 선택'
    ) {
      const newRow = `${fstOption} > ${scdOption} > ${trdOption}`;

      
      setSelectedRows((prevRows) => [...prevRows, newRow]);

      
      
      
      setTrdOption('제품 선택');
    }
  }, [fstOption, scdOption, trdOption]);

  const removeRow = (index) => {
    setSelectedRows((prevRows) => prevRows.filter((_, i) => i !== index));
  };
  
  const extractTrdOptions = () => {
    return selectedRows.map((row) => row.split('> ')[2]); 
  };
  
  useEffect(() => {
    if (trdOption !== '제품 선택') {
      addSelectedRow(); 
    }
  }, [trdOption, addSelectedRow]);

  const handleSave = () => {
    const result = extractTrdOptions();
    dispatch(setOptions(result));

    router.push({
      pathname: '/webapp/submit',
      query: {
        ...router.query,
        productName: result,
      },
    });
  };

  return (
    <FeeBase>
      <FeeInner>
        <FeeH1>검사 안내 알림톡 신청</FeeH1>
        <H2>
          <CheckboxIcon />
          추가된 품목 리스트
        </H2>
        <StyledDropdown
          title={fstOption}
          options={fstOptions}
          selectedOption={fstOption}
          isOpen={dropOpen.fst}
          toggle={() => {
            setDropOpen({
              fst: !dropOpen.fst,
              scd: false,
              trd: false,
            });
          }}
          onSelectedOption={setFstOption}
        />
        <StyledDropdown
          title={scdOption}
          options={scdOptions}
          selectedOption={scdOption}
          isOpen={dropOpen.scd}
          toggle={() => {
            setDropOpen({
              fst: false,
              scd: !dropOpen.scd,
              trd: false,
            });
          }}
          onSelectedOption={setScdOption}
        />
        <InputDropdown
          title={trdOption}
          options={trdOptions}
          selectedOption={trdOption}
          isOpen={dropOpen.trd}
          toggle={() => {
            setDropOpen({
              fst: false,
              scd: false,
              trd: !dropOpen.trd,
            });
          }}
          onSelectedOption={setTrdOption}
        />

        <ContentContainer>
          {selectedRows.length > 0 && (
            <>
              <ContentHeading>
                <ContentH4>
                  <CheckboxIcon />
                  추가된 품목 리스트
                </ContentH4>
                <ResetBtn onClick={() => setSelectedRows([])}>
                  선택 초기화
                </ResetBtn>
              </ContentHeading>
              <FeeBody>
                <FeeMenu>
                  {selectedRows.map((row, index) => (
                    <FeeItem key={index}>
                      <FeeP>{row}</FeeP>
                      <CloseBtn onClick={() => removeRow(index)}>
                        <CloseIcon />
                      </CloseBtn>
                    </FeeItem>
                  ))}
                </FeeMenu>
              </FeeBody>
            </>
          )}
        </ContentContainer>

        <BtnBox>
          <ReturnBtn
            onClick={() => {
              router.back();
            }}
          >
            이전
          </ReturnBtn>
          <ApplyBtn
            onClick={() => {
              if (selectedRows.length === 0) {
                return alert('업종을 선택해주세요');
              }
              handleSave();
            }}
          >
            다음
          </ApplyBtn>
        </BtnBox>
      </FeeInner>
    </FeeBase>
  );
};

export default SelectForm;

const FeeBase = styled.section``;

const FeeInner = styled.div`
  padding: 32px 16px;
`;

const FeeH1 = styled.h1`
  margin-bottom: 24px;
  font-size: 22px;
  font-weight: 600;
`;

const H2 = styled.h2`
  display: flex;
  align-items: center;
  font-size: 16px;
  margin-bottom: 20px;
`;


const ContentContainer = styled.div`
  min-height: calc(var(--vh, 1vh) * 100 - 380px);
`;

const ContentHeading = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px 0;
`;

const ContentH4 = styled.h4`
  display: flex;
  align-items: center;
  font-size: 16px;
`;

const CheckboxIcon = styled(TbCheckbox)`
  margin-right: 7px;
  font-size: 24px;
  color: ${(props) => props.theme.primary_01};
`;

const ResetBtn = styled.button`
  background-color: #2b2d3b;
  height: 37px;
  padding: 0 20px;
  border-radius: 5px;
  color: #fff;
`;

const FeeBody = styled.div`
  background-color: #f7f9fb;
  padding: 8px 6px 8px 12px;
  color: #6f7787;
  font-size: 14px;
  border-radius: 8px;
`;

const FeeMenu = styled.ul``;

const FeeItem = styled.li`
  position: relative;
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

const FeeP = styled.p``;

const CloseBtn = styled.button`
  padding: 12px 6px;
  color: #6f7787;
`;
const CloseIcon = styled(IoCloseOutline)`
  font-size: 18px;
`;


const BtnBox = styled.div`
  margin-top: 12px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 48%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
  &:disabled {
    background-color: ${(props) => props.theme.primary_01};
  }
`;

const ReturnBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  width: 48%;
  height: 45px;
  margin-right: 12px;
  border-radius: 8px;
  font-size: 15px;
  color: #373737;
`;

File: ./quality-admin-web/src/component/webapp/Application/Form.tsx
Content:
import { useCallback, useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import styled from 'styled-components';

import { useDispatch } from 'react-redux';
import { setCommonState } from '@/redux/modules/common';

import StyledDropdown from '@/component/Common/Dropdown/StyledDropdown';
import Toast from '@/component/Common/Toast';

const Form = () => {
  const dispatch = useDispatch();
  const router = useRouter();
  const [isDropdownOpen, setIsDropDownOpen] = useState(false);
  const [openToast, setOpenToast] = useState(false);
  
  const [addInfo, setAddInfo] = useState({
    companyName: '',
    businessNo: '',
    repName: '',
    businessType: '',
  });
  const [optionItem, setOptionItem] = useState('업종 선택');
  const options = [
    '식품 제조 가공업',
    '즉석 판매 제조 가공업',
    '식품첨가물 제조업',
    'OEM식품 수입/판매업',
    '식품 용기/포장류 제조업',
    '축산물가공업(식육,유가 알가공업 등)',
    '식육포장처리업',
    '식육즉석판매가공업',
    '식용란수입판매업',
    '그 외',
  ];

  
  useEffect(() => {
    if (optionItem === '그 외') {
      setOpenToast(true);
      setOptionItem('업종 선택');
    }
    setAddInfo((prev) => ({
      ...prev,
      businessType: optionItem,
    }));
  }, [optionItem]);

  const formatBusinessNo = (value: string) => {
    
    const cleaned = value.replace(/\D/g, ''); 
    const match = cleaned.match(/^(\d{3})(\d{2})(\d{5})$/);

    if (match) {
      return `${match[1]}-${match[2]}-${match[3]}`; 
    }

    return value; 
  };

  const handleInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;

    setAddInfo((prev) => ({
      ...prev,
      [name]: name === 'businessNo' ? formatBusinessNo(value) : value,
    }));
  }, []);

  const handleApply = () => {
    dispatch(
      setCommonState({
        ...addInfo,
      })
    );

    router.push('/webapp/appform');
  };

  return (
    <FormBase>
      <H1>검사 안내 알림톡 신청</H1>
      <SignupBody>
        <SignupMenu>
          <SignupItem>
            <SignupLabel>상호명</SignupLabel>
            <SignupInput
              name="companyName"
              placeholder="상호명"
              onChange={(e) => {
                handleInput(e);
              }}
            />
          </SignupItem>
          <SignupItem>
            <SignupLabel>사업자등록번호</SignupLabel>
            <SignupInput
              name="businessNo"
              placeholder="000-00-00000"
              maxLength={10}
              value={addInfo.businessNo}
              onChange={(e) => {
                handleInput(e);
              }}
            />
          </SignupItem>
          <SignupItem>
            <SignupLabel>대표자명</SignupLabel>
            <SignupInput
              name="repName"
              placeholder="대표자명"
              onChange={(e) => {
                handleInput(e);
              }}
            />
          </SignupItem>
          <SignupItem>
            <SignupLabel>업종</SignupLabel>
            <SignupDropdown>
              <StyledDropdown
                title="업종 선택"
                options={options}
                selectedOption={optionItem}
                isOpen={isDropdownOpen}
                toggle={() => {
                  setIsDropDownOpen(!isDropdownOpen);
                }}
                onSelectedOption={setOptionItem}
              />
            </SignupDropdown>
          </SignupItem>
        </SignupMenu>
      </SignupBody>
      <BtnBox>
        <CloseBtn
          onClick={() => {
            router.back();
          }}
        >
          이전
        </CloseBtn>
        <ApplyBtn disabled={optionItem === '업종 선택'} onClick={handleApply}>
          다음
        </ApplyBtn>
      </BtnBox>
      {openToast && (
        <Toast setOpenToast={setOpenToast}>
          <ToastP>
            해당 업종이 목록에 없다면 자가 품질 검사 대상이 아닙니다.
          </ToastP>
        </Toast>
      )}
    </FormBase>
  );
};

export default Form;

const FormBase = styled.section`
  position: relative;
  padding: 32px 16px;
`;
const H1 = styled.h1`
  padding-left: 3px;
  margin-bottom: 24px;
  font-size: 22px;
  font-weight: 600;
`;

const SignupBody = styled.div`
  height: calc(var(--vh, 1vh) * 100 - 180px);
  margin-top: 18px;
`;

const SignupMenu = styled.ul``;

const SignupItem = styled.li`
  padding: 12px 0;
  &:first-child {
    padding: 0 0 12px;
  }
`;

const SignupLabel = styled.label`
  margin-left: 5px;
  font-size: 13px;
  color: #858585;
`;

const SignupInput = styled.input`
  background-color: #f7f9fb;
  display: flex;
  align-items: center;
  width: 100%;
  height: 37px;
  padding: 0 10px;
  margin-top: 8px;
  border: 1px solid #d2d5da;
  border-radius: 5px;
  &::placeholder {
    color: #9ca3af;
  }
`;

const SignupDropdown = styled.div`
  margin-top: 8px;
`;


const BtnBox = styled.div`
  display: flex;
  margin-top: 12px;
`;

const ApplyBtn = styled.button`
  background-color: ${(props) => props.theme.primary_02};
  width: 48%;
  height: 45px;
  border-radius: 8px;
  font-size: 15px;
  color: #fff;
  &:disabled {
    background-color: ${(props) => props.theme.primary_01};
  }
`;

const CloseBtn = styled(ApplyBtn)`
  background-color: #ebeff6;
  width: 48%;
  height: 45px;
  margin-right: 12px;
  border-radius: 8px;
  font-size: 15px;
  color: #373737;
`;


const ToastP = styled.p`
  color: #601f22;
`;

File: ./quality-admin-web/src/component/Common/BottomSheet.tsx
Content:
import { NextPage } from 'next';
import { useState, useRef, useCallback, useEffect } from 'react';
import styled from 'styled-components';

import { useSpring, animated } from '@react-spring/web';

interface BottomSheetProps {
  isOpen: boolean;
  onClose: () => void;
  height: number;
  children: React.ReactNode;
}

const BottomSheet: NextPage<BottomSheetProps> = (props) => {
  const { isOpen, onClose, height, children } = props;

  const [isInDOM, setIsInDOM] = useState(false);
  const bodyOverflowStyleRef = useRef<string>('');
  const topRef = useRef<string>('');
  const contentRef = useRef<HTMLDivElement | null>(null);
  const [heightPixel, setHeightPixel] = useState<number>(
    height || window.innerHeight / 2
  );

  const [springProps, api] = useSpring(() => ({
    height: '0px',
    onRest: {
      height: (height) => {
        if (height.value === `${heightPixel}px`) {
          return;
        }
        if (height.value === '0px') {
          setIsInDOM(false);
        }
      },
    },
  }));

  const handleContentClick = useCallback(
    (e: React.MouseEvent<HTMLDivElement>) => e.stopPropagation(),
    []
  );

  
  useEffect(() => {
    if (contentRef.current) {
      const resizeObserver = new ResizeObserver((entries) => {
        for (let entry of entries) {
          setHeightPixel(entry.contentRect.height); 
        }
      });

      resizeObserver.observe(contentRef.current);

      return () => {
        if (contentRef.current) {
          resizeObserver.unobserve(contentRef.current);
        }
      };
    }
  }, [children]);

  
  useEffect(() => {
    if (isOpen) {
      const currY =
        window.scrollY ||
        document.documentElement.scrollTop ||
        document.body.scrollTop;
      bodyOverflowStyleRef.current = document.body.style.overflow;
      topRef.current = document.body.style.top;
      document.body.style.overflow = 'hidden';
      document.body.style.top = `-${currY}px`;
      setIsInDOM(true);
    } else {
      api.start({ height: '0px', immediate: false });
    }
  }, [isOpen, api]);

  useEffect(() => {
    if (isInDOM) {
      api.start({ height: `${heightPixel}px` });
    } else if (document.body.style.overflow === 'hidden') {
      document.body.style.overflow = bodyOverflowStyleRef.current;
      document.body.style.top = topRef.current;
    }
  }, [isInDOM, heightPixel, api]); 

  useEffect(() => {
    return () => {
      if (document.body.style.overflow === 'hidden') {
        document.body.style.overflow = bodyOverflowStyleRef.current;
        document.body.style.top = topRef.current;
      }
    };
  }, []);

  if (!children && !isInDOM) return null;

  return (
    <>
      {isInDOM && <BottomBase onClick={onClose} />}
      <BottomInner style={springProps} onClick={handleContentClick}>
        <ChildrenContainer isopen={isOpen} ref={contentRef}>
          {children}
        </ChildrenContainer>
      </BottomInner>
    </>
  );
};

export default BottomSheet;

const BottomBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: absolute;
  inset: 0;
  z-index: 999;
`;

const BottomInner = styled(animated.div)`
  background-color: #fff;
  position: absolute;
  bottom: 0;
  width: 100%;
  max-width: 720px;
  z-index: 999;
  border-radius: 15px 15px 0 0;
`;

const ChildrenContainer = styled.div<{ isopen: boolean }>`
  display: ${(props) => (props.isopen ? 'block' : 'none')};
`;

File: ./quality-admin-web/src/component/Common/Dropdown/InputDropdown.tsx
Content:
import { useState, useEffect } from 'react';
import styled from 'styled-components';
import { IoIosArrowDown } from 'react-icons/io';

interface DropdownProps {
  title: string | null;
  options: string[];
  selectedOption: string;
  isOpen: boolean;
  toggle: () => void;
  onSelectedOption: React.Dispatch<React.SetStateAction<string>>;
}

const InputDropdown = ({
  title,
  options,
  selectedOption,
  isOpen,
  toggle,
  onSelectedOption,
}: DropdownProps) => {
  const [searchTerm, setSearchTerm] = useState(''); 
  const [filteredOptions, setFilteredOptions] = useState<string[]>(options); 

  useEffect(() => {
    
    const filtered = options.filter((option) =>
      option.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredOptions(filtered);
  }, [searchTerm, options]);

  return (
    <Selectbox onClick={toggle}>
      <SelectedOption>{selectedOption || title}</SelectedOption>
      <ArrowIconWrap isDropdownOpen={isOpen}>
        <ArrowIcon />
      </ArrowIconWrap>

      {isOpen && (
        <Options>
          <SearchInput
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="검색..."
            onClick={(e) => e.stopPropagation()} 
          />
          {filteredOptions.map((option, index) => (
            <Option
              key={index}
              onClick={(e) => {
                e.stopPropagation();
                onSelectedOption(option);
                setSearchTerm('');
                toggle();
              }}
            >
              {option}
            </Option>
          ))}
        </Options>
      )}
    </Selectbox>
  );
};

export default InputDropdown;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-bottom: 16px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 10px;
`;

const SelectedOption = styled.div`
 text-overflow : ellipsis
  white-space: nowrap;
  overflow: hidden;
`;

const SearchInput = styled.input`
  width: 100%;
  padding: 8px;
  margin-bottom: 8px;
  border: 1px solid #e2e7f1;
  border-radius: 6px;
`;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  width: 100%;
  max-height: 200px;
  padding: 6px;
  border: 1px solid #e2e7f1;
  overflow-y: scroll;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin-web/src/component/Common/Dropdown/StyledDropdown.tsx
Content:

import styled from 'styled-components';

import { IoIosArrowDown } from 'react-icons/io';

interface DropdownProps {
  title: string | null;
  options: string[];
  selectedOption: string;
  isOpen: boolean;
  toggle: () => void;
  onSelectedOption: React.Dispatch<React.SetStateAction<string>>;
}

const StyledDropdown = ({
  title,
  options,
  selectedOption,
  isOpen,
  toggle,
  onSelectedOption,
}: DropdownProps) => {
  return (
    <Selectbox onClick={toggle}>
      <SelectedOption>{selectedOption || title}</SelectedOption>
      <ArrowIconWrap isDropdownOpen={isOpen}>
        <ArrowIcon />
      </ArrowIconWrap>
      {isOpen && (
        <Options>
          {options.map((option, index) => (
            <Option
              key={index}
              onClick={(e) => {
                e.stopPropagation();
                toggle();

                onSelectedOption(option);
              }}
            >
              {option}
            </Option>
          ))}
        </Options>
      )}
    </Selectbox>
  );
};

export default StyledDropdown;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  
  height: 37px;
  padding: 0 12px 0 16px;
  margin-bottom: 16px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 10px;
`;

const SelectedOption = styled.div`
  margin-right: 6px;
`;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  width: 100%;
  max-height: 200px;
  padding: 6px;
  border: 1px solid #e2e7f1;
  overflow-y: scroll;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin-web/src/component/Common/Dropdown/Dropdown.tsx
Content:

import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';


import { IoIosArrowDown } from 'react-icons/io';

interface DropdownProps {
  name: string;
  title: string | null;
  options: string[];
  selectedOption: string;
  isOpen: boolean;
  toggle: () => void;
  onSelectedOption: React.Dispatch<React.SetStateAction<string>>;
}

const Dropdown = ({
  name,
  title,
  options,
  selectedOption,
  isOpen,
  toggle,
  onSelectedOption,
}: DropdownProps) => {
  const router = useRouter();

  const handleChangeOption = useCallback(
    (name: string, option: string) => {
      onSelectedOption(option);

      router.push({
        pathname: router.pathname,
        query: {
          ...router.query,
          [name]: option,
        },
      });
    },
    [router]
  );

  return (
    <Selectbox onClick={toggle}>
      <SelectedOption>{selectedOption || title}</SelectedOption>
      <ArrowIconWrap isDropdownOpen={isOpen}>
        <ArrowIcon />
      </ArrowIconWrap>
      {isOpen && (
        <Options>
          {options.map((option, index) => (
            <Option
              key={index}
              onClick={(e) => {
                e.stopPropagation();
                toggle();
                handleChangeOption(name, option);
              }}
            >
              {option}
            </Option>
          ))}
        </Options>
      )}
    </Selectbox>
  );
};

export default Dropdown;

const Selectbox = styled.div`
  background-color: #fff;
  position: relative;
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-width: 126px;
  height: 37px;
  padding: 0 12px 0 16px;
  margin-right: 4px;
  border: 1px solid #e2e7f1;
  white-space: nowrap;
  cursor: pointer;
  border-radius: 10px;
`;

const SelectedOption = styled.div``;

const Options = styled.ul`
  background-color: #fff;
  position: absolute;
  top: calc(100% + 5px);
  left: 0;
  width: 102%;
  padding: 6px;
  border: 1px solid #e2e7f1;
  z-index: 100;
`;

const Option = styled.li`
  padding: 6px 12px 6px 6px;
  cursor: pointer;

  &:hover {
    background-color: #eee;
  }
`;

const ArrowIconWrap = styled.div<{ isDropdownOpen: boolean }>`
  display: flex;
  align-items: center;
  transform: ${(props) =>
    props.isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)'};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin-web/src/component/Common/Card.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

type CardProps = {
  children: React.ReactNode;
};
const Card: NextPage<CardProps> = ({ children }: CardProps) => {
  return <CardBase>{children}</CardBase>;
};

export default Card;

const CardBase = styled.div`
  position: relative;
  background-color: #fff;
  width: 100%;
  height: 100%;
  padding: 16px;
  border-radius: 10px;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
  overflow-y: scroll;
`;

File: ./quality-admin-web/src/component/Common/Buttons/ApplyBtn.tsx
Content:
import styled from 'styled-components';

type ApplyBtnProps = {
  children: React.ReactNode;
  onClick: () => void;
};

const ApplyBtn = (props: ApplyBtnProps) => {
  const { children, onClick } = props;

  return <ApplyButton onClick={onClick}>{children}</ApplyButton>;
};

export default ApplyBtn;

const ApplyButton = styled.button`
  background-color: ${(props) => props.theme.primary_01};
  padding: 13px 18px;
  border-radius: 6px;
  color: #fff;
  box-shadow: 0 3px 16px rgba(142, 134, 171, 0.05);
  margin-right: 8px;
  &:hover {
    background-color: ${(props) => props.theme.primary_02};
  }
  &:last-child {
    margin-right: 0;
  }
`;

File: ./quality-admin-web/src/component/Common/Buttons/RefreshBtn.tsx
Content:
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

import { IoCloseCircle } from 'react-icons/io5';

const RefreshBtn = () => {
  const router = useRouter();

  const handleClose = useCallback(() => {
    const urlWithoutQuery = window.location.origin + window.location.pathname;

    window.location.href = urlWithoutQuery;
  }, [router]);

  return (
    <RefreshButton onClick={handleClose}>
      <RefreshIcon />
    </RefreshButton>
  );
};

export default RefreshBtn;

const RefreshButton = styled.button`
  height: 100%;
  display: flex;
  align-items: center;
`;

const RefreshIcon = styled(IoCloseCircle)`
  font-size: 18px;
  color: #757575;
`;

File: ./quality-admin-web/src/component/Common/TableComponent.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';


import {
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Checkbox,
} from '@mui/material';

const TableComponent: NextPage = () => {
  return (
    <TableBase>
      <StyledTableContainer>
        <Table size="small">
          <TableHead>
            <TableRow>
              <TableCell padding="checkbox">
                <Checkbox color="primary" />
              </TableCell>
              <StyledTableCellHead>이름</StyledTableCellHead>
              <StyledTableCellHead>담당직무</StyledTableCellHead>
              <StyledTableCellHead>이메일주소</StyledTableCellHead>
              <StyledTableCellHead>연락처</StyledTableCellHead>
              <StyledTableCellHead>상세보기</StyledTableCellHead>
            </TableRow>
          </TableHead>
          <TableBody>
            <StyledTableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>관리자</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </StyledTableRow>
            <TableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>데이터관리</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </TableRow>
            <StyledTableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>관리자</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </StyledTableRow>
            <TableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>데이터관리</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </TableRow>
            <StyledTableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>관리자</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </StyledTableRow>
            <TableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>데이터관리</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </TableRow>
            <StyledTableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>관리자</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </StyledTableRow>
            <TableRow>
              <StyledTableCell padding="checkbox">
                <Checkbox color="primary" />
              </StyledTableCell>
              <StyledTableCell>홍길동</StyledTableCell>
              <StyledTableCell>데이터관리</StyledTableCell>
              <StyledTableCell>id@email.com</StyledTableCell>
              <StyledTableCell>010-1234-5678</StyledTableCell>
              <StyledTableCell>
                <DetailBtn>상세보기</DetailBtn>
              </StyledTableCell>
            </TableRow>
          </TableBody>
        </Table>
      </StyledTableContainer>
    </TableBase>
  );
};

export default TableComponent;

const TableBase = styled.div`
  margin: 8px 0;
  min-height: calc(var(--vh, 1vh) * 100 - 300px);
`;

const StyledTableContainer = styled(TableContainer)`
  border-top: 1px solid ${(props) => props.theme.table_line02};
`;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 45px;
    border-bottom: 1px solid #e2e7f1;
    font-weight: 500;
    text-align: center;
    letter-spacing: -0.5px;
    color: ${(props) => props.theme.gray_07};
  }
`;

const StyledTableRow = styled(TableRow)`
  background-color: rgba(168, 181, 209, 0.05);
  &:hover {
    
    
  }
`;

const StyledTableCell = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 55px;
    text-align: center;
    border-bottom: 1px dashed #e2e7f1;
  }
`;

const DetailBtn = styled.button`
  background-color: rgba(34, 197, 94, 0.1);
  color: ${(props) => props.theme.primary_01};
  padding: 12px 16px;
  border-radius: 6px;
`;

File: ./quality-admin-web/src/component/Common/Calendar.tsx
Content:
import React, { useState, forwardRef } from 'react';
import styled from 'styled-components';
import dayjs from 'dayjs';

import ReactDatePicker from 'react-datepicker';
import { ko } from 'date-fns/locale/ko';
import 'react-datepicker/dist/react-datepicker.css';

import { IoIosArrowDown } from 'react-icons/io';
import { FaRegCalendarAlt } from 'react-icons/fa';


type ButtonProps = React.HTMLProps<HTMLButtonElement>;

const CustomInput = forwardRef<HTMLButtonElement, ButtonProps>(
  function CustomInput({ value, onClick }, ref) {
    return (
      <button className="example-custom-input" onClick={onClick} ref={ref}>
        {value}
      </button>
    );
  }
);

interface CalendarProps {
  selectedDate: Date;
  setSelectedDate: React.Dispatch<React.SetStateAction<Date>>;
}

const SearchCalendar = ({ selectedDate, setSelectedDate }: CalendarProps) => {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <CalendarContainer>
      <CalendarBox>
        <CalendarIcon>
          <Icon />
        </CalendarIcon>
        <ReactDatePicker
          dateFormat="yyyy-MM-dd"
          locale={ko} 
          selected={selectedDate}
          startDate={selectedDate}
          endDate={new Date()}
          maxDate={new Date()}
          customInput={<CustomInput />}
          onChange={(date: any) => {
            setSelectedDate(date);
          }}
          onCalendarOpen={() => setIsOpen(true)}
          onCalendarClose={() => setIsOpen(false)}
          disabledKeyboardNavigation
        />

        <ArrowIconWrap isOpen={isOpen}>
          <ArrowIcon />
        </ArrowIconWrap>
      </CalendarBox>
    </CalendarContainer>
  );
};

export default SearchCalendar;


const CalendarContainer = styled.div`
  display: flex;
  align-items: center;
  z-index: 500;
`;

const CalendarBox = styled.div`
  font-family: 'Noto Sans KR', sans-serif;
  background-color: #f4f6f9;
  
  height: 40px;
  display: flex;
  align-items: center;
  border-radius: 6px;
  margin-right: 10px;
  padding: 0 16px;

  .example-custom-input {
    font-family: 'Noto Sans KR', sans-serif;
    height: 40px;
    padding: 0 10px;
    color: ${(props) => props.theme.bluegray_06};
    border: none;
    letter-spacing: 0.5px;
    font-size: 16px;
    &:hover {
      color: ${(props) => props.theme.primary_dgray};
    }
  }
  .react-datepicker {
    font-family: 'Noto Sans KR', sans-serif;
    transform: translate(42px, 0px);
    will-change: transform;
    border: 1px solid #e0e1e4;
  }

  .react-datepicker-popper .react-datepicker__triangle {
    
    fill: #fff;
    color: transparent;
    stroke: #e0e1e4;
  }
  .react-datepicker__header {
    background: transparent;
    border: none;
  }
  .react-datepicker__navigation {
    .react-datepicker__navigation-icon {
      &::before {
        border-width: 2px 2px 0 0;
      }
    }
    &.react-datepicker__navigation--previous,
    &.react-datepicker__navigation--next {
      top: 8px;
    }
  }
  .react-datepicker__current-month {
    font-family: 'Noto Sans KR', sans-serif;
    font-size: 17px;
    padding: 5px 35px;
  }
  .react-datepicker__day-names {
    font-family: 'Noto Sans KR', sans-serif;

    display: flex;
    margin: 20px 0.4rem 0;
  }
  .react-datepicker__day-name {
    margin: 0 auto;
    color: #575757;
  }
  .react-datepicker__month {
    margin-top: -5px;
  }
  .react-datepicker__week {
    display: flex;
    margin: 3px 0;
    > .react-datepicker__day {
      font-family: 'Noto Sans KR', sans-serif;
    }
  }
  .react-datepicker__day {
    width: 33px;
    height: 33px;
    margin: 0 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .react-datepicker__day:hover {
    background-color: #cff4d5;
    border-radius: 50%;
    font-weight: 500;
  }
  .react-datepicker__day--in-range:hover {
    border-radius: 0;
  }
  .react-datepicker__day--disabled:hover {
    background: transparent;
  }
`;

const CalendarIcon = styled.div`
  height: 100%;
  display: flex;
  align-items: center;
  margin-right: 3px;
`;

const Icon = styled(FaRegCalendarAlt)`
  color: ${(props) => props.theme.primary_dgray};
  font-size: 18px;
`;
const ArrowIconWrap = styled.div<{ isOpen: boolean }>`
  display: flex;
  align-items: center;
  
  transform: ${(props) => (props.isOpen ? 'rotate(180deg)' : 'rotate(0deg)')};
`;

const ArrowIcon = styled(IoIosArrowDown)`
  font-size: 18px;
`;

File: ./quality-admin-web/src/component/Common/MobileModal.tsx
Content:
import { useEffect, useRef } from 'react';
import styled from 'styled-components';

type ModalProps = {
  children: React.ReactNode;
};

const MobileModal = ({ children }: ModalProps) => {
  return (
    <ModalBase>
      <ModalInner>{children}</ModalInner>
    </ModalBase>
  );
};

export default MobileModal;

const ModalBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 16px;
  z-index: 999;
`;

const ModalInner = styled.div`
  max-width: 720px;
  min-width: 280px;
  width: 100%;
  background: #fff;
  border-radius: 5px;
`;

File: ./quality-admin-web/src/component/Common/Table/CheckTable.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import { CheckTableProps } from '../../../../type/commonType';

import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Checkbox,
} from '@mui/material';

const CheckTable: NextPage<CheckTableProps> = (props) => {
  const { tableHeader, tableBody, selectAll, handleSelectAll } = props;

  return (
    <TableBase>
      <StyledTableContainer>
        <Table size="small">
          <TableHead>
            <TableRow>
              <StyledTableCellHead padding="checkbox">
                <Checkbox
                  color="success"
                  checked={selectAll}
                  onChange={handleSelectAll}
                />
              </StyledTableCellHead>
              {tableHeader.map((header, idx) => {
                return (
                  <StyledTableCellHead key={idx}>{header}</StyledTableCellHead>
                );
              })}
            </TableRow>
          </TableHead>
          {tableBody}
        </Table>
      </StyledTableContainer>
    </TableBase>
  );
};

export default CheckTable;

const TableBase = styled.div`
  margin: 8px 0;
  min-height: calc(var(--vh, 1vh) * 100 - 300px);
`;

const StyledTableContainer = styled(TableContainer)``;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    background-color: #f4f6f9;
    height: 45px;
    text-align: center;
    letter-spacing: -0.5px;
  }
`;

File: ./quality-admin-web/src/component/Common/Table/CommonTable.tsx
Content:
import { NextPage } from 'next';
import styled from 'styled-components';

import { TableProps } from '../../../../type/commonType';

import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';

const CommonTable: NextPage<TableProps> = (props) => {
  const { tableHeader, tableBody } = props;
  return (
    <TableBase>
      <StyledTableContainer>
        <Table size="small">
          <TableHead>
            <TableRow>
              {tableHeader.map((header, idx) => {
                return (
                  <StyledTableCellHead key={idx}>{header}</StyledTableCellHead>
                );
              })}
            </TableRow>
          </TableHead>
          {tableBody}
        </Table>
      </StyledTableContainer>
    </TableBase>
  );
};

export default CommonTable;

const TableBase = styled.div`
  margin: 8px 0;
  padding: 0 0 16px;
  min-height: calc(var(--vh, 1vh) * 100 - 300px);
`;

const StyledTableContainer = styled(TableContainer)`
  border-top: 1px solid ${(props) => props.theme.table_line02};
`;

const StyledTableCellHead = styled(TableCell)`
  && {
    font-family: 'Noto Sans KR', sans-serif;
    height: 45px;
    border-bottom: 1px solid #e2e7f1;
    font-weight: 500;
    text-align: center;
    letter-spacing: -0.5px;
    color: ${(props) => props.theme.gray_07};
  }
`;

File: ./quality-admin-web/src/component/Common/Loading.tsx
Content:
import styled from 'styled-components';

const Loading = () => {
  return (
    <LoadingBase>
      <LoadingInner>
        <Spinner src="/images/spinner1.gif" alt="로딩화면" />
      </LoadingInner>
    </LoadingBase>
  );
};

export default Loading;

const LoadingBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
`;

const LoadingInner = styled.div`
  width: 100%;
  max-width: 720px;
  height: calc(var(--vh, 1vh) * 100);
  display: flex;
  align-items: center;
  justify-content: center;
`;

const Spinner = styled.img``;

File: ./quality-admin-web/src/component/Common/Modal.tsx
Content:
import { useEffect, useRef } from 'react';
import styled from 'styled-components';

type ModalProps = {
  children: React.ReactNode;
};

const Modal = ({ children }: ModalProps) => {
  return (
    <ModalBase>
      <ModalInner>{children}</ModalInner>
    </ModalBase>
  );
};

export default Modal;

const ModalBase = styled.div`
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
`;

const ModalInner = styled.div`
  background: #fff;
  border-radius: 5px;
`;

File: ./quality-admin-web/src/component/Common/Toast.tsx
Content:
import { useEffect, useState } from 'react';
import styled, { keyframes } from 'styled-components';


import { VscChromeClose } from 'react-icons/vsc';

type ToastProps = {
  children: React.ReactNode;
  setOpenToast: React.Dispatch<React.SetStateAction<boolean>>;
};

const Toast = ({ children, setOpenToast }: ToastProps) => {
  useEffect(() => {
    
    const timer = setTimeout(() => {
      setOpenToast(false);
    }, 1500);

    return () => {
      clearTimeout(timer);
    };
  }, []);

  return (
    <ToastBase
      onClick={() => {
        setOpenToast(false);
      }}
    >
      <ToastBox>
        <ToastClose>
          <CloseIcon />
        </ToastClose>
        {children}
      </ToastBox>
    </ToastBase>
  );
};

export default Toast;

const slideIn = keyframes`
from {
  transform: translateY(0%);
}
to {
  transform: translateY(-40%);
}
`;

const ToastBase = styled.div`
  position: absolute;
  left: 0;
  bottom: 20px;
  width: 100%;
  padding: 0 8px;
  animation: ${slideIn} 300ms ease-in-out 0s 1 normal forwards;
  cursor: pointer;
`;

const ToastBox = styled.div`
  background-color: #fdecee;
  
  
  
  display: flex;
  align-items: center;
  padding: 18px 12px;
  margin: 0 auto;
  color: #fff;
  border-radius: 7px;
  box-shadow: 0 0.3rem 0.7rem rgb(0 0 0 / 8%);
`;

const ToastClose = styled.div`
  background-color: #ef4d56;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  margin-right: 18px;
`;

const CloseIcon = styled(VscChromeClose)`
  font-size: 10px;
`;

File: ./quality-admin-web/src/component/Common/SelectCategory.tsx
Content:
import { NextPage } from 'next';
import { useRouter } from 'next/router';
import { useCallback } from 'react';
import styled from 'styled-components';

const SelectCategory: NextPage = () => {
  const router = useRouter();
  
  const handleQuery = useCallback(
    (target: string) => {
      router.push({
        pathname: router.route,
        query: {
          fst: target,
        },
      });
    },
    [router.query]
  );

  return (
    <CategoryBox>
      <CategoryMenu>
        <CategoryItem
          isQuery={
            router.query.fst === undefined || router.query.fst === '식품'
          }
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          식품
        </CategoryItem>
        <CategoryItem
          isQuery={router.query.fst === '축산물'}
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          축산물
        </CategoryItem>
        <CategoryItem
          isQuery={router.query.fst === '기구 및 용기'}
          onClick={(e: React.MouseEvent<HTMLLIElement>) => {
            const target = e.target as HTMLLIElement;
            handleQuery(target.innerHTML);
          }}
        >
          기구 및 용기
        </CategoryItem>
      </CategoryMenu>
    </CategoryBox>
  );
};

export default SelectCategory;

const CategoryBox = styled.div`
  margin-top: 16px;
`;

const CategoryMenu = styled.ul`
  display: flex;
`;

const CategoryItem = styled.li<{ isQuery: boolean }>`
  padding: 8px 36px;
  color: ${(props) => (props.isQuery ? '#22c55e' : '#555b7e')};
  border-bottom: ${(props) =>
    props.isQuery ? ' 1.5px solid #22c55e' : ' 1px solid #c1cde0'};
  font-weight: ${(props) => (props.isQuery ? '600' : '400')};
  font-size: 16px;
  cursor: pointer;
`;

File: ./quality-admin-web/src/utils/handleSearch.ts
Content:
import { Router, useRouter } from 'next/router';
import { useCallback } from 'react';

const handleSearch = () => {
  const router = useRouter();

  const handleMoveRoute = useCallback(
    (key: string, value: string | undefined) => {
      router.push({
        pathname: router.pathname,
        query: {
          ...router.query, 
          [key]: value,
        },
      });
    },
    [router]
  );

  return { handleMoveRoute };
};

export default handleSearch;

File: ./quality-admin-web/src/styles/globalstyles.ts
Content:
import { createGlobalStyle } from 'styled-components';
import Reset from 'styled-reset';

const GlobalStyles = createGlobalStyle`
${Reset}

  @font-face {
    font-family: 'Noto Sans KR', sans-serif;
    src: 
    url('https:
    font-style: normal;
  }

:root {
}

* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  line-height: inherit;
}

body {
  font-family: 'Noto Sans KR', sans-serif;
  font-weight: 400;
  font-size: 15px;
  height: calc(var(--vh, 1vh) * 100);
  color: ${(props) => props.theme.font_color};
  box-sizing: border-box;
  ::-webkit-scrollbar {
    display: none;
  }
}
a {
  text-decoration: none;
  color: inherit;
}
button {
  font-family: 'Noto Sans KR', sans-serif;
  background: transparent;
  font-weight: 400;
  font-size: 14px;
  color: ${(props) => props.theme.font_color};
  border: 0 none;
  outline:none;
  cursor: pointer;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
}
ol, ul, li {
  list-style: none;
}
select, option {
  background: transparent;
  font-family: 'Noto Sans KR', sans-serif;
  font-size: 14px;
  
  
  
  color: ${(props) => props.theme.font_color};
}
a, button, input {
  font-family: 'Noto Sans KR', sans-serif;
  appearance: none;
  -webkit-appearance: none;
  -webkit-border-radius: 0;
  -webkit-tap-highlight-color: transparent;
  outline:none;
}

`;

export default GlobalStyles;

File: ./quality-admin-web/src/styles/theme.ts
Content:
const theme = {
  
  primary_01: '#22c55e',
  primary_02: '#20bb59', 

  
  gray_01: '#f4f6f9',
  gray_02: '#eaeff5',
  gray_03: '#d9e1ec',
  gray_04: '#c1cde0',
  gray_05: '#a8b5d1',
  gray_06: '#95a0c5',
  gray_07: '#656D9A',
  gray_08: '#555b7e',
  gray_09: '#2b2d3b',
  
  table_line01: '#d4d9e1',
  table_line02: '#dfe3e9',
  table_line03: '#E2E7F1',
  table_line04: '#f5f5f5',
  table_bg01: '#effcf3', 
  table_bg02: '#fcfcfc', 

  
  ui_red01: '#FF8F8F',
  ui_red02: '#ee4d5a',
  ui_red03: '#f65745',

  font_color: '#2b2d3b',
};

export default theme;

File: ./quality-admin-web/src/hooks/useCheckbox.ts
Content:
import { useState, useEffect } from 'react';

const useCheckbox = (datas: { id: number }[]) => {
  const [checkedItems, setCheckedItems] = useState<{ [key: number]: boolean }>(
    {}
  );
  const [selectAll, setSelectAll] = useState<boolean>(false);

  
  const handleChangeItem =
    (id: number) => (e: React.ChangeEvent<HTMLInputElement>) => {
      setCheckedItems((prevState) => ({
        ...prevState,
        [id]: e.target.checked,
      }));
    };

  
  const handleSelectAll = (e: React.ChangeEvent<HTMLInputElement>) => {
    const isChecked = e.target.checked;
    setSelectAll(isChecked);

    const updatedCheckedItems = datas.reduce(
      (acc, data) => {
        acc[data.id] = isChecked;
        return acc;
      },
      {} as { [key: number]: boolean }
    );

    setCheckedItems(updatedCheckedItems);
  };

  
  useEffect(() => {
    const initialCheckedItems = datas.reduce(
      (acc, data) => {
        acc[data.id] = false;
        return acc;
      },
      {} as { [key: number]: boolean }
    );
    setCheckedItems(initialCheckedItems);
    setSelectAll(false); 
  }, [datas]); 

  return {
    checkedItems,
    selectAll,
    handleChangeItem,
    handleSelectAll,
  };
};

export default useCheckbox;

File: ./quality-admin-web/src/pages/index.tsx
Content:
import { NextPage } from 'next';

const Home: NextPage = () => {
  return <div></div>;
};

export default Home;

File: ./quality-admin-web/src/pages/webapp/application.tsx
Content:
import { NextPage } from 'next';

import Application from '@/component/webapp/Application/Application';

const application: NextPage = () => {
  return <Application />;
};

export default application;

File: ./quality-admin-web/src/pages/webapp/info.tsx
Content:
import { NextPage } from 'next';
import Info from '@/component/webapp/Application/Info';

const info: NextPage = () => {
  return <Info />;
};

export default info;

File: ./quality-admin-web/src/pages/webapp/institute.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import { InstituteProps } from '../../../type/instituteType';

import Institute from '@/component/webapp/Institute/Institute';

const institute: NextPage<InstituteProps> = ({ instituteData }) => {
  return <Institute instituteData={instituteData} />;
};

export default institute;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const queryParams = ['fst', 'nameCheck', 'regionValue'];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/institute`,
    {
      params,
    }
  );

  const instituteData = res.data;
  return {
    props: { instituteData },
  };
};

File: ./quality-admin-web/src/pages/webapp/result.tsx
Content:
import { NextPage } from 'next';
import ResultComponent from '../../component/webapp/ResultComponent';

const result: NextPage = () => {
  return <ResultComponent />;
};

export default result;

File: ./quality-admin-web/src/pages/webapp/appform.tsx
Content:
import { NextPage } from 'next';

import AppForm from '@/component/webapp/Application/AppForm';

const appform: NextPage = () => {
  return <AppForm />;
};

export default appform;

File: ./quality-admin-web/src/pages/webapp/fee.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import Fee from '@/component/webapp/Fee/Fee';

import { FeeProps } from '../../../type/feeType';

const fee: NextPage<FeeProps> = ({ feeData }) => {
  return <Fee feeData={feeData} />;
};

export default fee;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const queryParams = [
    'fst',
    'productName',
    'nameCheck',
    'feeValue',
    'page',
    'pageSize',
  ];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/fee`,
    {
      params,
    }
  );

  const feeData = res.data;

  return {
    props: { feeData },
  };
};

File: ./quality-admin-web/src/pages/webapp/submit.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import SubmitForm from '../../component/webapp/Application/SubmitForm';
import { FrequencyProps } from '../../../type/frequencyType';

const submit: NextPage<FrequencyProps> = ({ frequencyData }) => {
  return <SubmitForm frequencyData={frequencyData} />;
};

export default submit;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const queryParams = ['productName'];

  const params = queryParams.reduce(
    (acc, key) => {
      const value = context.query[key];

      if (value) {
        acc[key] = Array.isArray(value) ? value : (value as string);
      }

      return acc;
    },
    {} as { [key: string]: string | string[] }
  );

  try {
    const res = await axios.get(
      `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/frequency`,
      {
        params,
      }
    );

    const frequencyData = res.data;

    return {
      props: { frequencyData },
    };
  } catch (error) {
    console.error('Failed to fetch frequency data:', error);

    return {
      props: { frequencyData: [] },
    };
  }
};

File: ./quality-admin-web/src/pages/webapp/select.tsx
Content:
import { GetServerSideProps, GetServerSidePropsContext, NextPage } from 'next';
import axios from 'axios';

import SelectForm from '@/component/webapp/Application/SelectForm';

import { FeeProps } from '../../../type/feeType';

const select: NextPage<FeeProps> = ({ feeData }) => {
  return <SelectForm feeData={feeData} />;
};

export default select;


export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext
) => {
  const queryParams = [
    'fst',
    'productName',
    'nameCheck',
    'feeValue',
    'page',
    'pageSize',
  ];

  const params = queryParams.reduce(
    (acc, key) => {
      
      if (context.query[key]) {
        acc[key] = context.query[key] as string;
      }
      return acc;
    },
    {} as { [key: string]: string }
  );

  const res = await axios.get(
    `${process.env.NEXT_PUBLIC_APP_API_KEY}/webapp/fee`,
    {
      params,
    }
  );

  const feeData = res.data;

  return {
    props: { feeData },
  };
};

File: ./quality-admin-web/src/pages/webapp/form.tsx
Content:
import { NextPage } from 'next';

import Form from '@/component/webapp/Application/Form';
const form: NextPage = () => {
  return <Form />;
};

export default form;

File: ./quality-admin-web/src/pages/ocr/photo.tsx
Content:
import { NextPage } from 'next';
import InputPhoto from '@/component/webapp/OCR/InputPhoto';

const photo: NextPage = () => {
  return <InputPhoto />;
};

export default photo;

File: ./quality-admin-web/src/pages/ocr/shoot.tsx
Content:
import { NextPage } from 'next';
import ShootingPhoto from '@/component/webapp/OCR/ShootingPhoto';

const shoot: NextPage = () => {
  return <ShootingPhoto />;
};

export default shoot;

File: ./quality-admin-web/src/pages/_document.tsx
Content:
import Document, {
  Html,
  Head,
  Main,
  NextScript,
  DocumentContext,
} from 'next/document';
import { ServerStyleSheet } from 'styled-components';

class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;
    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App) => (props) =>
            sheet.collectStyles(<App {...props} />),
        });

      const initialProps = await Document.getInitialProps(ctx);
      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }

  render() {
    return (
      <Html lang="ko">
        <Head>
          <meta charSet="utf-8" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;

File: ./quality-admin-web/src/pages/_app.tsx
Content:

import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import wrapper from '../redux/store';

import dayjs from 'dayjs';
import 'dayjs/locale/ko';
dayjs.locale('ko');


import { ThemeProvider } from 'styled-components';
import GlobalStyles from '../styles/globalstyles';
import theme from '../styles/theme';

import type { AppProps } from 'next/app';
import { NextPage } from 'next';


import Layout from '../component/Layout/Layout';
import { useEffect } from 'react';

const App: NextPage<AppProps> = ({
  Component,
  pageProps,
  ...rest
}: AppProps) => {
  const { store } = wrapper.useWrappedStore(rest);

  const setScreenSize = () => {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
  };

  useEffect(() => {
    setScreenSize();

    window.addEventListener('resize', setScreenSize);

    return () => {
      window.removeEventListener('resize', setScreenSize);
    };
  }, []);

  return (
    <Provider store={store}>
      {store.__persistor && (
        <PersistGate loading={null} persistor={store.__persistor}>
          <ThemeProvider theme={theme}>
            <GlobalStyles />
            <Layout>
              <Component {...pageProps} />
            </Layout>
          </ThemeProvider>
        </PersistGate>
      )}
    </Provider>
  );
};

export default wrapper.withRedux(App);

File: ./quality-admin-web/src/redux/modules/common.ts
Content:
import { AnyAction } from 'redux';


const SET_COMMON_STATE = 'common/SET_COMMON_STATE';
const SET_OPTIONS = 'common/SET_OPTIONS';



export const setCommonState = (payload: Partial<CommonState>) => ({
  type: SET_COMMON_STATE,
  payload,
});

export const setOptions = (options: string[]) => ({
  type: SET_OPTIONS,
  setOptions: options,
});


export interface CommonState {
  companyName: string;
  businessNo: string;
  repName: string;
  businessType: string;
  phoneNo: string;
  setOptions: string[];
}

const initialState = {
  companyName: '',
  businessNo: '',
  repName: '',
  businessType: '',
  phoneNo: '',
  setOptions: [],
};


export default function common(state = initialState, action: AnyAction) {
  switch (action.type) {
    case SET_COMMON_STATE:
      return {
        ...state,
        ...action.payload,
      };
    case SET_OPTIONS:
      return { ...state, setOptions: action.setOptions };
    default:
      return state;
  }
}

File: ./quality-admin-web/src/redux/modules/rootSaga.ts
Content:
import { all } from 'redux-saga/effects';

export default function* rootSaga() {
  yield all([]);
}

File: ./quality-admin-web/src/redux/modules/reducer.ts
Content:
import { HYDRATE } from 'next-redux-wrapper';
import { combineReducers } from 'redux';

import common from './common';

const rootReducer = (state: any, action: any) => {
  switch (action.type) {
    
    case HYDRATE:
      return action.payload;
    default: {
      const combinedReducer = combineReducers({
        common,
      });
      return combinedReducer(state, action);
    }
  }
};

export type RootState = ReturnType<typeof rootReducer>;
export default rootReducer;

File: ./quality-admin-web/src/redux/store.ts
Content:
import {
  applyMiddleware,
  compose,
  legacy_createStore as createStore,
} from 'redux';
import createSagaMiddleware from 'redux-saga';
import { createWrapper } from 'next-redux-wrapper';
import { composeWithDevTools } from 'redux-devtools-extension';
import { persistStore, persistReducer } from 'redux-persist';
import sessionStorage from 'redux-persist/lib/storage/session';


import rootReducer from './modules/reducer';
import rootSaga from './modules/rootSaga';


const persistConfig = {
  key: 'root', 
  storage: sessionStorage, 
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

const configureStore = () => {
  const sagaMiddleware = createSagaMiddleware();
  const middlewares = [sagaMiddleware];
  const enhancer =
    process.env.NODE_ENV === 'production'
      ? compose(applyMiddleware(...middlewares))
      : composeWithDevTools(applyMiddleware(...middlewares));
  const store = createStore(persistedReducer, enhancer);

  
  store.sagaTask = sagaMiddleware.run(rootSaga);
  store.__persistor = persistStore(store);
  return store;
};

const wrapper = createWrapper(configureStore, {
  debug: process.env.NODE_ENV === 'development',
});

export default wrapper;

File: ./quality-chatbot/config/db.js
Content:
const mysql = require('mysql2');

const db_info = {
  host: '13.209.138.233',
  port: '3306',
  user: 'root',
  password: 'chatbot',
  database: 'qcbot'
};

module.exports = {
  init() {
    return mysql.createConnection(db_info);
  },
  connect(conn) {
    conn.connect(function (err) {
      if (err) console.error(`mysql connection error : ${err}`);
      else console.log('mysql is connected successfully!');
    });
  }
};
File: ./quality-chatbot/routes/chatbot/information/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          carousel: {
            type: 'basicCard',
            items: [
              {
                description: "자가품질검사 수수료 및 위탁 검사기관 안내, 검사시기를 알려드리는 알림톡과 검사 절차 안내, 자주 묻는 질문의 궁금증을 해결해 드려요",
                thumbnail: {
                  imageUrl: 'https:
                }
              },
              {
                description: "'검사 알림', '검사 절차', '수수료'처럼 간단 명료하게 질문해주세요",
                thumbnail: {
                  imageUrl: 'https:
                }
              },
              {
                description: "'메뉴', '처음으로'라고 입력하시면 첫 화면으로 이동하여 챗봇 메뉴를 이용하실 수 있습니다",
                thumbnail: {
                  imageUrl: 'https:
                }
              },
              {
                description: "개인정보(성함/연락처/주민번호 등)나 이미지/동영상은 입력하지 말아주세요. 챗봇에서는 확인이 어렵습니다",
                thumbnail: {
                  imageUrl: 'https:
                }
              },
            ]
          }
        }
      ]
    }
  });
});


router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'information unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/fee/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          basicCard: {
            title: '',
            description:
              `\n안녕하세요! 자가품질검사 수수료를 계산해 드립니다. 아래 링크를 통해 필요한 수수료를 확인해 보세요. 
              \n\n수수료는 식약처 기준에 따라 산정되며, 재료비나 장비 구매 비용 차이로 인해 수수료가 달라질 수 있습니다.`,
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'webLink',
                label: '👉 수수료 계산하기',
                webLinkUrl: 'http:
              }
            ]
          }
        }
      ],
      quickReplies: [
        {
          action: 'block',
          label: '챗봇 도움말',
          blockId: '66d55c20dee2735433531035',
        },
      ]
    }
  });
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'fee unknown uri ${req.path}' });
});

module.exports = router;
File: ./quality-chatbot/routes/chatbot/notification/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          basicCard: {
            title: '',
            description:
              `\n알림톡 신청을 해주셔서 감사합니다!
              \n\n자가품질검사 알림톡 서비스를 시작하기 전에 업종과 취급 품목에 대한 정보가 필요합니다.
              \n\n아래 링크에서 사업자 등록증을 첨부하시거나 정보를 직접 입력하는 방법 중에서 선택해주세요. 
              `,
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'webLink',
                label: '👉 알림톡 신청하기',
                webLinkUrl: 'http:
              }
            ]
          }
        }
      ]
    }
  });
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;
File: ./quality-chatbot/routes/chatbot/faq/answer/index.js
Content:
const router = require('express').Router();
const db = require('../../../../config/db');
const conn = db.init();


router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;

  sql = `SELECT answer FROM qcbot.tbl_faq WHERE id = ?;`
  conn.query(sql,[item.id], (err, row) => {
    if(err) throw err;

    return res.send({
      version: '2.0',
      template: {
        outputs: [
          {
            simpleText: {
              text: row[0].answer
            }
          },
          {
            basicCard: {
              description: '도움이 되셨나요?',
              buttons: [
                {
                  action: 'block',
                  label: '예',
                  blockId: '66b5751827bc5c0c5f6d66ad'
                },
                {
                  action: 'block',
                  label: '아니오',
                  blockId: '66b5751827bc5c0c5f6d66ad'
                }
              ]
            }
          }
        ],
      }
    });
  })
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;
File: ./quality-chatbot/routes/chatbot/faq/enter/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          basicCard: {
            title: '자주 묻는 질문',
            description:
              '아래 버튼을 누르고 무엇이든 물어보세요',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'block',
                label: '질문하기',
                blockId: '66c05541e2ce1251f181e7ea'
              }
            ]
          }
        }
      ]
    }
  });
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;
File: ./quality-chatbot/routes/chatbot/faq/question/index.js
Content:
const router = require('express').Router();
const db = require('../../../../config/db');
const conn = db.init();


const generateFaqResponse = (item, callback) => {
  const sql = `SELECT question, id FROM qcbot.tbl_faq WHERE ? LIKE CONCAT('%', keyword, '%');`;

  conn.query(sql, [item], (err, rows) => {
    if (err) return callback(err);

    const carouselItems = rows.map(data => ({
      description: data.question,
      buttons: [
        {
          action: 'block',
          label: '답변보기',
          blockId: '66c062d6323697599a6edba4',
          extra: {
            id: data.id
          }
        },
      ]
    }));

    const outputArray = [
      {
        simpleImage: {
          imageUrl: 'https:
          altText: '아래 추천 질문을 보시고 해당되는 내용의 답변보기 버튼을 클릭해 주세요'
        }
      },
      {
        carousel: {
          type: 'basicCard',
          items: carouselItems
        }
      }
    ];

    callback(null, outputArray);
  });
};


router.post('/', (req, res) => {
  const item = req.body.action.detailParams.sys_text.value;

  generateFaqResponse(item, (err, outputArray) => {
    if (err) {
      return res.status(500).send({ success: false, msg: 'Internal Server Error' });
    }

    return res.send({
      version: '2.0',
      template: {
        outputs: outputArray,
      }
    });
  });
});


router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: `unknown uri ${req.path}` });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/institute/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          basicCard: {
            title: '',
            description:
              '\n자가품질검사 검사 기관을 안내해 드리겠습니다.\n\n아래 버튼을 클릭해주세요',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'webLink',
                label: '👉 시험 검사기관 조회',
                webLinkUrl: 'http:
              }
            ]
          }
        }
      ],
      quickReplies: [
        {
          action: 'block',
          label: '챗봇 도움말',
          blockId: '66d55c20dee2735433531035',
        },
      ]
    }
  });
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'institute unknown uri ${req.path}' });
});

module.exports = router;
File: ./quality-chatbot/routes/chatbot/livestock/result/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  let outputArray = null;

  if(item.labelNo === '1번') {
    if(item.fst && item.scd) {
      outputArray = [
        {
          basicCard: {
            description: '안정관리인증작업장 총점 95%이상이셔서 결과가 나온 날로부터 1년간 자가품질검사 면제 대상입니다. 최소 6개 이상, 그 중 생산량이 많은 상위 3개를 포함해서 검사를 진행해주세요.',
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    } else if(!item.fst && item.scd) {
      outputArray = [
        {
          basicCard: {
            description: '최소 6개 이상, 그 중 생산량이 많은 상위 3개를 포함해서 검사를 진행해주세요.',
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    } else if(!item.fst && !item.scd) {
      outputArray = [
        {
          basicCard: {
            description: '전체 품목의 절반 이상을 검사하셔야 합니다.\n소수점은 반올림 한 값입니다.\n\n예를 들어 동일 유형의 품목이 7개라면 4개의 검사를 받으셔야 해요',
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    } else {
      outputArray = [
        {
          basicCard: {
            description: '',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    }
  } else {
    if(item.exclusion) {
      outputArray = [
        {
          basicCard: {
            description: '안정관리인증작업장 총점 95%이상이셔서 결과가 나온 날로부터 1년간 자가품질검사 면제 대상입니다.',
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    } else {
      outputArray = [
        {
          basicCard: {
            description: '',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    }
  }

  return res.send({
    version: '2.0',
    template: {
      outputs: outputArray
    }
  });
  
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/livestock/fstcheck/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          simpleText: {
            text: `축산물 가공업을(를) 선택하셨군요!\n\n아래 질문들에 '예' 또는 '아니오'로 답변해주세요.📝`
          }
        },
        {
          textCard: {
            description: '최근 1년 이내 안정관리인증작업장에 대한 조사.평가 결과 총점 95% 이상인가요?',
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66bc64027712c0500c59e39a',
                extra: {
                  labelNo: '1번',
                  fst: true
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66bc64027712c0500c59e39a',
                extra: {
                  labelNo: '1번',
                  fst: false
                }
              }
            ]
          }
        }
      ]
    }
  });
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/livestock/enter/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          basicCard: {
            title: '세부 업종 선택',
            description:
              '축산물업에 해당되는 세부업종을 선택해주세요.',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'block',
                label: '1번',
                blockId: '66bc63dbd7822a7a6e895419',
                extra: {
                  label: '축산물 가공업자',
                  labelNo: '1번'
                }
              },
              {
                action: 'block',
                label: '2번',
                blockId: '66ba21473c742d06794fd697',
                extra: {
                  label: '식육포장처리업 또는 식육즉석판매가공업',
                  labelNo: '2번'
                }
              },
              {
                action: 'block',
                label: '3번',
                blockId: '66ba21473c742d06794fd697',
                extra: {
                  label: '식용란수집판매업',
                  labelNo: '3번'
                }
              }
            ]
          }
        }
      ],
      quickReplies: [
        {
          action: 'block',
          label: '여기에 없어요',
          blockId: '66c3523f2653da5a9b433279'
        }
      ]
    }
  });
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;
File: ./quality-chatbot/routes/chatbot/livestock/scdcheck/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;

  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          textCard: {
            description: '전년도에 생산된 동일 유형의 품목의 수량이 12개가 넘나요?\n\n동일 유형 품목은 예를 들어 햄류, 소시지류, 베이커류는 모두 동일 유형의 품목입니다.',
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66bc642cdfbbde443b7ce810',
                extra: {
                  ...item,
                  scd: true
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66bc642cdfbbde443b7ce810',
                extra: {
                  ...item,
                  scd: false
                }
              }
            ]
          }
        }
      ]
    }
  });
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/livestock/exclusion/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          simpleText: {
            text: `${item.label}을(를) 선택하셨군요!\n\n아래 질문들에 '예' 또는 '아니오'로 답변해주세요.📝`
          }
        },
        {
          textCard: {
            description: `최근 1년 이내 안정관리인증작업장에 대한 조사.평가 결과 총점 95% 이상인가요?`,
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66bc642cdfbbde443b7ce810',
                extra: {
                  labelNo: item.labelNo,
                  exclusion: true
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66bc642cdfbbde443b7ce810',
                extra: {
                  labelNo: item.labelNo,
                  exclusion: false
                }
              }
            ]
          }
        }
      ]
    }
  });
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/index.js
Content:
const router = require('express').Router();

const foodenter = require('./food/enter')
const foodfst = require('./food/fstcheck')
const foodscd = require('./food/scdcheck')
const foodtrd = require('./food/trdcheck')
const foodlast = require('./food/lastcheck')
const foodwrap = require('./food/wrap')
const foodresult = require('./food/result')

router.use('/food/enter', foodenter)
router.use('/food/foodfst', foodfst)
router.use('/food/foodscd', foodscd)
router.use('/food/foodtrd', foodtrd)
router.use('/food/foodlast', foodlast)
router.use('/food/foodwrap', foodwrap)
router.use('/food/foodresult', foodresult)


const livestockenter = require('./livestock/enter')
const livestockexclusion = require('./livestock/exclusion')
const livestockfst = require('./livestock/fstcheck')
const livestockscd = require('./livestock/scdcheck')
const livestockresult = require('./livestock/result')


router.use('/livestock/enter', livestockenter)
router.use('/livestock/exclusion', livestockexclusion)
router.use('/livestock/fst', livestockfst)
router.use('/livestock/scd', livestockscd)
router.use('/livestock/result', livestockresult)


const faqenter = require('./faq/enter')
const faqquestion = require('./faq/question')
const faqanswer = require('./faq/answer')


router.use('/faq/enter', faqenter)
router.use('/faq/question', faqquestion)
router.use('/faq/answer', faqanswer)


const institute = require('./institute')

router.use('/institute', institute)


const fee = require('./fee')

router.use('/fee', fee)


const notification = require('./notification')

router.use('/notification', notification)


const information = require('./information')

router.use('/information', information)



router.all('*',(req, res)=>{
	res.status(404).send({success:false, msg:`api unknown uri ${req.path}`});
})

module.exports = router;
File: ./quality-chatbot/routes/chatbot/food/result/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  
  let descriptionParts = [];
  let outputArray = [];
  
  ['entry', 'fst', 'scd', 'last'].forEach(key => {
    if (item[key]) {
      descriptionParts.push(item[key]);
    }
  });
  
  let description = descriptionParts.join('\n');
  
  if(item.wrap === undefined) {
    
    outputArray = [
      {
        basicCard: {
          description: description,
          thumbnail: {
            imageUrl: 'https:
          },
          buttons: [
            {
              action: 'block',
              label: '처음으로',
              blockId: '66b5751827bc5c0c5f6d66ad'
            }
          ]
        }
      }
    ];
  } else {
    
    if(item.wrap) {
      outputArray = [
        {
          basicCard: {
            description: '',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    } else if(!item.wrap) {
      outputArray = [
        {
          basicCard: {
            description: '',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'block',
                label: '처음으로',
                blockId: '66b5751827bc5c0c5f6d66ad'
              }
            ]
          }
        }
      ]
    }
  }



  
  return res.send({
    version: '2.0',
    template: {
      outputs: outputArray
    }
  });
  
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;
outputs: [
  {
    basicCard: {
      title: '파킹프렌즈 챗봇',
      description:
        '\n안녕하세요,고객님!\n파킹프렌즈 고객센터 챗봇입니다.\n\n▶ 원하시는 문의사항을 아래 목록에서 선택해주세요.',
      thumbnail: {
        imageUrl: 'http:
      },
      buttons: [
        {
          action: 'webLink',
          label: '챗봇 알아보기',
          webLinkUrl: 'http:
        }
      ]
    }
  }
]
File: ./quality-chatbot/routes/chatbot/food/fstcheck/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          simpleText: {
            text: `${item.business}을(를) 선택하셨군요!\n\n아래 질문들에 '예' 또는 '아니오'로 답변해주세요.📝`
          }
        },
        {
          textCard: {
            description: '작년에 HACCP 적용업소에서 검사대상 식품유형의 조사･평가 결과 95% 이상 받으셨나요?',
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66ba103d3c742d06794fd4d3',
                extra: {
                  ...item, 
                  fst: '하지만 작년에  HACCP 적용업소 조사･평가 결과 95% 이상 받으셔서 자가품질검사 면제 대상입니다.\n'
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66ba103d3c742d06794fd4d3',
                extra: {
                  ...item,
                  fst: null
                }
              }
            ]
          }
        }
      ]
    }
  });
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/food/enter/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;

  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          basicCard: {
            title: '세부 업종 선택',
            description:
              '식품업에 해당되는 세부업종을 선택해주세요.',
            thumbnail: {
              imageUrl: 'https:
            },
            buttons: [
              {
                action: 'block',
                label: '1번',
                blockId: '66b5947591268b20d505ab3a',
                extra: {
                  business: '식품가공업 / 즉석판매제조 가공업',
                  entry: '사장님의 업체는 자가품질검사 대상입니다.\n'
                }
              },
              {
                action: 'block',
                label: '2번',
                blockId: '66bc6146fb8580048bc66e8c',
                extra: {
                  business: '식품첨가물제조업자 / OEM식품 수입 판매업'
                }
              },
              {
                action: 'block',
                label: '3번',
                blockId: '66b57a7ab754f127a21d6726',
                extra: {
                  business: '식품관련 용기·포장류 제조업자',
                }
              }
            ]
          }
        }
      ],
      quickReplies: [
        {
          action: 'block',
          label: '여기에 없어요',
          blockId: '66c3527f7262a477cc45447d'
        }
      ]
    }
  });
});

router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;
File: ./quality-chatbot/routes/chatbot/food/scdcheck/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  
  
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          textCard: {
            description: '사장님의 업체에서 제품을 제조하기 위해 반가공 원료식품을 수입하셨나요?\n\n예를 들어 크로와상을 만들기 전 반죽된 생지와 같은 것입니다.',
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66ba10533c742d06794fd4d7',
                extra: {
                  ...item,
                  scd: '반가공 원료 식품 수입 제품에 대해서도 별도의 자가품질검사를 꼭 받으셔야 해요.\n'
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66ba10533c742d06794fd4d7',
                extra: {
                  ...item,
                  scd: null
                }
              }
            ]
          }
        }
      ]
    }
  });
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/food/wrap/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          simpleText: {
            text: `${item.business}을(를) 선택하셨군요!\n\n아래 질문들에 '예' 또는 '아니오'로 답변해주세요.📝`
          }
        },
        {
          textCard: {
            description: '제조하시는 용기 및 포장의 재질이 목재나 수지인가요?',
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66ba1822bb533f4a219eab51',
                extra: {
                  wrap: true
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66ba1822bb533f4a219eab51',
                extra: {
                  wrap: false
                }
              }
            ]
          }
        }
      ]
    }
  });
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/food/trdcheck/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          textCard: {
            description: '사장님의 업체에서 제품에 사용하기 위해 용기·포장을 수입하셨나요?',
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66ba10673c742d06794fd4dc',
                extra: {
                  ...item,
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66ba1822bb533f4a219eab51',
                extra: {
                  ...item,
                }
              }
            ]
          }
        }
      ]
    }
  });
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/chatbot/food/lastcheck/index.js
Content:
const router = require('express').Router();

router.post('/', (req, res) => {
  const item = req.body.action.clientExtra;
  
  return res.send({
    version: '2.0',
    template: {
      outputs: [
        {
          textCard: {
            description: '포장의 재질이 목재나 수지인가요? ',
            buttons: [
              {
                action: 'block',
                label: '예',
                blockId: '66ba1822bb533f4a219eab51',
                extra: {
                  ...item,
                  last: null
                }
              },
              {
                action: 'block',
                label: '아니오',
                blockId: '66ba1822bb533f4a219eab51',
                extra: {
                  ...item,
                  last: '목재나 수지 재질이 아닌 용기나 포장에 대해서도 자가품질검사를 받으셔야 합니다.'
                }
              }
            ]
          }
        }
      ]
    }
  });
});
router.all('*', (req, res) => {
  res.status(404).send({ success: false, msg: 'words unknown uri ${req.path}' });
});

module.exports = router;

File: ./quality-chatbot/routes/users.js
Content:
var express = require('express');
var router = express.Router();

router.get('/', function(req, res, next) {
  res.send('respond with a resource');
});

module.exports = router;

File: ./quality-chatbot/routes/index.js
Content:
var express = require('express');
var router = express.Router();
const chatbot = require('./chatbot')

router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
  next();
});

router.use('/chatbot', chatbot)

module.exports = router;

File: ./quality-chatbot/app.js
Content:
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');

const indexRouter = require('./routes/index');
const usersRouter = require('./routes/users');

const db = require('./config/db');
const cors = require('cors');

const app = express();

const conn = db.init();
db.connect(conn)

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);

module.exports = app;
